<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd"[]>
<chapter>
  <title>Web API</title>
  <para>The Web API is a component which makes it possible for external systems  to access and manipulate  data stored in an instance of DHIS 2. More precisely, it provides a   programmatic interface to a wide range of exposed data and service methods for applications such as third-party software clients, web portals and  internal DHIS 2 modules.</para>
  <section>
    <title>Introduction</title>
    <para>The Web API adheres to many of the principles behind the REST architectural style. To mention some few and important ones:</para>
    <orderedlist>
      <listitem>
        <para>The fundamental building blocks are referred to as <emphasis role="italic">resources</emphasis>. A resource can be anything exposed to the Web, from a document to a business process - anything a client might want to interact with. The information aspects of a resource can be retrieved or exchanged through resource <emphasis role="italic">representations</emphasis>. A representation is a view of a resource&apos;s state at any given time. For instance, the <emphasis role="italic">reportTable</emphasis> resource in DHIS represents a tabular report of aggregated data for a certain set of parameters. This resource can be retrieved in a variety of representation formats including HTML, PDF, and MS Excel.</para>
      </listitem>
      <listitem>
        <para>All resources can be uniquely identified by a <emphasis role="italic">URI</emphasis> (also referred to as <emphasis role="italic">URL</emphasis>). All resources have a default representation. You can indicate that you are interested in a specific representation  by supplying an <emphasis role="italic">Accept</emphasis> HTTP header, a file extension or a <emphasis role="italic">format</emphasis> query parameter. So in order to retrieve the PDF representation of a report table you can  supply a <emphasis role="italic">Accept: application/pdf</emphasis> header or append <emphasis role="italic">.pdf</emphasis> or <emphasis role="italic">?format=pdf</emphasis> to your request URL.</para>
      </listitem>
      <listitem>
        <para>Interactions with the API requires correct use of HTTP <emphasis role="italic">methods</emphasis> or <emphasis role="italic">verbs</emphasis>. This implies that for a resource you must issue a  <emphasis role="italic">GET</emphasis> request when you want to retrieve it, <emphasis role="italic">POST</emphasis> request when you want to create one, <emphasis role="italic">PUT</emphasis> when you want to update it and <emphasis role="italic">DELETE</emphasis> when you want to remove it. So if you want to retrieve the default representation of a report table you can send a GET request to e.g. <emphasis role="italic">/reportTable/iu8j/hYgF6t</emphasis>, where the last part is the report table identifier.</para>
      </listitem>
      <listitem>
        <para>Resource representations are <emphasis role="italic">linkable</emphasis>, meaning that representations advertise other resources which are relevant to the current one by embedding links into itself. This feature greatly improves the usability and robustness of the API as we will see later. For instance, you can easily navigate to the indicators which are associated with a report table from the <emphasis role="italic">reportTable</emphasis> resource  through the embedded links using your preferred representation format.</para>
      </listitem>
    </orderedlist>
    <para>While all of this might sound complicated, the Web API is actually very simple to use. We will proceed with a few practical examples in a minute.</para>
  </section>
  <section>
    <title>Authentication</title>
    <para>In order to interoperate with the Web API you will have to authenticate using <emphasis role="italic">Basic authentication</emphasis>. Basic authentication is a technique for clients to send login credentials over HTTP to a web server. Technically speaking, the username is appended with a colon and the password, Base64-encoded, prefixed Basic  and   supplied as the value of the <emphasis role="italic">Authorization</emphasis> HTTP header. More formally that is<code> Authorization: Basic base64encode(username:password)</code> An important note is that this authentication scheme provides no security since the username and password is sent in plain text and can be easily decoded. Using it is  recommended only if the server is using SSL/TLS (HTTPS) to encrypt communication between itself and the client. Most DHIS 2 deployments typically use SSL today - consider it a hard requirement to provide secure interactions with the Web API.</para>
    <para>If you are building a form-based web application and want to authenticate using a web form
      you can have the form send a POST request to the login endpoint in DHIS which is <emphasis role="italic">/dhis-web-commons-security/login.action?authOnly=true</emphasis> . Two request
      parameters, <emphasis role="italic">j_username</emphasis> and <emphasis role="italic">j_password</emphasis>, containing the username and password in clear-text respectively, are
      expected. The browser will then receive a cookie which will be used for authentication for
      subsequent requests. The purpose of the <emphasis role="italic">authOnly</emphasis> parameter
      is to avoid a time-consuming redirect to the home page of the user.</para>
    <para>You can verify and get information about the currently authenticated user by making a GET
      request to the following URL:</para>
    <screen>/api/currentUser</screen>
  </section>
  <section>
    <title>Date and period format</title>
    <para>Throughout the Web API we refer to dates and periods. The date format  is:</para>
    <screen>yyyy-MM-dd</screen>
    <para>For instance, if you want to express March 20, 2014 you must use <emphasis role="italic"
        >2014-03-20</emphasis>.</para>
    <para>The period format is described in the following table. </para>
    <table>
      <title>Period format</title>
      <tgroup cols="4">
        <colspec colnum="1" colname="c1" colwidth="60pt"/>
        <colspec colnum="2" colname="c2" colwidth="80pt"/>
        <colspec colnum="3" colname="c3" colwidth="80pt"/>
        <colspec colnum="4" colname="c4" colwidth="200pt"/>
        <thead>
          <row>
            <entry> Interval </entry>
            <entry> Format </entry>
            <entry> Example </entry>
            <entry> Description </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>Day</entry>
            <entry>
              <emphasis>yyyyMMdd</emphasis>
            </entry>
            <entry>20040315</entry>
            <entry>March 15 2004</entry>
          </row>
          <row>
            <entry>Week</entry>
            <entry><emphasis>yyyy</emphasis>W<emphasis>n</emphasis></entry>
            <entry>2004W10</entry>
            <entry>Week 10 2004</entry>
          </row>
          <row>
            <entry>Month</entry>
            <entry>
              <emphasis>yyyyMM</emphasis>
            </entry>
            <entry>200403</entry>
            <entry>March 2004</entry>
          </row>
          <row>
            <entry>Quarter</entry>
            <entry><emphasis>yyyy</emphasis>Q<emphasis>n</emphasis></entry>
            <entry>2004Q1</entry>
            <entry>January-March 2004</entry>
          </row>
          <row>
            <entry>Six-month</entry>
            <entry><emphasis>yyyy</emphasis>S<emphasis>n</emphasis></entry>
            <entry>2004S1</entry>
            <entry>January-June 2004</entry>
          </row>
          <row>
            <entry>Six-month April</entry>
            <entry><emphasis>yyyy</emphasis>AprilSn</entry>
            <entry>2004AprilS1</entry>
            <entry>April-September 2004</entry>
          </row>
          <row>
            <entry>Year</entry>
            <entry>yyyy</entry>
            <entry>2004</entry>
            <entry>2004</entry>
          </row>
          <row>
            <entry>Financial Year April</entry>
            <entry>yyyyApril</entry>
            <entry>2004April</entry>
            <entry>Apr 2004-Mar 2005</entry>
          </row>
          <row>
            <entry>Financial Year July</entry>
            <entry>yyyyJuly</entry>
            <entry>2004July</entry>
            <entry>July 2004-June 2005</entry>
          </row>
          <row>
            <entry>Financial Year Oct</entry>
            <entry>yyyyOct</entry>
            <entry>2004Oct</entry>
            <entry>Oct 2004-Sep 2005</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>In some parts of the API, like for the analytics resource, you can utilize relative
      periods in addition to fixed periods (defined above). The relative periods are relative to the
      current date, and allows e.g. for creating dynamic reports. The available relative period
      values are:</para>
    <screen>LAST_MONTH, LAST_BIMONTH, LAST_QUARTER, LAST_SIX_MONTH, MONTHS_THIS_YEAR, QUARTERS_THIS_YEAR,
THIS_YEAR, MONTHS_LAST_YEAR, QUARTERS_LAST_YEAR, LAST_YEAR, LAST_5_YEARS, LAST_12_MONTHS,
LAST_3_MONTHS, LAST_6_BIMONTHS, LAST_4_QUARTERS, LAST_2_SIXMONTHS, THIS_FINANCIAL_YEAR,
LAST_FINANCIAL_YEAR, LAST_5_FINANCIAL_YEARS, LAST_WEEK, LAST_4_WEEKS, LAST_12_WEEKS, LAST_52_WEEKS</screen>
  </section>
  <section>
    <title>Browsing the Web API</title>
    <para>The entry point for browsing the Web API is <emphasis role="italic">/api/</emphasis>. This
      resource provide links to all available resources. Four resource representation formats are
      consistently available for all resources: HTML, XML, JSON and JSONP. Some resources will have
      other formats available, like MS Excel, PDF, CSV and PNG. To explore the API from a web
      browser, navigate to the <emphasis role="italic">/api/</emphasis> entry point and follow the
      links to your desired resource, for instance <emphasis role="italic">/api/dataElements</emphasis>. For all resources which return a list of elements certain
      query parameters can be used to modify the response:</para>
    <para>
      <table frame="all">
        <title>Query parameters</title>
        <tgroup cols="4">
          <colspec colnum="1" colname="c1" colwidth="1.0*"/>
          <colspec colnum="2" colname="c2" colwidth="1.0*"/>
          <colspec colnum="3" colname="c3" colwidth="1.0*"/>
          <colspec colnum="4" colname="c4" colwidth="1.0*"/>
          <thead>
            <row>
              <entry>Param</entry>
              <entry>Option values</entry>
              <entry>Default option</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>links</entry>
              <entry>true | false</entry>
              <entry>true</entry>
              <entry>Indicates whether to include links to relevant elements.</entry>
            </row>
            <row>
              <entry>paging</entry>
              <entry>true | false</entry>
              <entry>true</entry>
              <entry>Indicates whether to return lists of elements in pages.</entry>
            </row>
            <row>
              <entry>page</entry>
              <entry>number</entry>
              <entry>1</entry>
              <entry>Defines which page number to return.</entry>
            </row>
            <row>
              <entry>pageSize</entry>
              <entry>number</entry>
              <entry>50</entry>
              <entry>Defines the number of elements to return for each page.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </para>
    <para>An example of how these parameters can be used to get a full list of data element groups
      in XML response format is:</para>
    <screen>/api/dataElementGroups.xml?links=false&amp;paging=false</screen>
    <para>You can query for elements on the name property instead of returning full list of elements using the <emphasis role="italic">query</emphasis> query variable. In this example we query for all data elements with the word &quot;anaemia&quot; in the name:</para>
    <screen>/api/dataElements?query=anaemia</screen>
    <para>You can find an object based on its ID across all object types through the <emphasis role="italic">identifiableObjects</emphasis> resource:</para>
    <screen>/api/identifiableObjects/&lt;id&gt;</screen>
  </section>
  <section>
    <title>Working with the meta-data API</title>
    <para>The meta-data resource can be accessed at <emphasis role="italic">/api/metaData</emphasis>. This resource lets you read and write the full set of meta-data.
      This section will give a basic introduction to working with this API. For specific
      synchronization issues, please see the integration chapter.</para>
    <para>By default, interacting with<emphasis role="italic"> /api/metaData</emphasis> using the
      GET HTTP method will give you all meta-data rendered as XML. You can also be more specific
      about the meta-data elements you are interested in.</para>
    <para>
      <table>
        <title>Available Content-Types</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry> Content-Type </entry>
              <entry> Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>application/xml</entry>
              <entry>Returns the meta-data in XML representation</entry>
            </row>
            <row>
              <entry>application/json</entry>
              <entry>Returns the meta-data in JSON representation</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </para>
    <para>The following query parameters are available for customizing your request.</para>
    <para>
      <table>
        <title>Available Query Filters</title>
        <tgroup cols="5">
          <thead>
            <row>
              <entry> Param </entry>
              <entry> Type </entry>
              <entry> Required </entry>
              <entry> Options (default first) </entry>
              <entry> Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>assumeTrue</entry>
              <entry>boolean</entry>
              <entry>false</entry>
              <entry>true | false</entry>
              <entry>Indicates whether to get all resources or no resources by default.</entry>
            </row>
            <row>
              <entry>viewClass</entry>
              <entry>enum</entry>
              <entry>false</entry>
              <entry>export | basic | detailed</entry>
              <entry>Alternative views of the meta-data. Please note that only meta-data exported with viewClass=export can be used for import.</entry>
            </row>
            <row>
              <entry>dryRun</entry>
              <entry>boolean</entry>
              <entry>false</entry>
              <entry>false | true</entry>
              <entry>If you set this to true, the actual import will not happen. Instead the system will generate a summary of what would have been done.</entry>
            </row>
            <row>
              <entry>{resources}</entry>
              <entry>boolean</entry>
              <entry>false</entry>
              <entry>true | false (default depends on assumeTrue)</entry>
              <entry>See <emphasis role="italic">/api</emphasis> for available resources. Indicates which resources to include in the response.</entry>
            </row>
            <row>
              <entry>lastUpdated</entry>
              <entry>date</entry>
              <entry>false</entry>
              <entry>Several formats are available: yyyy, yyyy-MM, yyyy-MM-dd, yyyyMM, yyyyMMdd</entry>
              <entry>Filters the meta-data based on the lastUpdated field.</entry>
            </row>
            <row>
              <entry>preheatCache</entry>
              <entry>boolean</entry>
              <entry>false</entry>
              <entry>true | false</entry>
              <entry>Turn cache-map preheating on/off. This is on by default, turning this off will make initial load time for importer much shorter (but will make the import itself slower). This is mostly used for cases where you have a small XML file you want to import, and don&apos;t want to wait for cache-map preheating.</entry>
            </row>
            <row>
              <entry>strategy</entry>
              <entry>enum</entry>
              <entry>false</entry>
              <entry>CREATE_AND_UPDATE | CREATE | UPDATE | DELETE</entry>
              <entry>Import strategy to use, see below for more information.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </para>
    <section>
      <title>Available strategies for import</title>
      <para>
    <table>
          <title>Available Strategies</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry> Type </entry>
                <entry> Description </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>CREATE_AND_UPDATE</entry>
                <entry>Allows creation and updating of objects.</entry>
              </row>
              <row>
                <entry>CREATE</entry>
                <entry>Allows creation of objects.</entry>
              </row>
              <row>
                <entry>UPDATE</entry>
                <entry>Allows update of objects.</entry>
              </row>
              <row>
                <entry>DELETE</entry>
                <entry>Allows deletes of objects.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
    </para>
    </section>
    <section>
      <title>Examples</title>
      <para>
        <emphasis role="bold">Example: Get a filtered set of meta-data that was updated since August
          1, 2014</emphasis>
      </para>
      <para>As described in the last section, there is a number of options you can apply to
          <emphasis role="italic">/api/metaData</emphasis> to give you a filtered view. The use-case
        we will be looking into here is where you want a nightly job that synchronizes organisation
        units. We will be using <emphasis role="italic">cURL</emphasis> as the HTTP
        client.<screen>curl -H &quot;Accept: application/xml&quot; -u admin:district
  &quot;https://apps.dhis2.org/demo/api/metaData?assumeTrue=false&amp;organisationUnits=true&amp;lastUpdated=2014-08-01&quot;</screen></para>
      <para><emphasis role="bold">Example: Get meta-data that was updated since February
          2014</emphasis></para>
      <para>This example will just the default <emphasis role="italic">assumeTrue</emphasis>
        setting, along with getting the last updates from February 2014. This means that every
        single type that has been updated will be
        retrieved.<screen>curl -H &quot;Accept: application/xml&quot; -u admin:district &quot;https://apps.dhis2.org/demo/api/metaData?lastUpdated=2014-02&quot;</screen></para>
      <para><emphasis role="bold">Example: Create meta-data</emphasis></para>
      <para>The meta-data resource can also be used to create or update meta-data by using the POST
      HTTP method. The meta-data content can be both XML and JSON, using &quot;application/xml&quot; and
      &quot;application/json&quot; content type respectively. The request payload content will be accepted in
      several formats, including plain text, zipped and gzipped. POSTing a meta-data payload can be
      done for example like this, where metaData.xml is a file in the same directory with the
      meta-data content:</para>
      <screen>curl -H &quot;Content-Type: application/xml&quot; -u admin:district -d @metaData.xml &quot;https://apps.dhis2.org/demo/api/metaData&quot; -X POST -v</screen>
      <para>The import will happen in a asyncronous process which implies that the response will
      return as soon as the process is started. The response status code to be expected is 204 No
      Content.</para>
    </section>
  </section>
  <section>
    <title>Meta-data filtering</title>
    <para>To filter the meta-data there are several filter operations that can be applied to the
      returned list of meta-data. The format of the filter itself is straight-forward and follows
      the pattern <emphasis role="italic">property:operator:value</emphasis>, where <emphasis role="italic">property</emphasis> is the property on the meta-data you want to filter on,
        <emphasis role="italic">operator</emphasis> is the comparison operator you want to perform
      and <emphasis role="italic">value</emphasis> is the value to check against (not all operators
      require value). Please see the <emphasis role="italic">schema</emphasis> section to discover
      which properties are available. Recursive filtering, ie. filtering on associated objects or
      collection of objects, are supported as well.<table>
        <title>Available Operators</title>
        <tgroup cols="5">
          <thead>
            <row>
              <entry>Operator</entry>
              <entry>Types</entry>
              <entry>Value required</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>eq</entry>
              <entry> string | boolean | integer | float | collection (checks for size) | date </entry>
              <entry>true</entry>
              <entry>Equality</entry>
            </row>
            <row>
              <entry>neq</entry>
              <entry> string | boolean | integer | float | collection (checks for size) | date </entry>
              <entry>true</entry>
              <entry>Inequality</entry>
            </row>
            <row>
              <entry>like</entry>
              <entry> string</entry>
              <entry>true</entry>
              <entry>Case insensitive string matching</entry>
            </row>
            <row>
              <entry>gt</entry>
              <entry> string | boolean | integer | float | collection (checks for size) | date </entry>
              <entry>true</entry>
              <entry>Greater than</entry>
            </row>
            <row>
              <entry>gte</entry>
              <entry> string | boolean | integer | float | collection (checks for size) | date </entry>
              <entry>true</entry>
              <entry>Greater than or equal</entry>
            </row>
            <row>
              <entry>lt</entry>
              <entry> string | boolean | integer | float | collection (checks for size) | date </entry>
              <entry>true</entry>
              <entry>Less than</entry>
            </row>
            <row>
              <entry>lte</entry>
              <entry> string | boolean | integer | float | collection (checks for size) | date </entry>
              <entry>true</entry>
              <entry>Less than or equal</entry>
            </row>
            <row>
              <entry>null</entry>
              <entry> all</entry>
              <entry>false</entry>
              <entry>Property is null</entry>
            </row>
            <row>
              <entry>empty</entry>
              <entry> collection</entry>
              <entry>false</entry>
              <entry>Collection is empty</entry>
            </row>
          </tbody>
        </tgroup>
      </table></para>
    <para>Different operators will be applied as logical <emphasis role="bold">and</emphasis> query,
      and equal operators will be applied as logical <emphasis role="bold">or</emphasis> query. The
      filtering mechanism allows for recursion. See below for an example:</para>
    <para><emphasis role="bold">Example</emphasis>: Get data elements with id property ID1 or
      ID2:<screen>/api/dataElements?filter=id:eq:ID1&amp;filter=id:eq:ID2</screen></para>
    <para><emphasis role="bold">Example</emphasis>: Get all data elements which has the dataSet with
      id ID1:<screen>/api/dataElements?filter=dataSets.id:eq:ID1</screen></para>
    <para>Example 3: Get all data elements with aggregation operator &quot;sum&quot; and value type
      &quot;int&quot;:<screen>/api/dataElements.json?filter=aggregationOperator:eq:sum&amp;filter=type:eq:int</screen></para>
  </section>
  <section>
    <title>Meta-data field filter</title>
    <para>In certain situations the default views of the meta-data can be too verbose. E.g. the
      client might want only need a few fields from each object and want to remove unnecessary ones.
      To discover which fields are available for each object please see the <emphasis role="italic">schema</emphasis> section.</para>
    <para>The format for include/exclude is very simple and allows for infinite recursion. To filter
      at the &quot;root&quot; level you can just use the name of the field, i.e. <emphasis role="italic">?include=id,name</emphasis> which would only display the <emphasis role="italic">id</emphasis> and <emphasis role="italic">name</emphasis> for every object. For objects
      that are either collections or complex objects with properties on their own you can use the
      format <emphasis role="italic">?fields=id,name,dataSets[id,name]</emphasis> which would return
        <emphasis role="italic">id</emphasis>, <emphasis role="italic">name</emphasis> of the root,
      and the <emphasis role="italic">id</emphasis> and <emphasis role="italic">name</emphasis> of
      every data set on that object. Negation can be done with the exclamation operator, and we have
      a set of presets of field select (see below). Both XML and JSON are supported.</para>
    <para><emphasis role="bold">Example</emphasis>: Get <emphasis role="italic">id</emphasis> and
        <emphasis role="italic">name</emphasis> on the indicators
      resource:<screen>/api/indicators?fields=id,name</screen></para>
    <para><emphasis role="bold">Example</emphasis>: Get <emphasis role="italic">id</emphasis> and
        <emphasis role="italic">name</emphasis> from dataElements, and <emphasis role="italic">id</emphasis> and <emphasis role="italic">name</emphasis> from the dataSets on
      dataElements:<screen>/api/dataElements?fields=id,name,dataSets[id,name]</screen></para>
    <para>To exclude a field from the output you can use the exclamation (!) operator. This is
      allowed anywhere in the query and will simply not include that property (as it might have been
      inserted in some of the presets).</para>
    <para>A few presets (selected fields groups) are available and can be applied using the &apos;:&apos;
        operator.<table frame="all">
        <title>Property operators</title>
        <tgroup cols="2">
          <colspec colnum="1" colname="c1" colwidth="1*"/>
          <colspec colnum="2" colname="c2" colwidth="3.54*"/>
          <thead>
            <row>
              <entry>Operator</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>&lt;field-name&gt;</entry>
              <entry>Include property with name, if it exists.</entry>
            </row>
            <row>
              <entry>&lt;object&gt;[&lt;field-name&gt;, ...]</entry>
              <entry>Includes a field within either a collection (will be applied to every object in that collection), or just on a single object.</entry>
            </row>
            <row>
              <entry>!&lt;field-name&gt;, &lt;object&gt;[!&lt;field-name&gt;</entry>
              <entry>Do not include this field name, also works inside objects/collections. Useful when you use a preset to inlude fields.</entry>
            </row>
            <row>
              <entry>*, &lt;object&gt;[*]</entry>
              <entry>Include all fields on a certain object, if applied to a collection, it will include all fields on all objects on that collection.</entry>
            </row>
            <row>
              <entry>:&lt;preset&gt;</entry>
              <entry>Alias to select multiple fields. Three presets are currently available, see table below for descriptions.</entry>
            </row>
          </tbody>
        </tgroup>
      </table></para>
    <table frame="all">
      <title>Field presets</title>
      <tgroup cols="2">
        <colspec colnum="1" colname="c1" colwidth="1.0*"/>
        <colspec colnum="2" colname="c2" colwidth="1.0*"/>
        <thead>
          <row>
            <entry>Preset</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>all</entry>
            <entry>All fields of the object</entry>
          </row>
          <row>
            <entry>*</entry>
            <entry>Alias for all</entry>
          </row>
          <row>
            <entry>identifiable</entry>
            <entry>Includes id, name, code, created and lastUpdated fields</entry>
          </row>
          <row>
            <entry>nameable</entry>
            <entry>Includes id, name, shortName, code, description, created and lastUpdated fields</entry>
          </row>          
          <row>
            <entry>persisted</entry>
            <entry>Returns all persisted property on a object, does not take into consideration if the object is the owner of the relation.</entry>
          </row>
          <row>
            <entry>owner</entry>
            <entry>Returns all persisted property on a object where the object is the owner of all properties, this payload can be used to update through the web-api.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para><emphasis role="bold">Example</emphasis>: Include all fields from dataSets except
      organisationUnits:<screen>/api/dataSets?fields=:all,!organisationUnits</screen></para>
    <para><emphasis role="bold">Example</emphasis>: Include only id, name and the collection of
      organisation units from a data set, but exclude the id from organisation
      units:<screen>/api/dataSets/BfMAe6Itzgt?fields=id,name,organisationUnits[:all,!id]</screen></para>
    <para><emphasis role="bold">Example</emphasis>: Include nameable properties from all
      indicators:<screen>/api/indicators.json?fields=:nameable</screen></para>
    <section>
      <title>Field transformers</title>
      <para>In DHIS 2.17 we introduced field transformers, the idea is to allow further
        customization of the properties on the server side. For 2.17 we only supports one
        transformer called <emphasis role="bold">rename</emphasis>, it can be used like
        this:<screen>/api/dataElements/ID?fields=id|rename(i),name|rename(n)</screen></para>
      <para>This will rename the <emphasis role="italic">id</emphasis> property to <emphasis role="italic">i</emphasis> and <emphasis role="italic">name</emphasis> property to
          <emphasis role="italic">n</emphasis>. <emphasis role="italic">Please note that the format should be considered beta in 2.17, and the format might be changed in 2.18.</emphasis></para>
    </section>
    <section>
      <title>Field converters</title>
      <para>In DHIS 2.17 alongside transformers we also introduced field converters, while field
        transformers usually do minor changes to the data stream (name changes etc), field
        converters can completely change the output of the data. For 2.17 we are including 3 field
          converters:<table frame="all">
          <title>Field converters</title>
          <tgroup cols="2">
            <colspec colnum="1" colname="c1" colwidth="1*"/>
            <colspec colnum="2" colname="c2" colwidth="3.76*"/>
            <thead>
              <row>
                <entry>Name</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>size</entry>
                <entry>Gives sizes of strings (length) and collections, i.e. /api/dataElements?fields=dataSets::size</entry>
              </row>
              <row>
                <entry>isEmpty</entry>
                <entry>Is string or collection empty, i.e. /api/dataElements?fields=dataSets::isEmpty</entry>
              </row>
              <row>
                <entry>isNotEmpty</entry>
                <entry>Is string or collection not empty, i.e. /api/dataElements?fields=dataSets::isNotEmpty</entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>
      <para><emphasis role="italic">Please note that the format should be considered beta in 2.17, and the format might be changed in 2.18.</emphasis>
      </para>
    </section>
  </section>
  <section>
    <title>Meta-data create, read, update, delete</title>
    <para>While some of the web-api endpoints already contains support for CRUD (create, read, update, delete), from version 2.15 this is
      now supported on all endpoints. It should work as you expect, and the subsections will give more detailed information about create,
      update, and delete (read is already covered elsewhere, and have been supported for a long time).</para>
    <section>
      <title>Creating and updating objects</title>
      <para>For creating new objects you will need to know the endpoint, the type format, and make
        sure that you have the required authorities. As an example , we will create and update an
          <emphasis role="italic">constant</emphasis>. To figure out the format, we can use the new
          <emphasis role="italic">schema</emphasis> endpoint for getting format description (this
        will be further improved in 2.17). So we will start with getting that
        info:<screen>http://&lt;&lt;server&gt;&gt;/api/schemas/constant.json</screen> From the output, you can see
        that the required authorities for create are F_CONSTANT_ADD, and the important properties
        are: <emphasis role="italic">name</emphasis> and <emphasis role="italic">value</emphasis>.
        From this we can create a JSON payload and save it as a file called
        constant.json:<screen>{
  &quot;name&quot;: &quot;PI&quot;,
  &quot;value&quot;: &quot;3.14159265359&quot;
}</screen></para>
      <para>The same content as an XML
        payload:<screen>&lt;constant name=&quot;PI&quot; xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot;&gt;
  &lt;value&gt;3.14159265359&lt;/value&gt;
&lt;/constant&gt;</screen></para>
      <para>We are now ready create the new <emphasis role="italic">constant</emphasis> by sending a
        POST request to the <emphasis role="italic">constants </emphasis>endpoint with the JSON
        payload using curl:
        <screen>curl -d @constant.json &quot;http://server/api/constants&quot; -X POST -H &quot;Content-Type: application/json&quot; -u user:password</screen></para>
      <para>A specific example of posting the constant to the demo
        server:
        <screen>curl -d @constant.json &quot;https://apps.dhis2.org/api/constants&quot; -X POST -H &quot;Content-Type: application/json&quot; -u admin:district</screen></para>
      <para>If everything went well, you should see an output similar
        to:<screen language="json">{
  &quot;status&quot;:&quot;SUCCESS&quot;,
  &quot;importCount&quot;:{&quot;imported&quot;:1,&quot;updated&quot;:0,&quot;ignored&quot;:0,&quot;deleted&quot;:0},
  &quot;type&quot;:&quot;Constant&quot;
}</screen></para>
      <para>The process will be exactly the same for updating, you make your changes to the JSON/XML payload, find out the <emphasis role="italic">ID</emphasis> of the constant, and then send a PUT request to the endpoint including
        ID:<screen language="bash">curl -X PUT -d @pi.json -H &quot;Content-Type: application/json&quot; -u user:password http://server/api/constants/ID</screen></para>
    </section>
    <section>
      <title>Deleting objects</title>
      <para>Deleting objects are very straight forward, you will need to know the <emphasis role="italic">ID</emphasis> and the endpoint of
        the type you want delete, let&apos;s continue our example from the last section and use a <emphasis role="italic">constant</emphasis>.
        Let&apos;s assume that the id is <emphasis role="italic">abc123</emphasis>, then all you need to do is the send the DELETE request to the
        endpoint + id:<screen>curl -X DELETE -u user:password
http://server/api/constants/ID</screen></para>
      <para>A successful delete should return HTTP status 204 (no content).</para>
    </section>
    <section>
      <title>Adding and removing objects to/from collections</title>
      <para>In order to add or remove objects to or from a collection of objects you can use the
        following
        pattern:<screen>/api/{collection-object}/{collection-object-id}/{collection-name}/{object-id}</screen></para>
      <para>You should use the POST method to add, and the DELETE method to remove an object. The
        components of the pattern are:</para>
      <itemizedlist>
        <listitem>
          <para>collection object: The type of objects that owns the collection you want to
            modify.</para>
        </listitem>
        <listitem>
          <para>collection object id: The identifier of the object that owns the collection you want
            to modify.</para>
        </listitem>
        <listitem>
          <para>collection name: The name of the collection you want to modify.</para>
        </listitem>
        <listitem>
          <para>object id: The identifier of the object you want to add or remove from the
            collection.</para>
        </listitem>
      </itemizedlist>
      <para>As an example, in order to remove a data element with identifier IDB from a data element
        group with identifier IDA you can do a DELETE
        request:<screen>DELETE /api/dataElementGroups/IDA/dataElements/IDB</screen></para>
      <para>To add a category option with identifier IDB to a category with identifier IDA you can
        do a POST request:<screen>POST /api/categories/IDA/categoryOptions/IDB</screen></para>
      <para>Please be aware that the collection object must be the owner of that relationship. This
        can be checked at the <emphasis role="italic">/api/schemas</emphasis> or <emphasis
          role="italic">/api/schemas/type</emphasis> endpoint.</para>
    </section>
  </section>
  <section>
    <title>Data values</title>
    <para>This section is about sending and reading data values.</para>
    <section>
      <title>Sending data values</title>
      <para>A common use-case for system integration is the need to send a set of data values from a
        third-party system into DHIS. In this example we will use the DHIS 2 demo on <ulink
          url="http://apps.dhis2.org/demo"/> as basis and we recommend that you follow the provided
        links with a web browser while reading (log in with <emphasis role="italic"
          >admin</emphasis><emphasis role="italic">/district</emphasis> as username/password). We
        assume that we have collected case-based data using a simple software client running on
        mobile phones for the <emphasis role="italic">Mortality &lt;5 years</emphasis> data set in
        the community of <emphasis role="italic">Ngelehun CHC</emphasis> (in <emphasis role="italic"
          >Badjia</emphasis> chiefdom, <emphasis role="italic">Bo</emphasis> district) for the month
        of January 2014. We have now aggregated our data into a statistical report and want to send
        that data to the national DHIS 2 instance.</para>
      <para>The resource which is most appropriate for our purpose of sending data values is the
          <emphasis role="italic">dataValueSets</emphasis> resource. A data value set represents a
        set of data values which have a logical relationship, usually from being captured off the
        same data entry form. We follow the link to the HTML representation which will take us to
          <ulink url="http://apps.dhis2.org/demo/api/dataValueSets"/>. The format looks like
        this:</para>
      <screen language="xml">&lt;dataValueSet xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot; dataSet=&quot;dataSetID&quot;
  completeDate=&quot;date&quot; period=&quot;period&quot; orgUnit=&quot;orgUnitID&quot; attributeOptionCombo=&quot;aocID&quot;&gt;
  &lt;dataValue dataElement=&quot;dataElementID&quot; categoryOptionCombo=&quot;cocID&quot; value=&quot;1&quot;/&gt;
  &lt;dataValue dataElement=&quot;dataElementID&quot; categoryOptionCombo=&quot;cocID&quot; value=&quot;2&quot;/&gt;
  &lt;dataValue dataElement=&quot;dataElementID&quot; categoryOptionCombo=&quot;cocID&quot; value=&quot;3&quot;/&gt;
&lt;/dataValueSet&gt;</screen>
      <para>JSON is supported in this
        format:<screen>{
  &quot;dataSet&quot;: &quot;dataSetID&quot;,
  &quot;completeDate&quot;: &quot;date&quot;,
  &quot;period&quot;: &quot;period&quot;,
  &quot;orgUnit&quot;: &quot;orgUnitID&quot;,
  &quot;attributeOptionCombo&quot;, &quot;aocID&quot;,
  &quot;dataValues&quot;: [
    { &quot;dataElement&quot;: &quot;dataElementID&quot;, &quot;categoryOptionCombo&quot;: &quot;cocID&quot;, &quot;value&quot;: &quot;1&quot; },
    { &quot;dataElement&quot;: &quot;dataElementID&quot;, &quot;categoryOptionCombo&quot;: &quot;cocID&quot;, &quot;value&quot;: &quot;2&quot; },
    { &quot;dataElement&quot;: &quot;dataElementID&quot;, &quot;categoryOptionCombo&quot;: &quot;cocID&quot;, &quot;value&quot;: &quot;3&quot; }
  ]
}</screen></para>
      <para>CSV is supported in this
        format:<screen>"dataelement","period","orgunit","categoryoptioncombo","attributeoptioncombo","value"
"dataElementID","period","orgUnitID","cocID","aocID","1"
"dataElementID","period","orgUnitID","cocID","aocID","2"
"dataElementID","period","orgUnitID","cocID","aocID","3"</screen></para>
      <para><emphasis role="italic">Note:</emphasis> Please refer to the date and period section above
        for time formats.</para>
      <para>From the example we can see that we need to identify the period, the data set, the org
        unit (facility) and the data elements for which to report.</para>
      <para>To obtain the identifier for the data set we return to the entry point at <ulink url="http://apps.dhis2.org/demo/api"/> and follow the embedded link pointing at the
          <emphasis role="italic">dataSets</emphasis> resource located at <ulink url="http://apps.dhis2.org/demo/api/dataSets"/>. From there we find and follow the link to
        the <emphasis role="italic">Mortality &lt; 5 years</emphasis> data set which leads us to
          <ulink url="http://apps.dhis2.org/demo/api/dataSets/pBOMPrpg1QX"/>. The resource
        representation for the <emphasis role="italic">Mortality &lt; 5 years</emphasis> data set
        conveniently advertises links to the data elements which are members of it. From here we can
        follow these links and obtain the identifiers of the data elements. For brevity we will only
        report on three data elements: <emphasis role="italic">Measles</emphasis> with id <emphasis role="italic">f7n9E0hX8qk</emphasis>, <emphasis role="italic">Dysentery</emphasis> with id
          <emphasis role="italic">Ix2HsbDMLea</emphasis> and <emphasis role="italic">Cholera</emphasis> with id <emphasis role="italic">eY5ehpbEsB7</emphasis>.</para>
      <para>What remains is to get hold of the identifier of the facility (org unit). The <emphasis role="italic">dataSet</emphasis> representation conveniently provides link to org units
        which report on it so we search for<emphasis role="italic"> Ngelehun CHC</emphasis> and
        follow the link to the HTML representation at <ulink url="http://apps.dhis2.org/demo/api/organisationUnits/DiszpKrYNg8"/>, which tells us that
        the identifier of this org unit is <emphasis role="italic">DiszpKrYNg8</emphasis>.</para>
      <para>From our case-based data we assume that we have 12 cases of measles, 14 cases of dysentery and 16 cases of cholera. We have now gathered enough information to be able to put together the XML data value set message:</para>
      <screen language="xml">&lt;dataValueSet xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot; dataSet=&quot;pBOMPrpg1QX&quot;
  completeDate=&quot;2014-02-03&quot; period=&quot;201401&quot; orgUnit=&quot;DiszpKrYNg8&quot;&gt;
  &lt;dataValue dataElement=&quot;f7n9E0hX8qk&quot; value=&quot;12&quot;/&gt;
  &lt;dataValue dataElement=&quot;Ix2HsbDMLea&quot; value=&quot;14&quot;/&gt;
  &lt;dataValue dataElement=&quot;eY5ehpbEsB7&quot; value=&quot;16&quot;/&gt;
&lt;/dataValueSet&gt;</screen>
      <para>In JSON
        format:<screen language="json">{
  &quot;dataSet&quot;: &quot;pBOMPrpg1QX&quot;,
  &quot;completeData&quot;: &quot;2014-02-03&quot;,
  &quot;period&quot;: &quot;201401&quot;,
  &quot;orgUnit&quot;: &quot;DiszpKrYNg8&quot;,
  &quot;dataValues&quot;: [
    { &quot;dataElement&quot;: &quot;f7n9E0hX8qk&quot;, &quot;value&quot;: &quot;1&quot; },
    { &quot;dataElement&quot;: &quot;Ix2HsbDMLea&quot;, &quot;value&quot;: &quot;2&quot; },
    { &quot;dataElement&quot;: &quot;eY5ehpbEsB7&quot;, &quot;value&quot;: &quot;3&quot; }
  ]
}</screen></para>
      <para>To perform functional testing we will use the cURL tool (<ulink url="http://curl.haxx.se"/>) which provides an easy way of transferring data using HTTP. First we save the data value
      set XML content in a file called <emphasis role="italic">datavalueset.xml</emphasis> . From
      the directory where this file resides we invoke the following from the command line:</para>
      <screen>curl -d @datavalueset.xml &quot;https://apps.dhis2.org/demo/api/dataValueSets&quot; -H &quot;Content-Type:application/xml&quot; -u admin:district -v</screen>
      <para>For sending JSON content you must set the content-type header
        accordingly:<screen>curl -d @datavalueset.xml &quot;https://apps.dhis2.org/demo/api/dataValueSets&quot; -H &quot;Content-Type:application/json&quot; -u admin:district -v</screen></para>
      <para>The command will dispatch a request to the demo Web API,  set <emphasis role="italic">application/xml</emphasis> as the content-type and  authenticate using admin/district as username/password.   If all goes well this will return a <emphasis role="italic">200 OK</emphasis> HTTP status code. You can verify that the data has been received by opening the data entry module in DHIS 2 and select the org unit, data set and period used in this example.</para>
      <para>The API follows normal semantics for error handling and HTTP status codes. If you supply an invalid username or password, <emphasis role="italic">401 Unauthorized</emphasis> is returned. If you supply a content-type other than application/xml, <emphasis role="italic">415 Unsupported Media Type</emphasis> is returned. If the XML content is invalid according to the DXF namespace, <emphasis role="italic">400 Bad Request</emphasis> is returned. If you provide an invalid identifier in the XML content, <emphasis role="italic">409 Conflict</emphasis> is returned together with a descriptive message.</para>
      <para>In this example, cURL will authenticate to the server through Basic authentication using
        our supplied username and password as credentials through the <emphasis role="italic">-u</emphasis> flag. </para>
      <para>In a real-world scenario, looking up identifiers, constructing and dispatching XML messages would be the task of the client software application. This software would probably interact with the more machine-friendly XML and JSON resource representations and not the human-friendly HTML representations like we  did in this example. Developing creative and robust consumers of the Web API services begins  here.</para>
    </section>
    <section>
      <title>Sending large bulks of data values</title>
      <para>The previous example showed us how to send a set of related data values sharing the same period and organisation unit. This example will show us how to send large bulks of data values which don&apos;t necessarily are logically related.</para>
      <para>Again we will interact with the with <ulink url="http://apps.dhis2.org/demo/api/dataValueSets"/> resource. This time we will not specify the dataSet and completeDate attributes. Also, we will specify the period and orgUnit attributes on the individual data value elements instead of on the outer data value set element. This will enable us to send data values for various periods and org units:</para>
      <screen>&lt;dataValueSet xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot;&gt;
  &lt;dataValue dataElement=&quot;f7n9E0hX8qk&quot; period=&quot;201401&quot; orgUnit=&quot;DiszpKrYNg8&quot; value=&quot;12&quot;/&gt;
  &lt;dataValue dataElement=&quot;f7n9E0hX8qk&quot; period=&quot;201401&quot; orgUnit=&quot;FNnj3jKGS7i&quot; value=&quot;14&quot;/&gt;
  &lt;dataValue dataElement=&quot;f7n9E0hX8qk&quot; period=&quot;201402&quot; orgUnit=&quot;DiszpKrYNg8&quot; value=&quot;16&quot;/&gt;
  &lt;dataValue dataElement=&quot;f7n9E0hX8qk&quot; period=&quot;201402&quot; orgUnit=&quot;Jkhdsf8sdf4&quot; value=&quot;18&quot;/&gt;
&lt;/dataValueSet&gt;</screen>
      <para>In JSON
        format:<screen>{
  &quot;dataValues&quot;: [
    { &quot;dataElement&quot;: &quot;f7n9E0hX8qk&quot;, &quot;period&quot;: &quot;201401&quot;, &quot;orgUnit&quot;: &quot;DiszpKrYNg8&quot;, &quot;value&quot;: &quot;12&quot; },
    { &quot;dataElement&quot;: &quot;f7n9E0hX8qk&quot;, &quot;period&quot;: &quot;201401&quot;, &quot;orgUnit&quot;: &quot;FNnj3jKGS7i&quot;, &quot;value&quot;: &quot;14&quot; },
    { &quot;dataElement&quot;: &quot;f7n9E0hX8qk&quot;, &quot;period&quot;: &quot;201402&quot;, &quot;orgUnit&quot;: &quot;DiszpKrYNg8&quot;, &quot;value&quot;: &quot;16&quot; },
    { &quot;dataElement&quot;: &quot;f7n9E0hX8qk&quot;, &quot;period&quot;: &quot;201402&quot;, &quot;orgUnit&quot;: &quot;Jkhdsf8sdf4&quot;, &quot;value&quot;: &quot;18&quot; }
  ]
}</screen></para>
      <para>In CSV
        format:<screen>"dataelement","period","orgunit","categoryoptioncombo","attributeoptioncombo","value"
"f7n9E0hX8qk","201401","DiszpKrYNg8","bRowv6yZOF2","bRowv6yZOF2","1"
"Ix2HsbDMLea","201401","DiszpKrYNg8","bRowv6yZOF2","bRowv6yZOF2","2"
"eY5ehpbEsB7","201401","DiszpKrYNg8","bRowv6yZOF2","bRowv6yZOF2","3"</screen></para>
      <para>We test by using cURL to send the data values in XML format:</para>
      <screen>curl -d @datavalueset.xml &quot;https://apps.dhis2.org/demo/api/dataValueSets&quot; -H &quot;Content-Type:application/xml&quot; -u admin:district -v</screen>
      <para>Note that when using CSV format you must use the binary data option to preserve the
        line-breaks in the CSV
        file:<screen>curl --data-binary @datavalueset.xml &quot;https://apps.dhis2.org/demo/api/dataValueSets&quot; -H &quot;Content-Type:application/csv&quot; -u admin:district -v</screen></para>
      <para>The data value set resource provides an XML response which is useful when you want to verify the impact your request had. The first time we send the data value set request above the server will respond with the following<emphasis role="italic"> import summary</emphasis>:</para>
      <screen>&lt;importSummary&gt;
  &lt;dataValueCount imported=&quot;2&quot; updated=&quot;1&quot; ignored=&quot;1&quot;/&gt;
  &lt;dataSetComplete&gt;false&lt;/dataSetComplete&gt;
&lt;/importSummary&gt;</screen>
      <para>This message tells us that 3 data values were imported, 1 data value was updated while zero data values were ignored. The single update comes as a result of us sending that data value in the previous example. A data value will be ignored if it references a non-existing data element, period, org unit or data set. In our case this single ignored value was caused by the last data value having an invalid reference to org unit. The data set complete element will display the date of which the data value set was completed, or false if no data element attribute was supplied.</para>
      <para>The import process can be customized using a set of import parameters:</para>
      <table>
        <title>Import parameters</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry> Parameter </entry>
              <entry> Values (default first) </entry>
              <entry> Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>dataElementIdScheme</entry>
              <entry>id | name | code</entry>
              <entry>Property of the data element object to use to map the data values.</entry>
            </row>
            <row>
              <entry>orgUnitIdScheme</entry>
              <entry>id | name | code</entry>
              <entry>Property of the org unit object to use to map the data values.</entry>
            </row>
            <row>
              <entry>idScheme</entry>
              <entry>id | name | code</entry>
              <entry>Property of both data element and org unit object to use to map the data
                values. Overrides the previous parameters.</entry>
            </row>
            <row>
              <entry>dryRun</entry>
              <entry>false | true</entry>
              <entry>Whether to save changes on the server or just return the import summary.</entry>
            </row>
            <row>
              <entry>importStrategy</entry>
              <entry>NEW_AND_UPDATES | NEW | UPDATES | DELETES</entry>
              <entry>Save objects of all, new or update import status on the server.</entry>
            </row>
            <row>
              <entry>async</entry>
              <entry>false | true</entry>
              <entry>Import data asynchronously and return the request immeditately.</entry>
            </row>
            <row>
              <entry>skipExistingCheck</entry>
              <entry>false | true</entry>
              <entry>Skip checks for existing data values. Improves performance. Only use for empty databases or when the data values to import do not exist already.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>All parameters are optional and can be supplied as query parameters in the request URL like this:</para>
      <screen>https://apps.dhis2.org/demo/api/dataValueSets?dataElementIdScheme=code&amp;orgUnitIdScheme=name&amp;dryRun=true&amp;importStrategy=new</screen>
      <para>They can also be supplied as XML attributes on the data value set element like below. XML attributes will override query string parameters.</para>
      <screen>&lt;dataValueSet xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot; dataElementIdScheme=&quot;code&quot;
  orgUnitIdScheme=&quot;name&quot; dryRun=&quot;true&quot; importStrategy=&quot;new&quot;&gt;
  ..
&lt;/dataValueSet&gt;</screen>
      <para>Regarding the id schemes, by default the identifiers used in the XML messages refer to the
      DHIS stable object identifiers. In certain interoperability situations we might experience
      that the external system decides the identifiers of the objects. In that case we can use the
        <emphasis role="italic">code</emphasis> property of the organisation unit and data element
      objects to set fixed identifiers dictated by the other system. When importing data values we
      hence need to reference the code property instead of the identfier property, and can do so
      using the dataElementIScheme and orgUnitIdScheme paramaters.</para>
    </section>
    <section>
      <title>Generating data value set template</title>
      <para>To generate a data value set template for a certain data set you can use the <emphasis role="italic">/api/dataSets/&lt;id&gt;/dataValueSet</emphasis> resource. XML and JSON
        response formats are supported. Example:</para>
      <screen>api/dataSets/BfMAe6Itzgt/dataValueSet.json</screen>
      <para>The parameters you can use to further adjust the output are described below:</para>
      <table frame="all">
        <title>Data values query parameters</title>
        <tgroup cols="3">
          <colspec colnum="1" colname="c1" colwidth="1*"/>
          <colspec colnum="2" colname="c2" colwidth="1.23*"/>
          <colspec colnum="3" colname="c3" colwidth="4.08*"/>
          <thead>
            <row>
              <entry>Query parameter</entry>
              <entry>Required</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>period</entry>
              <entry>No</entry>
              <entry>Period to use, will be included without any checks.</entry>
            </row>
            <row>
              <entry>orgUnit</entry>
              <entry>No</entry>
              <entry>Organisation unit to use, supports multiple orgUnits, both id and code can be used.</entry>
            </row>
            <row>
              <entry>comment</entry>
              <entry>No</entry>
              <entry>Should comments be include, default: Yes.</entry>
            </row>
            <row>
              <entry>orgUnitIdScheme</entry>
              <entry>No</entry>
              <entry>Organisation unit scheme to use, supports id | code.</entry>
            </row>
            <row>
              <entry>dataElementIdScheme</entry>
              <entry>No</entry>
              <entry>Data-element scheme to use, supports id | code.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section>
      <title>Sending, reading and deleting individual data values</title>
      <para>This example will show how to send individual data values to be saved in a request. This
      can be achieved by sending a <emphasis role="italic">POST</emphasis> request to the <emphasis role="italic">dataValues</emphasis> resource:</para>
      <screen>https://apps.dhis2.org/demo/api/dataValues</screen>
      <para>The following query parameters are supported for this resource:</para>
      <table frame="all">
        <title>Data values query parameters</title>
        <tgroup cols="3">
          <colspec colnum="1" colname="c1" colwidth="1*"/>
          <colspec colnum="2" colname="c2" colwidth="1.23*"/>
          <colspec colnum="3" colname="c3" colwidth="4.08*"/>
          <thead>
            <row>
              <entry>Query parameter</entry>
              <entry>Required</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>de</entry>
              <entry>Yes</entry>
              <entry>Data element identifier</entry>
            </row>
            <row>
              <entry>pe</entry>
              <entry>Yes</entry>
              <entry>Period identifier</entry>
            </row>
            <row>
              <entry>ou</entry>
              <entry>Yes</entry>
              <entry>Organisation unit identifier</entry>
            </row>
            <row>
              <entry>co</entry>
              <entry>No</entry>
              <entry>Category option combo identifier, default will be used if omitted</entry>
            </row>
            <row>
              <entry>cc</entry>
              <entry>No (must combine with cp)</entry>
              <entry>Attribute combo identifier</entry>
            </row>
            <row>
              <entry>cp</entry>
              <entry>No (must combine with cc)</entry>
              <entry>Attribute option identifiers, separated with ; for multiple values</entry>
            </row>
            <row>
              <entry>value</entry>
              <entry>No</entry>
              <entry>Data value</entry>
            </row>
            <row>
              <entry>comment</entry>
              <entry>No</entry>
              <entry>Data comment</entry>
            </row>
            <row>
              <entry>followUp</entry>
              <entry>No</entry>
              <entry>Follow up on data value, will toggle the current boolean value</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>If any of the identifiers given are invalid, if the data value or comment are invalid or
      if the data is locked, the response will contain the <emphasis role="italic">409 Conflict</emphasis> status code and descriptive text message. If the operation lead to a
      saved or updated value, <emphasis role="italic">200 OK</emphasis> will be returned. An example
      of a request looks like this:</para>
      <screen>curl &quot;https://apps.dhis2.org/demo/api/dataValues?de=s46m5MS0hxu&amp;pe=201301&amp;ou=DiszpKrYNg8&amp;co=Prlt0C1RF0s&amp;value=12&quot; -X POST -u admin:district -v</screen>
      <para>This resource also allows a special syntax for associating the value to an attribute
      option combination. This can be done by sending the identifier of the attribute combination,
      together with the identifier(s) of the attribute option(s) which the value represents within
      the combination. An example looks like this:</para>
      <screen>curl &quot;https://apps.dhis2.org/demo/api/dataValues?de=s46m5MS0hxu&amp;ou=DiszpKrYNg8&amp;pe=201308&amp;cc=dzjKKQq0cSO&amp;cp=wbrDrL2aYEc;btOyqprQ9e8&amp;value=26&quot; -X POST -u admin:district -v</screen>
      <para>You can retrieve a data value with a request using the <emphasis role="italic">GET</emphasis> method. The value, comment and followUp params are not applicable in this
        regard:</para>
      <screen>curl &quot;https://apps.dhis2.org/demo/api/dataValues?de=s46m5MS0hxu&amp;pe=201301&amp;ou=DiszpKrYNg8&amp;co=Prlt0C1RF0s&quot; -X GET -u admin:district -v</screen>
      <para>You can delete a data value with a request using the <emphasis role="italic">DELETE</emphasis> method. </para>
    </section>
    <section>
      <title>Reading data values</title>
      <para>This section explains how to retrieve data values from the Web API by interacting with
        the <emphasis role="italic">dataValueSets</emphasis> resource. Data values can be retrieved
        in <emphasis role="italic">XML</emphasis>, <emphasis role="italic">JSON</emphasis> and
          <emphasis role="italic">CSV</emphasis> format. Since we want to read data we will use the
          <emphasis role="italic">GET</emphasis> HTTP verb. We will also specify that we are
        interested in the XML resource representation by including an <emphasis role="italic"
          >Accept</emphasis> HTTP header with our request. The following query parameters are
        required:</para>
      <table frame="all">
        <title>Data value set query parameters</title>
        <tgroup cols="2">
          <colspec colnum="1" colname="c1" colwidth="1*"/>
          <colspec colnum="2" colname="c2" colwidth="2.65*"/>
          <thead>
            <row>
              <entry> Parameter </entry>
              <entry> Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>dataSet</entry>
              <entry>Data set identifier</entry>
            </row>
            <row>
              <entry>period</entry>
              <entry>Period identifier in ISO format</entry>
            </row>
            <row>
              <entry>orgUnit</entry>
              <entry>Organisation unit identifier</entry>
            </row>
            <row>
              <entry>dataElementIdScheme</entry>
              <entry>Property of the data element object to use for data values.</entry>
            </row>
            <row>
              <entry>orgUnitIdScheme</entry>
              <entry>Property of the org unit object to use for data values.</entry>
            </row>
            <row>
              <entry>categoryOptionComboIdScheme</entry>
              <entry>Property of the category option combo object to use for data values.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>It is assumed that we have posted data values to DHIS according to the previous section called &quot;Sending data values&quot;. We can now put together our request and send it using cURL:</para>
      <screen>curl &quot;https://apps.dhis2.org/demo/api/dataValueSets?dataSet=pBOMPrpg1QX&amp;period=201401&amp;orgUnit=DiszpKrYNg8&quot; -H &quot;Accept:application/xml&quot; -u admin:district -v</screen>
      <para>The response will look like this:</para>
      <screen>HTTP/1.1 200 OK
Content-Type: application/xml

&lt;?xml version=&apos;1.0&apos; encoding=&apos;UTF-8&apos;?&gt;
&lt;dataValueSet xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot; dataSet=&quot;pBOMPrpg1QX&quot;
  completeDate=&quot;2014-01-02&quot; period=&quot;201401&quot; orgUnit=&quot;DiszpKrYNg8&quot;&gt;
&lt;dataValue dataElement=&quot;eY5ehpbEsB7&quot; period=&quot;201401&quot; orgUnit=&quot;DiszpKrYNg8&quot;
  categoryOptionCombo=&quot;bRowv6yZOF2&quot; value=&quot;10003&quot;/&gt;
&lt;dataValue dataElement=&quot;Ix2HsbDMLea&quot; period=&quot;201401&quot; orgUnit=&quot;DiszpKrYNg8&quot;
  categoryOptionCombo=&quot;bRowv6yZOF2&quot; value=&quot;10002&quot;/&gt;
&lt;dataValue dataElement=&quot;f7n9E0hX8qk&quot; period=&quot;201401&quot; orgUnit=&quot;DiszpKrYNg8&quot;
  categoryOptionCombo=&quot;bRowv6yZOF2&quot; value=&quot;10001&quot;/&gt;
&lt;/dataValueSet&gt;</screen>
      <para>The header tells us that the request was processed successfully and that we are
        receiving a response in XML format.</para>
      <para>You can request the data in JSON
        format:<screen>curl &quot;https://apps.dhis2.org/demo/api/dataValueSets.json?dataSet=pBOMPrpg1QX&amp;period=201401&amp;orgUnit=DiszpKrYNg8&quot; -u admin:district -v</screen></para>
      <para>The response will look something like
        this:<screen>{
  &quot;dataSet&quot;: &quot;pBOMPrpg1QX&quot;,
  &quot;completeData&quot;: &quot;2014-02-03&quot;,
  &quot;period&quot;: &quot;201401&quot;,
  &quot;orgUnit&quot;: &quot;DiszpKrYNg8&quot;,
  &quot;dataValues&quot;: [
    { &quot;dataElement&quot;: &quot;eY5ehpbEsB7&quot;, &quot;categoryOptionCombo&quot;: &quot;bRowv6yZOF2&quot;, &quot;period&quot;: &quot;201401&quot;,
      &quot;orgUnit&quot;: &quot;DiszpKrYNg8&quot;, &quot;value&quot;: &quot;10003&quot; },
    { &quot;dataElement&quot;: &quot;Ix2HsbDMLea&quot;, &quot;categoryOptionCombo&quot;: &quot;bRowv6yZOF2&quot;, &quot;period&quot;: &quot;201401&quot;, 
      &quot;orgUnit&quot;: &quot;DiszpKrYNg8&quot;, &quot;value&quot;: &quot;10002&quot; },
    { &quot;dataElement&quot;: &quot;f7n9E0hX8qk&quot;, &quot;categoryOptionCombo&quot;: &quot;bRowv6yZOF2&quot;, &quot;period&quot;: &quot;201401&quot;, 
      &quot;orgUnit&quot;: &quot;DiszpKrYNg8&quot;, &quot;value&quot;: &quot;10001&quot; }
  ]
}</screen></para>
      <para>You can request data in CSV
        format:<screen>curl &quot;https://apps.dhis2.org/demo/api/dataValueSets.csv?dataSet=pBOMPrpg1QX&amp;period=201401&amp;orgUnit=DiszpKrYNg8&quot; -u admin:district -v</screen></para>
    </section>
    <section>
      <title>Reading large bulks of data values</title>
      <para>This section explains how to retrieve large bulks of data values which not necessarily
        belong in a single data value set. Data values can be retrieved in <emphasis role="italic"
          >XML</emphasis>, <emphasis role="italic">JSON</emphasis> and <emphasis role="italic"
          >CSV</emphasis> format. We will interact with the <emphasis role="italic"
          >dataValueSets</emphasis> resource. The query parameters to use are these:</para>
      <table frame="all">
        <title>Data value set query parameters</title>
        <tgroup cols="2">
          <colspec colnum="1" colname="c1" colwidth="1*"/>
          <colspec colnum="2" colname="c2" colwidth="4.26*"/>
          <thead>
            <row>
              <entry>Parameter</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>dataSet</entry>
              <entry>Data set identifier, can be specified multiple times</entry>
            </row>
            <row>
              <entry>startDate</entry>
              <entry>Start date for the time span of the values to export</entry>
            </row>
            <row>
              <entry>endDate</entry>
              <entry>End date for the time span of the values to export</entry>
            </row>
            <row>
              <entry>orgUnit</entry>
              <entry>Organisation unit identifier, can be specified multiple times</entry>
            </row>
            <row>
              <entry>children</entry>
              <entry>Whether to include the children in the hierarchy of the organisation
                units</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>The dataSet and orgUnit parameters can be repeated in order to include multiple data
        sets and organisation units. An example request for XML format looks like this:</para>
      <screen>curl &quot;https://apps.dhis2.org/demo/api/dataValueSets?dataSet=pBOMPrpg1QX&amp;dataSet=BfMAe6Itzgt&amp;startDate=2013-01-01&amp;endDate=2013-01-31&amp;
orgUnit=YuQRtpLP10I&amp;orgUnit=vWbkYPRmKyS&amp;children=true&quot; -H &quot;Accept:application/xml&quot; -u admin:district -v</screen>
      <para>You can get the response in <emphasis role="italic">xml</emphasis>, <emphasis
          role="italic">json</emphasis> and <emphasis role="italic">csv</emphasis> format. You can
        indicate which response format you prefer through the <emphasis role="italic"
          >Accept</emphasis> HTTP header like in the example above. For XML you use <emphasis
          role="italic">application/xml</emphasis>, for JSON you use <emphasis role="italic"
          >application/json</emphasis> and for CSV you use <emphasis role="italic"
          >application/csv</emphasis>.</para>
    </section>
  </section>
  <section>
    <title>Events</title>
    <para>This section is about sending and reading events.</para>
    <section>
      <title>Sending events</title>
      <para>DHIS 2 supports three kinds of events: single events with no registration (also referred to as anonymous events), single event
        with registration and multiple events with registration. Registration implies that the data is linked to a tracked entity instance
        which is identified using some sort of identifier.</para>
      <para>To send events to DHIS 2 you must interact with the <emphasis role="italic">events</emphasis> resource. The approach to sending
        events is similar to sending aggregate data values. You will need a <emphasis role="italic">program</emphasis> which can be looked
        up using the <emphasis role="italic">programs</emphasis> resource, an <emphasis role="italic">orgUnit</emphasis> which can be looked
        up using the <emphasis role="italic">organisationUnits</emphasis> resource, and a list of valid data element identifiers which can
        be looked up using the <emphasis role="italic">dataElements</emphasis> resource. For events with registration, a <emphasis role="italic">tracked entity instance</emphasis> identifier is required, read about how to get this in the section about the
          <emphasis role="italic">trackedEntityInstances</emphasis> resource. For sending events to programs with multiple stages, you will
        need to also include the <emphasis role="italic">programStage</emphasis> identifier, the identifiers for programStages can be found
        in the <emphasis role="italic">programStages</emphasis> resource.</para>
      <para>A simple single event with no registration example payload in XML format where we send
      events from the &quot;Inpatient morbidity and mortality&quot; program for the &quot;Ngelehun CHC&quot; facility in
      the demo database can be seen below:</para>
      <screen>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;event program=&quot;eBAyeGv0exc&quot; orgUnit=&quot;DiszpKrYNg8&quot; eventDate=&quot;2013-05-17&quot; status=&quot;COMPLETED&quot; storedBy=&quot;admin&quot;&gt;
  &lt;coordinate latitude=&quot;59.8&quot; longitude=&quot;10.9&quot; /&gt;
  &lt;dataValues&gt;
    &lt;dataValue dataElement=&quot;qrur9Dvnyt5&quot; value=&quot;22&quot; /&gt;
    &lt;dataValue dataElement=&quot;oZg33kd9taw&quot; value=&quot;Male&quot; /&gt;
    &lt;dataValue dataElement=&quot;msodh3rEMJa&quot; value=&quot;2013-05-18&quot; /&gt;
  &lt;/dataValues&gt;
&lt;/event&gt;</screen>
      <para>To perform some testing we can save the XML payload as a file called<emphasis role="italic"> event.xml</emphasis> and send it as a POST request to the events resource
        in the API using curl with the following command:</para>
      <screen>curl -d @event.xml &quot;https://apps.dhis2.org/demo/api/events&quot; -H &quot;Content-Type:application/xml&quot; -u admin:district -v</screen>
      <para>The same payload in JSON format looks like this:</para>
      <screen>{
  &quot;program&quot;: &quot;eBAyeGv0exc&quot;,
  &quot;orgUnit&quot;: &quot;DiszpKrYNg8&quot;,
  &quot;eventDate&quot;: &quot;2013-05-17&quot;,
  &quot;status&quot;: &quot;COMPLETED&quot;,
  &quot;storedBy&quot;: &quot;admin&quot;,
  &quot;coordinate&quot;: {
    &quot;latitude&quot;: &quot;59.8&quot;,
    &quot;longitude&quot;: &quot;10.9&quot;
  },
  &quot;dataValues&quot;: [
    { &quot;dataElement&quot;: &quot;qrur9Dvnyt5&quot;, &quot;value&quot;: &quot;22&quot; },
    { &quot;dataElement&quot;: &quot;oZg33kd9taw&quot;, &quot;value&quot;: &quot;Male&quot; },
    { &quot;dataElement&quot;: &quot;msodh3rEMJa&quot;, &quot;value&quot;: &quot;2013-05-18&quot; }
  ]
}</screen>
      <para>To send this you can save it to a file called <emphasis role="italic">event.json</emphasis> and use curl like this:</para>
      <screen>curl -d @event.json &quot;localhost/api/events&quot; -H &quot;Content-Type:application/json&quot; -u admin:district -v</screen>
      <para>We also support sending multiple events at the same time. A payload in XML format might
      look like this: </para>
      <screen>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;events&gt;
    &lt;event program=&quot;eBAyeGv0exc&quot; orgUnit=&quot;DiszpKrYNg8&quot; eventDate=&quot;2013-05-17&quot; status=&quot;COMPLETED&quot; storedBy=&quot;admin&quot;&gt;
      &lt;coordinate latitude=&quot;59.8&quot; longitude=&quot;10.9&quot; /&gt;
      &lt;dataValues&gt;
        &lt;dataValue dataElement=&quot;qrur9Dvnyt5&quot; value=&quot;22&quot; /&gt;
        &lt;dataValue dataElement=&quot;oZg33kd9taw&quot; value=&quot;Male&quot; /&gt;
      &lt;/dataValues&gt;
    &lt;/event&gt;
    &lt;event program=&quot;eBAyeGv0exc&quot; orgUnit=&quot;DiszpKrYNg8&quot; eventDate=&quot;2013-05-17&quot; status=&quot;COMPLETED&quot; storedBy=&quot;admin&quot;&gt;
      &lt;coordinate latitude=&quot;59.8&quot; longitude=&quot;10.9&quot; /&gt;
      &lt;dataValues&gt;
        &lt;dataValue dataElement=&quot;qrur9Dvnyt5&quot; value=&quot;26&quot; /&gt;
        &lt;dataValue dataElement=&quot;oZg33kd9taw&quot; value=&quot;Female&quot; /&gt;
      &lt;/dataValues&gt;
    &lt;/event&gt;
&lt;/events&gt;</screen>
      <para>You will receive an import summary with the response which can be inspected in order to
      get information about the outcome of the request, like how many values were imported
      successfully. The payload in JSON format looks like this:</para>
      <screen>{
  &quot;events&quot;: [
  {
    &quot;program&quot;: &quot;eBAyeGv0exc&quot;,
    &quot;orgUnit&quot;: &quot;DiszpKrYNg8&quot;,
    &quot;eventDate&quot;: &quot;2013-05-17&quot;,
    &quot;status&quot;: &quot;COMPLETED&quot;,
    &quot;storedBy&quot;: &quot;admin&quot;,
    &quot;coordinate&quot;: {
      &quot;latitude&quot;: &quot;59.8&quot;,
      &quot;longitude&quot;: &quot;10.9&quot;
    },
    &quot;dataValues&quot;: [
      { &quot;dataElement&quot;: &quot;qrur9Dvnyt5&quot;, &quot;value&quot;: &quot;22&quot; },
      { &quot;dataElement&quot;: &quot;oZg33kd9taw&quot;, &quot;value&quot;: &quot;Male&quot; }
    ] },
  {
    &quot;program&quot;: &quot;eBAyeGv0exc&quot;,
    &quot;orgUnit&quot;: &quot;DiszpKrYNg8&quot;,
    &quot;eventDate&quot;: &quot;2013-05-17&quot;,
    &quot;status&quot;: &quot;COMPLETED&quot;,
    &quot;storedBy&quot;: &quot;admin&quot;,
    &quot;coordinate&quot;: {
      &quot;latitude&quot;: &quot;59.8&quot;,
      &quot;longitude&quot;: &quot;10.9&quot;
    },
    &quot;dataValues&quot;: [
      { &quot;dataElement&quot;: &quot;qrur9Dvnyt5&quot;, &quot;value&quot;: &quot;26&quot; },
      { &quot;dataElement&quot;: &quot;oZg33kd9taw&quot;, &quot;value&quot;: &quot;Female&quot; }
    ] }
  ]
}</screen>
      <para>(From 2.13) As part of the import summary you will also get the identifier <emphasis role="italic">reference</emphasis> to the event you just sent, together with a <emphasis role="italic">href</emphasis> element which points to the server location of this event. </para>
      <para><emphasis role="bold">OrgUnit matching</emphasis>: By default the orgUnit parameter will match on the ID (of the orgUnit, but
        from 2.15 you can also select the orgUnit id matching scheme by using the parameter orgUnitIdScheme=SCHEME, where the options are:
          <emphasis role="italic">ID</emphasis>, <emphasis role="italic">UID</emphasis>, <emphasis role="italic">UUID</emphasis>, <emphasis role="italic">CODE</emphasis>, and <emphasis role="italic">NAME</emphasis> (ID and UID will both matchUIDs).</para>
      <para><emphasis role="bold">Update</emphasis>: To update an existing event, the format of the
        payload is the same, but the URL you are posting to must add the identifier to the end of
        the URL string and the request must be PUT.
        <screen>curl -X PUT -d @updated_event.xml &quot;localhost/api/events/ID&quot; -H &quot;Content-Type:application/xml&quot; -u admin:district -v</screen><screen>curl -X PUT -d @updated_event.json &quot;localhost/api/events/ID&quot; -H &quot;Content-Type:application/json&quot; -u admin:district -v</screen></para>
      <para><emphasis role="bold">Delete</emphasis>: To delete an existing event, all you need is to
        send a DELETE request with a identifier reference to the server you are
        using.<screen>curl -X DELETE &quot;localhost/api/events/ID&quot; -u admin:district -v</screen></para>
      <para><emphasis role="bold">Get</emphasis>: To get an existing event you can issue a GET request
        including the identifier like
        this:<screen>curl &quot;localhost/api/events/ID&quot; -H &quot;Content-Type:application/xml&quot; -u admin:district -v</screen></para>
      <para>The table below describes the meaning of each element. Most elements should be fairly
      self-explanatory.</para>
      <para>
      <table>
          <title>Events resource format</title>
          <tgroup cols="5">
            <thead>
              <row>
                <entry> Parameter </entry>
                <entry> Type </entry>
                <entry> Required </entry>
                <entry> Options (default first)</entry>
                <entry> Description </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>programId</entry>
                <entry>string</entry>
                <entry>true</entry>
                <entry/>
                <entry>Identifier of the single event with no registration program</entry>
              </row>
              <row>
                <entry>organisationUnitId</entry>
                <entry>string</entry>
                <entry>true</entry>
                <entry/>
                <entry>Identifier of the organisation unit where the event took place</entry>
              </row>
              <row>
                <entry>eventDate</entry>
                <entry>date</entry>
                <entry>true</entry>
                <entry/>
                <entry>The date of when the event occured</entry>
              </row>
              <row>
                <entry>status</entry>
                <entry>enum</entry>
                <entry>false</entry>
                <entry>ACTIVE, COMPLETED, VISITED,<para>FUTURE_VISIT,
                  LATE_VISIT,</para><para>SKIPPED</para></entry>
                <entry>Whether the event is complete or not</entry>
              </row>
              <row>
                <entry>storedBy</entry>
                <entry>string</entry>
                <entry>false</entry>
                <entry>Defaults to current user</entry>
                <entry>Who stored this event (can be username, system-name etc)</entry>
              </row>
              <row>
                <entry>coordinate</entry>
                <entry>double</entry>
                <entry>false</entry>
                <entry/>
                <entry>Refers to wher the event took place geographically (latitude and longitude)</entry>
              </row>
              <row>
                <entry>dataElementId</entry>
                <entry>string</entry>
                <entry>true</entry>
                <entry/>
                <entry>Identifier of data element</entry>
              </row>
              <row>
                <entry>value</entry>
                <entry>string</entry>
                <entry>true</entry>
                <entry/>
                <entry>Data value or measure for this event</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
    </para>
    </section>
    <section>
      <title>CSV Import / Export</title>
      <para>In addition to XML and JSON for event import/export, in DHIS 2.17 we introduced support
        for the CSV format. Support for this format builds on what was described in the last
        section, so here we will only write about what the CSV specific parts are.</para>
      <para>To use the CSV format you must either use the <emphasis role="italic">/api/events.csv</emphasis> endpoint, or add <emphasis role="italic">content-type:
          text/csv</emphasis> for import, and <emphasis role="italic">accept: text/csv</emphasis>
        for export when using the <emphasis role="italic">/api/events</emphasis> endpoint.</para>
      <para>The order of column in the CSV which are used for both export and import is as
        follows:</para>
      <para>
        <table>
          <title>CSV column</title>
          <tgroup cols="4">
            <thead>
              <row>
                <entry>Index</entry>
                <entry> Key</entry>
                <entry> Type </entry>
                <entry> Description </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>1</entry>
                <entry>event</entry>
                <entry>identifier</entry>
                <entry>Identifier of event</entry>
              </row>
              <row>
                <entry>2</entry>
                <entry>status</entry>
                <entry>enum</entry>
                <entry>Status of event, can be ACTIVE | COMPLETED | VISITED | FUTURE_VISIT |
                  LATE_VISIT | SKIPPED</entry>
              </row>
              <row>
                <entry>3</entry>
                <entry>program</entry>
                <entry>identifier</entry>
                <entry>Identifier of program</entry>
              </row>
              <row>
                <entry>4</entry>
                <entry>programStage</entry>
                <entry>identifier</entry>
                <entry>Identifier of program stage</entry>
              </row>
              <row>
                <entry>5</entry>
                <entry>enrollment</entry>
                <entry>identifier</entry>
                <entry>Identifier of enrollment (program stage instance)</entry>
              </row>
              <row>
                <entry>6</entry>
                <entry>orgUnit</entry>
                <entry>identifier</entry>
                <entry>Identifier of organisation unit</entry>
              </row>
              <row>
                <entry>7</entry>
                <entry>eventDate</entry>
                <entry>date</entry>
                <entry>Event date</entry>
              </row>
              <row>
                <entry>8</entry>
                <entry>dueDate</entry>
                <entry>date</entry>
                <entry>Due Date</entry>
              </row>
              <row>
                <entry>9</entry>
                <entry>latitude</entry>
                <entry>double</entry>
                <entry>Latitude where event happened</entry>
              </row>
              <row>
                <entry>10</entry>
                <entry>longitude</entry>
                <entry>double</entry>
                <entry>Longitude where event happened</entry>
              </row>
              <row>
                <entry>11</entry>
                <entry>dataElement</entry>
                <entry>identifier</entry>
                <entry>Identifier of data element</entry>
              </row>
              <row>
                <entry>12</entry>
                <entry>value</entry>
                <entry>string</entry>
                <entry>Value / measure of event</entry>
              </row>
              <row>
                <entry>13</entry>
                <entry>storedBy</entry>
                <entry>string</entry>
                <entry>Event was stored by (defaults to current user)</entry>
              </row>
              <row>
                <entry>14</entry>
                <entry>providedElsewhere</entry>
                <entry>boolean</entry>
                <entry>Was this value collected somewhere else</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </para>
    </section>
    <section>
      <title>Querying and reading events</title>
      <para>This section explains how to read out the events that have been stored in the DHIS2 instance. For more advanced uses of the event
      data, please see the section on event analytics. The output format from the <emphasis role="italic">/api/events</emphasis> endpoint
      will match the format that is used to send events to it (which the analytics event api does not support). Both XML and JSON are
      supported, either through adding .json/.xml or by setting the appropriate <emphasis role="italic">Accept</emphasis> header.</para>
      <para>
      <table>
          <title>Events resource query parameters</title>
          <tgroup cols="4">
            <thead>
              <row>
                <entry> Key </entry>
                <entry> Type </entry>
                <entry> Required </entry>
                <entry> Description </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>program</entry>
                <entry>identifier</entry>
                <entry>true (if not programStage is provided)</entry>
                <entry>Identifier of program.</entry>
              </row>
              <row>
                <entry>programStage</entry>
                <entry>identifier</entry>
                <entry>false</entry>
                <entry>Identifier of program stage</entry>
              </row>
              <row>
                <entry>programStatus</entry>
                <entry>enum</entry>
                <entry>false</entry>
                <entry>Status of event in program, ca be ACTIVE | COMPLETED | CANCELLED</entry>
              </row>
              <row>
                <entry>followUp</entry>
                <entry>boolean</entry>
                <entry>false</entry>
                <entry>Whether event is considered for follow up in program, can be true | false or omitted.</entry>
              </row>
              <row>
                <entry>trackedEntityInstance</entry>
                <entry>identifier</entry>
                <entry>false</entry>
                <entry>Identifier of tracked entity instance</entry>
              </row>
              <row>
                <entry>orgUnit</entry>
                <entry>identifier</entry>
                <entry>true</entry>
                <entry>Identifier of organisation unit</entry>
              </row>
              <row>
                <entry>ouMode</entry>
                <entry>enum</entry>
                <entry>false</entry>
                <entry>Org unit selection mode, can be SELECTED | CHILDREN | DESCENDANTS </entry>
              </row>
              <row>
                <entry>startDate</entry>
                <entry>date</entry>
                <entry>false</entry>
                <entry>Only events newer than this date</entry>
              </row>
              <row>
                <entry>endDate</entry>
                <entry>date</entry>
                <entry>false</entry>
                <entry>Only events older than this date</entry>
              </row>
              <row>
                <entry>status</entry>
                <entry>enum</entry>
                <entry>false</entry>
                <entry>Status of event, can be ACTIVE | COMPLETED | VISITED | FUTURE_VISIT | LATE_VISIT | SKIPPED</entry>
              </row>
              <row>
                <entry>skipMeta</entry>
                <entry>boolean</entry>
                <entry>false</entry>
                <entry>Exclude the meta data part of response (improves performance)</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
    </para>
      <section>
        <title>Examples</title>
        <para>Query for all events with children of a certain organisation unit:
          <screen>api/events.json?orgUnit=YuQRtpLP10I&amp;ouMode=CHILDREN</screen></para>
        <para>Query for all events with all descendants of a certain organisation unit, implying all
          organisation units in the
          sub-hierarchy:<screen>api/events.json?orgUnit=O6uvpzGd5pu&amp;ouMode=DESCENDANTS</screen></para>
        <para>Query for all events with a certain program and organisation unit:
          <screen>api/events.json?orgUnit=DiszpKrYNg8&amp;program=eBAyeGv0exc</screen></para>
        <para>Query for all events with a certain program and organisation unit for a specific tracked
          entity instance:
          <screen>api/events.json?orgUnit=DiszpKrYNg8&amp;
program=eBAyeGv0exc&amp;trackedEntityInstance=gfVxE3ALA9m</screen></para>
        <para>Query for all events with a certain program and organisation unit older or equal to
          2014-02-03:
          <screen>api/events.json?orgUnit=DiszpKrYNg8&amp;program=eBAyeGv0exc&amp;endDate=2014-02-03</screen></para>
        <para>Query for all events with a certain program stage, organisation unit and tracked entity
          instance in the year 2014:
          <screen>api/events.json?orgUnit=DiszpKrYNg8
&amp;program=eBAyeGv0exc&amp;trackedEntityInstance=gfVxE3ALA9m
&amp;startDate=2014-01-01&amp;endDate=2014-12-31</screen></para>
      </section>
    </section>
  </section>
  <section>
    <title>Forms</title>
    <para>To retrieve information about a form (which corresponds to a data set and its sections)
      you can interact with the <emphasis role="italic">form</emphasis> resource. The form response
      is accessible as XML and JSON and will provide information about each section (group) in the
      form as well as each field in the sections, including label and identifiers. By supplying
      period and organisation unit identifiers the form response will be populated with data values. </para>
    <table frame="all">
      <title>Form query parameters</title>
      <tgroup cols="3">
        <colspec colnum="1" colname="c1" colwidth="1*"/>
        <colspec colnum="2" colname="newCol2" colwidth="1*"/>
        <colspec colnum="3" colname="c2" colwidth="5.9*"/>
        <thead>
          <row>
            <entry>Parameter</entry>
            <entry>Option</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>pe</entry>
            <entry>ISO period</entry>
            <entry>Period for which to populate form data values.</entry>
          </row>
          <row>
            <entry>ou</entry>
            <entry>UID</entry>
            <entry>Organisation unit for which to populate form data values.</entry>
          </row>
          <row>
            <entry>metaData</entry>
            <entry>false | true</entry>
            <entry>Whether to include meta-data about each data element of form sections.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>To retrieve the form for a data set you can do a GET request like this:</para>
    <screen>api/dataSets/&lt;dataset-id&gt;/form.json</screen>
    <para>To retrieve the form for the data set with identifier &quot;BfMAe6Itzgt&quot; in XML:</para>
    <screen>api/dataSets/BfMAe6Itzgt/form</screen>
    <para>To retrieve the form including meta-data in JSON:</para>
    <screen>api/dataSets/BfMAe6Itzgt/form.json?metaData=true</screen>
    <para>To retrieve the form filled with data values for a specific period and organisation unit
      in XML:</para>
    <screen>api/dataSets/BfMAe6Itzgt/form.xml?ou=DiszpKrYNg8&amp;pe=201401</screen>
    <para>When it comes to custom data entry forms, this resource also allows for creating such
      forms directly for a data set. This can be done through a POST or PUT request with content
      type text/html where the payload is the custom form markup such as:</para>
    <screen>curl -d @form.html &quot;localhost/api/dataSets/BfMAe6Itzgt/form&quot; -H &quot;Content-Type:text/html&quot; -u admin:district -X PUT -v</screen>
  </section>
  <section>
    <title>Complete data set registrations</title>
    <para>This section is about complete data set registrations for data sets. A registration marks
      as a data set as completely captured.</para>
    <section>
      <title>Sending complete data set registrations</title>
      <para>This section explains how to send complete data set registrations. To send registrations
        you can issue a POST request to the <emphasis role="italic"
          >completeDataSetRegistrations</emphasis> resource. Completing a data set is per data set,
        period and organisation unit. You can optionally specify attribute option combo. You must
        specify the date of when the data set was completed. The format is as
        follows:<screen>&lt;?xml version='1.0' encoding='UTF-8'?>
&lt;completeDataSetRegistrations xmlns="http://dhis2.org/schema/dxf/2.0">
    &lt;completeDataSetRegistration>
        &lt;dataSet id="pBOMPrpg1QX" />
        &lt;period id="201401" />
        &lt;attributeOptionCombo id="bRowv6yZOF2" />
        &lt;date>2014-01-01&lt;/date>
        &lt;organisationUnit id="DiszpKrYNg8" />
    &lt;/completeDataSetRegistration>
    &lt;completeDataSetRegistration>
        &lt;dataSet id="pBOMPrpg1QX" />
        &lt;period id="201401" />
        &lt;attributeOptionCombo id="bRowv6yZOF2" />
        &lt;date>2014-01-01&lt;/date>
        &lt;organisationUnit id="g8upMTyEZGZ" />
    &lt;/completeDataSetRegistration>
    &lt;completeDataSetRegistration>
        &lt;dataSet id="pBOMPrpg1QX" />
        &lt;period id="201401" />
        &lt;attributeOptionCombo id="bRowv6yZOF2" />
        &lt;date>2010-01-01&lt;/date>
        &lt;organisationUnit id="jNb63DIHuwU" />
    &lt;/completeDataSetRegistration>
&lt;/completeDataSetRegistrations></screen></para>
      <para>To test the resource you can issue a request using
        curl:<screen>curl -d @completereg.xml "https://apps.dhis2.org/demo/api/completeDataSetRegistrations" -H "Content-Type:application/xml" -u admin:district -v</screen></para>
    </section>
  <section>
    <title>Reading complete data set registrations</title>
    <para>This section explains how to retrieve data set completeness registrations. We will be
        using the <emphasis role="italic">completeDataSetRegistrations</emphasis> resource. The
        query parameters to use are these:</para>
    <table frame="all">
      <title>Data value set query parameters</title>
      <tgroup cols="2">
        <colspec colnum="1" colname="c1" colwidth="95pt"/>
        <colspec colnum="2" colname="c2" colwidth="425pt"/>
        <thead>
          <row>
            <entry>Parameter</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>dataSet</entry>
            <entry>Data set identifier, can be specified multiple times</entry>
          </row>
          <row>
            <entry>period</entry>
            <entry>PeriodType</entry>
          </row>
          <row>
            <entry>startDate</entry>
            <entry>Start date for the time span of the values to export</entry>
          </row>
          <row>
            <entry>endDate</entry>
            <entry>End date for the time span of the values to export</entry>
          </row>
          <row>
            <entry>orgUnit</entry>
            <entry>Organisation unit identifier, can be specified multiple times</entry>
          </row>
          <row>
            <entry>children</entry>
            <entry>Whether to include the children in the hierarchy of the organisation
              units</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>The dataSet and orgUnit parameters can be repeated in order to include multiple data sets
        and organisation units. An example request looks like
        this:<screen>curl &quot;https://apps.dhis2.org/demo/api/completeDataSetRegistrations?dataSet=pBOMPrpg1QX&amp;dataSet=pBOMPrpg1QX&amp;startDate=2014-01-01&amp;endDate=2014-01-31
&amp;orgUnit=YuQRtpLP10I&amp;orgUnit=vWbkYPRmKyS&amp;children=true&quot; -H &quot;Accept:application/xml&quot; -u admin:district -v</screen></para>
    <para>You can get the response in <emphasis role="italic">xml</emphasis> and <emphasis role="italic">json</emphasis> format. You can indicate which response format you prefer
      through the <emphasis role="italic">Accept</emphasis> HTTP header like in the example above.
      For xml you use <emphasis role="italic">application/xml</emphasis>; for json you use <emphasis role="italic">application/json</emphasis>.</para>
  </section>
  </section>
  <section>
    <title>Completing and un-completing data sets</title>
    <para>This section explains how you can register and un-register a data set as complete. To
      complete or un-complete a data set you will interact with the following resource:</para>
    <screen>/api/completeDataSetRegistrations</screen>
    <para>This resource supports the methods <emphasis role="italic">POST</emphasis> for
      registration and <emphasis role="italic">DELETE</emphasis> for un-registration. The following
      query parameters are supported:</para>
    <table frame="all">
      <title>Complete data set registrations query parameters</title>
      <tgroup cols="3">
        <colspec colnum="1" colname="c1" colwidth="1*"/>
        <colspec colnum="2" colname="c2" colwidth="1.16*"/>
        <colspec colnum="3" colname="c3" colwidth="3.96*"/>
        <thead>
          <row>
            <entry>Query parameter</entry>
            <entry>Required</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>ds</entry>
            <entry>Yes</entry>
            <entry>Data set identifier</entry>
          </row>
          <row>
            <entry>pe</entry>
            <entry>Yes</entry>
            <entry>Period identifier</entry>
          </row>
          <row>
            <entry>ou</entry>
            <entry>Yes</entry>
            <entry>Organisation unit identifier</entry>
          </row>
          <row>
            <entry>cc</entry>
            <entry>No (must combine with cp)</entry>
            <entry>Attribute combo identifier (for locking check)</entry>
          </row>
          <row>
            <entry>cp</entry>
            <entry>No (must combine with cp)</entry>
            <entry>Attribute option identifiers, separated with ; for multiple values (for locking check)</entry>
          </row>
          <row>
            <entry>multiOu</entry>
            <entry>No (default false)</entry>
            <entry>Whether registration applies to sub units</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  <section>
    <title>Data approval</title>
    <para>This section explains how to approve, unapprove and check approval status using the
        <emphasis role="italic">dataApprovals</emphasis> resource. Approval is done per data set,
      period, organisation unit and attribute option combo. </para>
    <para>To get approval information for a data set you can issue a GET request similar to this:</para>
    <screen>api/dataApprovals?ds=aLpVgfXiz0f&amp;pe=2013&amp;ou=DiszpKrYNg8</screen>
    <table frame="all">
      <title>Data approval query parameters</title>
      <tgroup cols="3">
        <colspec colnum="1" colname="c1" colwidth="1*"/>
        <colspec colnum="2" colname="c2" colwidth="1.15*"/>
        <colspec colnum="3" colname="c3" colwidth="3.92*"/>
        <thead>
          <row>
            <entry>Query parameter</entry>
            <entry>Required</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>ds</entry>
            <entry>Yes</entry>
            <entry>Data set identifier</entry>
          </row>
          <row>
            <entry>pe</entry>
            <entry>Yes</entry>
            <entry>Period identifier</entry>
          </row>
          <row>
            <entry>ou</entry>
            <entry>Yes</entry>
            <entry>Organisation unit identifier</entry>
          </row>
          <row>
            <entry>cog</entry>
            <entry>No</entry>
            <entry>Attribute category option group identifier</entry>
          </row>
          <row>
            <entry>cp</entry>
            <entry>No</entry>
            <entry>Attribute category option identifier(s), repeat the parameter for multiple values</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>This will give you a response something like this:</para>
    <screen>{
  &quot;mayApprove&quot;: false,
  &quot;mayUnapprove&quot;: false,
  &quot;mayAccept&quot;:false,
  &quot;mayUnaccept&quot;:false,
  &quot;state&quot;:&quot;UNAPPROVED_ELSEWHERE&quot;
}</screen>
    <para>The returned parameters are:</para>
    <table frame="all">
      <title>Data approval query parameters</title>
      <tgroup cols="2">
        <colspec colnum="1" colname="c1" colwidth="1*"/>
        <colspec colnum="2" colname="c2" colwidth="3*"/>
        <thead>
          <row>
            <entry>Return Parameter</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>mayApprove</entry>
            <entry>Whether the current user may approve this data selection.</entry>
          </row>
          <row>
            <entry>mayUnapprove</entry>
            <entry>Whether the current user may unapprove this data selection.</entry>
          </row>
          <row>
            <entry>mayAccept</entry>
            <entry>Whether the current user may accept this data selection.</entry>
          </row>
          <row>
            <entry>mayUnaccept</entry>
            <entry>Whether the current user may unaccept this data selection.</entry>
          </row>
          <row>
            <entry>state</entry>
            <entry>One of the data approval states from the table below.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table frame="all">
      <title>Data approval states</title>
      <tgroup cols="2">
        <colspec colnum="1" colname="c1" colwidth="1.5*"/>
        <colspec colnum="2" colname="c2" colwidth="3*"/>
        <thead>
          <row>
            <entry>State</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>UNAPPROVABLE</entry>
            <entry>Data approval does not apply to this selection. (Data is neither &quot;approved&quot; nor &quot;unapproved&quot;.)</entry>
          </row>
          <row>
            <entry>UNAPPROVED_WAITING</entry>
            <entry>Data could be approved for this selection, but is waiting for some lower-level approval before it is ready to be approved.</entry>
          </row>
          <row>
            <entry>UNAPPROVED_ELSEWHERE</entry>
            <entry>Data is unapproved, and is waiting for approval somewhere else (not approvable here.)</entry>
          </row>
          <row>
            <entry>UNAPPROVED_READY</entry>
            <entry>Data is unapproved, and is ready to be approved for this selection.</entry>
          </row>
          <row>
            <entry>APPROVED_HERE</entry>
            <entry>Data is approved, and was approved here (so could be unapproved here.)</entry>
          </row>
          <row>
            <entry>APPROVED_ELSEWHERE</entry>
            <entry>Data is approved, but was not approved here (so cannot be unapproved here.) This covers the following cases: <itemizedlist>
                <listitem>
                  <para>Data is approved at a higher level.</para>
                </listitem>
                <listitem>
                  <para>Data is approved for wider scope of category options.</para>
                </listitem>
                <listitem>
                  <para>Data is approved for all sub-periods in selected period.</para>
                </listitem>
              </itemizedlist> In the first two cases, there is a single data approval object that covers the selection. In the third case there is not. </entry>
          </row>
          <row>
            <entry>ACCEPTED_HERE</entry>
            <entry>Data is approved and accepted here (so could be unapproved here.)</entry>
          </row>
          <row>
            <entry>ACCEPTED_ELSEWHERE</entry>
            <entry>Data is approved and accepted, but elsewhere.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>Note that when querying for the status of data approval, you may specify any combination of the query parameters.
    The combination you specify does not need to describe the place where data is to be approved at one of the approval levels.
    For example:</para>
    <itemizedlist>
      <listitem>
        <para>The organisation unit might not be at an approval level. The approval status is determined by
          whether data is approved at an approval level for an ancestor of the organisation unit.</para>
      </listitem>
      <listitem>
        <para>You may specify individual attribute category options. The approval status is determined by whether
          data is approved for an attribute category option combination that includes one or more of these options.</para>
      </listitem>
      <listitem>
        <para>You may specify a time period that is longer than the period for the data set at which the data is entered and approvede.
          The approval status is determined by whether the data is approved for all the data set periods within the period you specify.</para>
      </listitem>
    </itemizedlist>
    <para>To approve data you can issue a <emphasis role="italic">POST</emphasis> request to the
      dataApprovals resource. To un-approve data you can issue a <emphasis role="italic">DELETE</emphasis> request to the dataApprovals resource.</para>
    <para>To accept data you can issue a <emphasis role="italic">POST</emphasis> request to the
      dataApprovals/acceptances resource. To un-accept data you can issue a <emphasis role="italic">DELETE</emphasis> request to the dataApprovals/acceptances resource.</para>
    <para>These requests contain the following parameters:</para>
    <table frame="all">
      <title>Data approval action parameters</title>
      <tgroup cols="3">
        <colspec colnum="1" colname="c1" colwidth="1*"/>
        <colspec colnum="2" colname="c2" colwidth="1.15*"/>
        <colspec colnum="3" colname="c3" colwidth="3.92*"/>
        <thead>
          <row>
            <entry>Action parameter</entry>
            <entry>Required</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>ds</entry>
            <entry>Yes</entry>
            <entry>Data set identifier</entry>
          </row>
          <row>
            <entry>pe</entry>
            <entry>Yes</entry>
            <entry>Period identifier</entry>
          </row>
          <row>
            <entry>ou</entry>
            <entry>Yes</entry>
            <entry>Organisation unit identifier</entry>
          </row>
          <row>
            <entry>cog</entry>
            <entry>No</entry>
            <entry>Attribute category option group identifier. Required if approving for an approval level that contains a category option group set, otherwise must not be present.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>Note that, unlike querying the data approval status, you must specify parameters that correspond to a selection of data that could be approved.
          In particular, all of the following must be true:</para>
    <itemizedlist>
      <listitem>
        <para>The organisation unit&apos;s level must be specified by an approval level.</para>
      </listitem>
      <listitem>
        <para>The category option group (if specified) must be a member of an approval level&apos;s category option group set (if specified)
        for an approval level with the same organisation unit level.</para>
      </listitem>
      <listitem>
        <para>The time period specified must match the period type of the data set.</para>
      </listitem>
      <listitem>
        <para>The data set must specify that data can be approved for this data set.</para>
      </listitem>
    </itemizedlist>
  </section>
  <section>
    <title>Messages</title>
    <para>DHIS 2 features a mechanism for sending messages for purposes such as user feedback,
      notifications and general information to users. Messages are delivered to the DHIS 2 message
      inbox but can also be sent to the user's email addresses and mobile phones as SMS. In this
      example we will see how we can utilize the Web API to send, read and manage messages. We will
      pretend to be the <emphasis role="italic">DHIS Administrator</emphasis> user and send a
      message to the <emphasis role="italic">Mobile</emphasis> user. We will then pretend to be the
      mobile user and read our new message. Following this we will manage the admin user inbox by
      marking and removing messages.</para>
    <section>
      <title>Writing and reading messages</title>
      <para>The resource we need to interact with when sending and reading messages is the <emphasis role="italic">messageConversations</emphasis> resource. We start by visiting the Web API
      entry point at <ulink url="http://apps.dhis2.org/demo/api"/> where we find and follow the link
      to the <emphasis role="italic">messageConversations</emphasis> resource at <ulink url="http://apps.dhis2.org/demo/api/messageConversations"/>. The description tells us that
      we can use a POST request to create a new message using the following XML format for sending
      to multiple users:</para>
      <para><screen>&lt;message xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot;&gt;
  &lt;subject&gt;This is the subject&lt;/subject&gt;
  &lt;text&gt;This is the text&lt;/text&gt;
  &lt;users&gt;
    &lt;user id=&quot;user1ID&quot; /&gt;
    &lt;user id=&quot;user2ID&quot; /&gt;
    &lt;user id=&quot;user3ID&quot; /&gt;
  &lt;/users&gt;
&lt;/message&gt;</screen></para>
      <para>For sending to all users contained in one or more user groups, we can use:</para>
      <para><screen>&lt;message xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot;&gt;
  &lt;subject&gt;This is the subject&lt;/subject&gt;
  &lt;text&gt;This is the text&lt;/text&gt;
  &lt;userGroups&gt;
    &lt;userGroup id=&quot;userGroup1ID&quot; /&gt;
    &lt;userGroup id=&quot;userGroup2ID&quot; /&gt;
    &lt;userGroup id=&quot;userGroup3ID&quot; /&gt;
  &lt;/userGroups&gt;
&lt;/message&gt;</screen></para>
      <para>For sending to all users connected to one or more organisation units, we can use:</para>
      <para><screen>&lt;message xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot;&gt;
  &lt;subject&gt;This is the subject&lt;/subject&gt;
  &lt;text&gt;This is the text&lt;/text&gt;
  &lt;organisationUnits&gt;
    &lt;organisationUnit id=&quot;ou1ID&quot; /&gt;
    &lt;organisationUnit id=&quot;ou2ID&quot; /&gt;
    &lt;organisationUnit id=&quot;ou3ID&quot; /&gt;
  &lt;/organisationUnits&gt;
&lt;/message&gt;</screen></para>
      <para>Since we want to send a message to our friend the mobile user we need to look up her
        identifier. We do so by going to the Web API entry point and follow the link to the
          <emphasis role="italic">users</emphasis> resource at <ulink
          url="http://apps.dhis2.org/demo/api/users"/>. We continue by following link to the mobile
        user at <ulink url="http://apps.dhis2.org/demo/api/users/PhzytPW3g2J"/> where we learn that
        her identifier is <emphasis role="italic">PhzytPW3g2J</emphasis>. We are now ready to put
        our XML message together to form a message where we want to ask the mobile user whether she
        has reported data for January 2014:</para>
      <screen>&lt;message xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot;&gt;
  &lt;subject&gt;Mortality data reporting&lt;/subject&gt;
  &lt;text&gt;Have you reported data for the Mortality data set for January 2014?&lt;/text&gt;
  &lt;users&gt;
    &lt;user id=&quot;PhzytPW3g2J&quot; /&gt;
  &lt;/users&gt;
&lt;/message&gt;</screen>
      <para>To test this we save the XML content into a file called <emphasis role="italic">message.xml</emphasis>. We use cURL to dispatch the message the the DHIS 2 demo instance where we indicate that the content-type is XML and authenticate as the <emphasis role="italic">admin</emphasis> user:</para>
      <screen>curl -d @message.xml &quot;https://apps.dhis2.org/demo/api/messageConversations&quot; -H &quot;Content-Type:application/xml&quot; -u admin:district -X POST -v</screen>
      <para>A corresponding payload in JSON and POST command look like this:</para>
      <screen>{
  &quot;subject&quot;: &quot;Hey&quot;,
  &quot;text&quot;: &quot;How are you?&quot;,
  &quot;users&quot;: [
    {
      &quot;id&quot;: &quot;OYLGMiazHtW&quot;
    },
    {
      &quot;id&quot;: &quot;N3PZBUlN8vq&quot;
    }
  ],
  &quot;userGroups&quot;: [
    {
      &quot;id&quot;: &quot;ZoHNWQajIoe&quot;
    }
  ],
  &quot;organisationUnits&quot;: [
    {
      &quot;id&quot;: &quot;DiszpKrYNg8&quot;
    }
  ]
}
      </screen>
      <screen>curl -d @message.json &quot;https://apps.dhis2.org/demo/api/messageConversations&quot; -H &quot;Content-Type:application/json&quot; -u admin:district -X POST -v</screen>
      <para>If all is well we receive a <emphasis role="italic">201 Created</emphasis> HTTP status code. Also note that we receive a <emphasis role="italic">Location </emphasis>HTTP header which value  informs us of the URL of the newly  created message conversation resource - this can be used by a consumer to perform further action.</para>
      <para>We will now pretend to be the mobile user and read te message which was just sent by
      dispatching a GET request to the <emphasis role="italic">messageConversations</emphasis>
      resource. We supply an <emphasis role="italic">Accept</emphasis> header with <emphasis
        role="italic">application/xml</emphasis> as the value to indicate that we are interested in
      the XML resource representation and we authenticate as the <emphasis role="italic"
        >mobile</emphasis> user:</para>
      <screen>curl &quot;https://apps.dhis2.org/demo/api/messageConversations&quot; -H &quot;Accept:application/xml&quot; -u mobile:district -X GET -v</screen>
      <para>In response we get the following XML:</para>
      <screen>&lt;messageConversations xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot;
  link=&quot;https://apps.dhis2.org/demo/api/messageConversations&quot;&gt;
  &lt;messageConversation name=&quot;Mortality data reporting&quot; id=&quot;ZjHHSjyyeJ2&quot;
    link=&quot;https://apps.dhis2.org/demo/api/messageConversations/ZjHHSjyyeJ2&quot;/&gt;
  &lt;messageConversation name=&quot;DHIS version 2.7 is deployed&quot; id=&quot;GDBqVfkmnp2&quot;
    link=&quot;https://apps.dhis2.org/demo/api/messageConversations/GDBqVfkmnp2&quot;/&gt;
&lt;/messageConversations&gt;</screen>
      <para>From the response we are able to read the identifier of the newly sent message which is <emphasis role="italic">ZjHHSjyyeJ2</emphasis>. Note that the link to the specific resource is embedded and can be followed in order to read the full message. From the description at <ulink url="http://apps.dhis2.org/demo/api/messageConversations"/> we learned that we can reply directly to an existing message conversation once we know the URL by including the message text as the  request payload (body). We are now able to construct a URL for sending our reply:</para>
      <screen>curl -d &quot;Yes the Mortality data set has been reported&quot; &quot;https://apps.dhis2.org/demo/api/messageConversations/ZjHHSjyyeJ2&quot; -H &quot;Content-Type:text/plain&quot; -u mobile:district -X POST -v</screen>
      <para>If all went according to plan you will receive a <emphasis role="italic">200 OK</emphasis> status code.</para>
    </section>
    <section>
      <title>Managing messages</title>
      <para><emphasis>Note: the Web-API calls discussed in this section were introduced in DHIS
          2.17</emphasis></para>
      <para>As users receive and send messages, conversations will start to pile up in their
        inboxes, eventually becoming laborious to track. We will now have a look at managing a users
        message inbox by removing and marking conversations through the Web-API. We will do so by
        performing some maintenance in the inbox of the <emphasis role="italic">DHIS
          Administrator</emphasis> user.</para>
      <para>First, let's have a look at removing a few messages from the inbox. Be sure to note that
        all removal operations described here only remove the relation between a user and a message
        conversation. In practical terms this means that we are not deleting the messages themselves
        (or any content for that matter) but are simply removing the message thread from the user
        such that it is not longer listed in the <emphasis role="italic"
          >/api/messageConversations</emphasis> resource.</para>
      <para>To remove a message conversation from a users inbox we need to issue a <emphasis
          role="italic">DELETE</emphasis> request to the resource identified by the id of the
        message conversation and the participating user. For example, to remove the user with id
          <emphasis role="italic">xE7jOejl9FI</emphasis> from the conversation with id <emphasis
          role="italic"
        >jMe43trzrdi</emphasis>:<screen>curl https://apps.dhis2.org/demo/api/messageConversations/jMe43</screen></para>
      <para>If the request was successful the server will reply with a <emphasis role="italic">200
          OK</emphasis>. The response body contains an XML or JSON object (according to the accept
        header of the request) containing the id of the removed
        user.<screen>{ "removed" : ["xE7jOejl9FI"] }</screen></para>
      <para>On failure the returned object will contain a message payload which describes the
        error.<screen>{ "message" : "No user with uid: dMV6G0tPAEa" }</screen></para>
      <para>The observant reader will already have noticed that the object returned on success in
        our example is actually a list of ids (containing a single entry). This is due to the
        endpoint also supporting batch removals. The request is made to the same <emphasis
          role="italic">messageConversations</emphasis> resource but follows slightly different
        semantics. For batch operations the conversation ids are given as query string parameters.
        The following example removes two separate message conversations for the current
        user:<screen>curl "https://apps.dhis2.org/demo/api/messageConversations?mc=WzMRrCosqc0&amp;mc=lxCjiigqrJm" -X DELETE -u admin:district -v</screen></para>
      <para>If you have sufficient permissions, conversations can be removed on behalf of another
        user by giving an optional user id
        parameter.<screen>curl "https://apps.dhis2.org/demo/api/messageConversations?mc=WzMRrCosqc0&amp;mc=lxCjiigqrJm&amp;user=PhzytPW3g2J" -X DELETE -u admin:district -v</screen></para>
      <para>As indicated, batch removals will return the same message format as for single
        operations. The list of removed objects will reflect successful removals performed.
        Partially errorenous requests (i.e. non-existing id) will therefore not cancel the entire
        batch operation.</para>
      <para>Messages carry a boolean <emphasis role="italic">read</emphasis> property. This allows
        tracking whether a user has seen (opened) a message or not. In a typical application
        scenario (e.g. the DHIS 2 web portal) a message will be marked read as soon as the user
        opens it for the first time. However, users might want to manage the read or unread status
        of their messages in order to keep track of certains conversations.</para>
      <para>Marking messages read or unread follows similar semantics as batch removals, and also
        supports batch operations. To mark messages as read we issue a <emphasis role="italic"
          >POST</emphasis> to the <emphasis role="italic">messageConversations/read</emphasis>
        resource with a request body containing one or more message ids. To mark messages as unread
        we issue an identical request to the <emphasis role="italic"
          >messageConversations/unread</emphasis> resource. As is the case for removals, an optional
          <emphasis role="italic">user</emphasis> request parameter can be given.</para>
      <para>Let's mark a couple of messages as read by the current
        user:<screen>curl "https://apps.dhis2.org/dev/api/messageConversations/read" -d '["ZrKML5WiyFm","Gc03smoTm6q"]'  -X POST -H "Content-Type: application/json" -u admin:district -v</screen></para>
      <para>The response is a <emphasis role="italic">200 OK</emphasis> with the following JSON
        body:<screen>{ "markedRead" : [ "ZrKML5WiyFm", "Gc03smoTm6q" ] }</screen></para>
    </section>
  </section>
  <section>
    <title>Interpretations</title>
    <para>For certain analysis-related resources in DHIS, like charts, maps and report tables, one
      can write and share a data interpretation. An interpretation is simply a link to the the
      relevant resource together with a text expressing some insight about the data. Interpretations
      access control follows the access given for the interpreted object.</para>
    <section>
      <title>Reading interpretations</title>
      <para>To read interpretations we will interact with the <emphasis role="italic">api/interpretations</emphasis> resource. The output in JSON response format could look
        like below (use e.g. api/interpretations.json):</para>
      <screen>{
    &quot;interpretations&quot;: [{
        &quot;created&quot;: &quot;2013-10-07T11:37:19.273+0000&quot;,
        &quot;lastUpdated&quot;: &quot;2013-10-07T12:08:58.028+0000&quot;,
        &quot;type&quot;: &quot;map&quot;,
        &quot;href&quot;: &quot;https://apps.dhis2.org/demo/api/interpretations/d3BukolfFZI&quot;,
        &quot;id&quot;: &quot;d3BukolfFZI&quot;
    }, {
        &quot;created&quot;: &quot;2013-05-30T10:24:06.181+0000&quot;,
        &quot;lastUpdated&quot;: &quot;2013-05-30T10:25:08.066+0000&quot;,
        &quot;type&quot;: &quot;reportTable&quot;,
        &quot;href&quot;: &quot;https://apps.dhis2.org/demo/api/interpretations/XSHiFlHAhhh&quot;,
        &quot;id&quot;: &quot;XSHiFlHAhhh&quot;
    }, {
        &quot;created&quot;: &quot;2013-05-29T14:47:13.081+0000&quot;,
        &quot;lastUpdated&quot;: &quot;2013-05-29T14:47:13.081+0000&quot;,
        &quot;type&quot;: &quot;chart&quot;,
        &quot;href&quot;: &quot;https://apps.dhis2.org/demo/api/interpretations/kr4AnZmYL43&quot;,
        &quot;id&quot;: &quot;kr4AnZmYL43&quot;
    }]
}</screen>
      <para>An interpretation contains properties for identifier, date of creation and date of last
        modification. The type property refers to the kind of object is being interpreted, and is
        useful to show an appropriate visual clue in a client. Valid options are &quot;chart&quot;, &quot;map&quot;,
        &quot;reportTable&quot; and &quot;dataSetReport&quot;. By following the link given in the &quot;href&quot; property one
        can get more information about a specific interpretation. In the case of the map
        interpretation, the response will look like this:</para>
      <screen>{
    &quot;created&quot;: &quot;2013-10-07T11:37:19.273+0000&quot;,
    &quot;lastUpdated&quot;: &quot;2014-10-07T12:08:58.028+0000&quot;,
    &quot;map&quot;: {
        &quot;name&quot;: &quot;ANC: ANC 2 Coverage&quot;,
        &quot;created&quot;: &quot;2014-11-13T12:01:21.918+0000&quot;,
        &quot;lastUpdated&quot;: &quot;2014-11-13T12:01:21.918+0000&quot;,
        &quot;href&quot;: &quot;https://apps.dhis2.org/demo/api/maps/bhmHJ4ZCdCd&quot;,
        &quot;id&quot;: &quot;bhmHJ4ZCdCd&quot;
    },
    &quot;text&quot;: &quot;We can see that the ANC 2 coverage of Kasonko and Lei districts are under 40 %. What could be the cause for this?&quot;,
    &quot;comments&quot;: [{
        &quot;created&quot;: &quot;2014-10-07T12:08:58.026+0000&quot;,
        &quot;lastUpdated&quot;: &quot;2014-10-07T12:08:58.026+0000&quot;,
        &quot;text&quot;: &quot;Due to the rural environment, getting women to the facilities is a challenge. Outreach campaigns might be helpful.&quot;,
        &quot;href&quot;: &quot;https://apps.dhis2.org/demo/api/null/iB4Etq8yTE6&quot;,
        &quot;id&quot;: &quot;iB4Etq8yTE6&quot;
    }],
    &quot;type&quot;: &quot;map&quot;,
    &quot;href&quot;: &quot;https://apps.dhis2.org/demo/api/interpretations/d3BukolfFZI&quot;,
    &quot;id&quot;: &quot;d3BukolfFZI&quot;
}</screen>
      <para>The map interpretation contains identifier and type information in the &quot;id&quot; and &quot;type&quot;
        properties. The interpretation text is available in the &quot;text&quot; property and references to
        any comments in the &quot;comments&quot; list. It also contains information about the interpreted
        object, in this case the &quot;map&quot; property. Note that you can follow the link to the actual map
        through the &quot;href&quot; property. For all analytical objects you can append <emphasis role="italic">/data</emphasis> to the URL to retrieve the data associated with the
        resource, as apposed to the meta-data. As an example, by following the map link and
        appending /data one can retrieve a PNG (image) representation of the thematic map through
        the following URL:</para>
      <screen>https://apps.dhis2.org/demo/api/maps/bhmHJ4ZCdCd/data</screen>
    </section>
    <section>
      <title>Writing interpretations</title>
      <para>We will start by writing an interpretation for the chart with identifier <emphasis role="italic">EbRN2VIbPdV</emphasis>. To write chart interpretations we will interact with the <ulink url="http://apps.dhis2.org/demo/api/interpretations/chart/{chartId}"/> resource. The interpretation will be the request body. Based on this we can put together the following request using cURL:</para>
      <screen>curl -d &quot;This chart shows a significant ANC 1-3 dropout&quot; &quot;https://apps.dhis2.org/demo/api/interpretations/chart/EbRN2VIbPdV&quot; \
-H &quot;Content-Type:text/plain&quot; -u admin:district -v</screen>
      <para>Second we will write a comment on the interpretation we just wrote. By looking at the interpretation response you will see that a <emphasis role="italic">Location</emphasis> header is returned. This header tells us the URL of the newly created interpretation and from that we can read its identifier. This identifier is randomly generated so you will have to replace the one in the command below with your own. To write a comment we can interact with the <ulink url="http://apps.dhis2.org/demo/api/interpretations/{interpretationId}/comment"/> like this:</para>
      <screen>curl -d &quot;An intervention is needed&quot; &quot;https://apps.dhis2.org/demo/api/interpretations/j8sjHLkK8uY/comment&quot; 
-H &quot;Content-Type:text/plain&quot; -u admin:district -v</screen>
      <para>You can also write interpretations for report tables in a similar way by interacting with the <ulink url="http://app.dhis2.org/demo/api/interpretations/reportTable/{reportTableId}"/>. For report tables you can also provide an optional <emphasis role="italic">ou</emphasis> query parameter to supply an organisation unit identifier in the case where the report table has an organisation unit report parameter:</para>
      <screen>curl -d &quot;This table reveals poor data quality&quot; &quot;https://apps.dhis2.org/demo/api/interpretations/reportTable/xIWpSo5jjT1?ou=O6uvpzGd5pu&quot; 
-H &quot;Content-Type:text/plain&quot; -u admin:district -v</screen>
    </section>
    <section>
      <title>Creating, updating and removing interpretation comments</title>
      <para>
        Creating comments to existing interpretations:
        <screen>POST &quot;plain-text comment&quot; to /api/interpretations/ID/comments</screen>
      </para>
      <para>
        Updating comments in existing interpretations:
        <screen>PUT &quot;plain-text comment&quot; to /api/interpretations/ID/comments/ID</screen>
      </para>
      <para>
        Removing comments in existing interpretations:
        <screen>DELETE /api/interpretations/ID/comments/ID</screen>
      </para>
    </section>
  </section>
  <section>
    <title>Viewing analytical resource representations</title>
    <para>DHIS 2 has several resources for data analysis. These resources include <emphasis role="italic">charts</emphasis>, <emphasis role="italic">maps</emphasis>, <emphasis role="italic">reportTables</emphasis>, <emphasis role="italic">reports</emphasis> and
        <emphasis role="italic">documents</emphasis>. By visiting these resources you will retrieve
      information about the resource. For instance, by navigating to <emphasis role="italic">api/charts/R0DVGvXDUNP</emphasis> the response will contain the name, last date of
      modication and so on for the chart. To retrieve the analytical representation, for instance a
      PNG representation of the chart, you can append <emphasis role="italic">/data</emphasis> to
      all these resources. For instance, by visiting <emphasis role="italic">api/charts/R0DVGvXDUNP/data</emphasis> the system will return a PNG image of the
      chart.</para>
    <table frame="all">
      <title>Analytical resources</title>
      <tgroup cols="4">
        <colspec colnum="1" colname="c1" colwidth="1.01*"/>
        <colspec colnum="2" colname="c2" colwidth="1*"/>
        <colspec colnum="3" colname="c3" colwidth="1.93*"/>
        <colspec colnum="4" colname="newCol4" colwidth="1.91*"/>
        <thead>
          <row>
            <entry>Resource</entry>
            <entry>Description</entry>
            <entry>Data URL</entry>
            <entry>Resource representations</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>charts</entry>
            <entry>Charts</entry>
            <entry>api/charts/&lt;identifier&gt;/data</entry>
            <entry>png</entry>
          </row>
          <row>
            <entry>eventCharts</entry>
            <entry>Event charts</entry>
            <entry>api/eventCharts/&lt;identifier&gt;/data</entry>
            <entry>png</entry>
          </row>
          <row>
            <entry>maps</entry>
            <entry>Maps</entry>
            <entry>api/maps/&lt;identifier&gt;/data</entry>
            <entry>png</entry>
          </row>
          <row>
            <entry>reportTables</entry>
            <entry>Pivot tables</entry>
            <entry>api/reportTables/&lt;identifier&gt;/data</entry>
            <entry>json | jsonp | html | xml | pdf | xls | csv</entry>
          </row>
          <row>
            <entry>reports</entry>
            <entry>Standard reports</entry>
            <entry>api/reports/&lt;identifier&gt;/data</entry>
            <entry>pdf | xls | html</entry>
          </row>
          <row>
            <entry>documents</entry>
            <entry>Resources</entry>
            <entry>api/documents/&lt;identifier&gt;/data</entry>
            <entry>&lt;follows document&gt;</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>The data content of the analytical representations can be modified by providing a
        <emphasis role="italic">date</emphasis> query parameter. This requires that the analytical
      resource is set up for relative periods for the period dimension.</para>
    <table frame="all">
      <title>Data query parameters</title>
      <tgroup cols="3">
        <colspec colnum="1" colname="c1" colwidth="1*"/>
        <colspec colnum="2" colname="c2" colwidth="1.31*"/>
        <colspec colnum="3" colname="c3" colwidth="2.34*"/>
        <thead>
          <row>
            <entry>Query parameter</entry>
            <entry>Value</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>date</entry>
            <entry>Date in yyyy-MM-dd format</entry>
            <entry>Basis for relative periods in report (requires relative periods)</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table frame="all">
      <title>Query parameters for png / image types (charts, maps)</title>
      <tgroup cols="2">
        <colspec colnum="1" colname="c1" colwidth="1*"/>
        <colspec colnum="2" colname="c2" colwidth="3.65*"/>
        <thead>
          <row>
            <entry>Query parameter</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>width</entry>
            <entry>Width of image in pixels</entry>
          </row>
          <row>
            <entry>height</entry>
            <entry>Height of image in pixels</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>Some examples of valid URLs for retrieving various analytical representations are listed
      below.</para>
    <screen>api/charts/R0DVGvXDUNP/data
api/charts/R0DVGvXDUNP/data?date=2013-06-01

api/reportTables/jIISuEWxmoI/data.html
api/reportTables/jIISuEWxmoI/data.html?date=2013-01-01
api/reportTables/FPmvWs7bn2P/data.xls
api/reportTables/FPmvWs7bn2P/data.pdf

api/maps/DHE98Gsynpr/data
api/maps/DHE98Gsynpr/data?date=2013-07-01

api/reports/OeJsA6K1Otx/data.pdf
api/reports/OeJsA6K1Otx/data.pdf?date=2014-01-01</screen>
  </section>
  <section>
    <title>Plugins</title>
    <para>DHIS 2 comes with plugins which enables you to embed live data directly in your web portal or web site. Currently, plugins exist for charts, maps and pivot tables.</para>
    <section>
      <title>Embedding pivot tables with the Pivot Table plug-in</title>
      <para>In this example we will see how we can embed good-looking, light-weight html pivot tables with data served from a DHIS back-end into a Web page. To accomplish this we will use the Pivot table plug-in. The plug-in is written in Javascript and depends on the Ext JS library only. A complete working example can be found at <ulink url="http://apps.dhis2.org/portal/table.html"/>. Open the page in a web browser and view the source to see how it is set up.</para>
      <para>We start by having a look at what the complete html file could look like. This setup puts two
        tables in our web page. The first one is referring to an existing table. The second is
        configured inline.
        <screen>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://dhis2-cdn.org/v215/ext/resources/css/ext-plugin-gray.css&quot; /&gt;
  &lt;script src=&quot;https://dhis2-cdn.org/v215/ext/ext-all.js&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;https://dhis2-cdn.org/v215/plugin/table.js&quot;&gt;&lt;/script&gt;

  &lt;script&gt;
    var base = &quot;https://apps.dhis2.org/demo&quot;;

    // Login - if OK, call the setLinks function
    
    Ext.onReady( function() {
      Ext.Ajax.request({
        url: base + &quot;dhis-web-commons-security/login.action&quot;,
        method: &quot;POST&quot;,
        params: { j_username: &quot;portal&quot;, j_password: &quot;Portal123&quot; },
        success: setLinks
      });
    });

    function setLinks() {

      // Referring to an existing table through the id parameter, render to &quot;table1&quot; div
      
      DHIS.getTable({ url: base, el: &quot;table1&quot;, id: &quot;R0DVGvXDUNP&quot; });

      // Full table configuration, render to &quot;table2&quot; div
      
      DHIS.getTable({
        url: base,
        el: &quot;table2&quot;,
        columns: [
          {dimension: &quot;de&quot;, items: [{id: &quot;YtbsuPPo010&quot;}, {id: &quot;l6byfWFUGaP&quot;}]}
        ],
        rows: [
          {dimension: &quot;pe&quot;, items: [{id: &quot;LAST_12_MONTHS&quot;}]}
        ],
        filters: [
          {dimension: &quot;ou&quot;, items: [{id: &quot;USER_ORGUNIT&quot;}]}
        ],
        // All following options are optional
        showTotals: false,
        showSubTotals: false,
        hideEmptyRows: true,
        showHierarchy: true,
        displayDensity: &quot;comfortable&quot;,
        fontSize: &quot;large&quot;,
        digitGroupSeparator: &quot;comma&quot;,
        legendSet: {id: &quot;BtxOoQuLyg1&quot;}
      });
    }
  &lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;div id=&quot;table1&quot;&gt;&lt;/div&gt;
  &lt;div id=&quot;table2&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</screen>
      </para>
      <para>Three files are included in the header section of the HTML document. The first
      two files are the Ext JS javascript library (we use the DHIS 2 content delivery network in
      this case) and its css stylesheet. The third file is the Pivot table plug-in. Make sure the
      path is pointing to your DHIS server installation.</para>
      <screen>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://dhis2-cdn.org/v215/ext/resources/css/ext-plugin-gray.css&quot; /&gt;
&lt;script src=&quot;http://dhis2-cdn.org/v215/ext/ext-all.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;http://dhis2-cdn.org/v215/plugin/table.js&quot;&gt;&lt;/script&gt;</screen>
      <para>To authenticate with the DHIS server we use the same approach as in the previous section. In the header of the HTML document we include the following Javascript inside a script element. The <emphasis role="italic">setLinks</emphasis> method will be implemented later. Make sure the <emphasis role="italic">base</emphasis> variable is pointing to your DHIS installation.</para>
      <screen>var base = &quot;https://apps.dhis2.org/demo/&quot;;

Ext.onReady( function() {
  Ext.Ajax.request({
    url: base + &quot;dhis-web-commons-security/login.action&quot;,
    method: &quot;POST&quot;,
    params: { j_username: &quot;portal&quot;, j_password: &quot;Portal123&quot; },
      success: setLinks
  });
});</screen>
      <para>Now let us have a look at the various options for the Pivot table plug-in. Two properies are required: <emphasis role="italic">el</emphasis> and <emphasis role="italic">url</emphasis> (please refer to the table below). Now, if you want to refer to pre-defined tables already made inside DHIS it is sufficient to provide the additional <emphasis role="italic">id</emphasis> parameter. If you instead want to configure a pivot table dynamically you shoud omit the id parameter and provide data dimensions inside a <emphasis role="italic">columns</emphasis> array, a <emphasis role="italic">rows</emphasis> array and optionally a <emphasis role="italic">filters</emphasis> array instead.</para>
      <para>A data dimension is defined as an object with a text property called <emphasis role="italic">dimension</emphasis>. This property accepts the following values: <emphasis role="italic">in</emphasis> (indicator), <emphasis role="italic">de</emphasis> (data element), <emphasis role="italic">ds</emphasis> (data set), <emphasis role="italic">dc</emphasis> (data element operand), <emphasis role="italic">pe</emphasis> (period), <emphasis role="italic">ou</emphasis> (organisation unit) or the id of any organisation unit group set or data element group set (can be found in the web api). The data dimension also has an array property called <emphasis role="italic">items</emphasis> which accepts objects with an <emphasis role="italic">id</emphasis> property.</para>
      <para>To sum up, if you want to have e.g. &quot;ANC 1 Coverage&quot;, &quot;ANC 2 Coverage&quot; and &quot;ANC 3 Coverage&quot; on the columns in your table you can make the following <emphasis role="italic">columns</emphasis> config:</para>
      <screen>columns: [{
  dimension: &quot;in&quot;, // &quot;in&quot;, &quot;de&quot;, &quot;ds&quot;, &quot;dc&quot;, &quot;pe&quot;, &quot;ou&quot; or any dimension id
  items: [
    {id: &quot;Uvn6LCg7dVU&quot;}, // the id of ANC 1 Coverage
    {id: &quot;OdiHJayrsKo&quot;}, // the id of ANC 2 Coverage
    {id: &quot;sB79w2hiLp8&quot;}  // the id of ANC 3 Coverage
  ]
}]</screen>
      <table>
        <title>Pivot table plug-in configuration</title>
        <tgroup cols="5">
          <thead>
            <row>
              <entry> Param </entry>
              <entry> Type </entry>
              <entry> Required </entry>
              <entry> Options (default first) </entry>
              <entry> Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>el</entry>
              <entry>string</entry>
              <entry>Yes</entry>
              <entry/>
              <entry>Identifier of the HTML element to render the table in your web page</entry>
            </row>
            <row>
              <entry>url</entry>
              <entry>string</entry>
              <entry>Yes</entry>
              <entry/>
              <entry>Base URL of the DHIS server</entry>
            </row>
            <row>
              <entry>id</entry>
              <entry>string</entry>
              <entry>No</entry>
              <entry/>
              <entry>Identifier of a pre-defined table (favorite) in DHIS</entry>
            </row>
            <row>
              <entry>columns</entry>
              <entry>array</entry>
              <entry>Yes (if no id provided)</entry>
              <entry/>
              <entry>Data dimensions to include in table as columns</entry>
            </row>
            <row>
              <entry>rows</entry>
              <entry>array</entry>
              <entry>Yes (if no id provided)</entry>
              <entry/>
              <entry>Data dimensions to include in table as rows</entry>
            </row>
            <row>
              <entry>filter</entry>
              <entry>array</entry>
              <entry>No</entry>
              <entry/>
              <entry>Data dimensions to include in table as filters</entry>
            </row>
            <row>
              <entry>showTotals</entry>
              <entry>boolean</entry>
              <entry>No</entry>
              <entry>true | false</entry>
              <entry>Whether to display totals for columns and rows</entry>
            </row>
            <row>
              <entry>showSubTotals</entry>
              <entry>boolean</entry>
              <entry>No</entry>
              <entry>true | false</entry>
              <entry>Whether to display sub-totals for columns and rows</entry>
            </row>
            <row>
              <entry>hideEmptyRows</entry>
              <entry>boolean</entry>
              <entry>No</entry>
              <entry>false | true</entry>
              <entry>Whether to hide rows with no data</entry>
            </row>
            <row>
              <entry>showHierarchy</entry>
              <entry>boolean</entry>
              <entry>No</entry>
              <entry>false | true</entry>
              <entry>Whether to extend orgunit names with the name of all anchestors</entry>
            </row>
            <row>
              <entry>displayDensity</entry>
              <entry>string</entry>
              <entry>No</entry>
              <entry>&quot;normal&quot; | &quot;comfortable&quot; | &quot;compact&quot;</entry>
              <entry>The amount of space inside table cells</entry>
            </row>
            <row>
              <entry>fontSize</entry>
              <entry>string</entry>
              <entry>No</entry>
              <entry>&quot;normal&quot; | &quot;large&quot; | &quot;small&quot;</entry>
              <entry>Table font size</entry>
            </row>
            <row>
              <entry>digitGroupSeparator</entry>
              <entry>string</entry>
              <entry>No</entry>
              <entry>&quot;space&quot; | &quot;comma&quot; | &quot;none&quot;</entry>
              <entry>How values are formatted: 1 000 | 1,000 | 1000</entry>
            </row>
            <row>
              <entry>legendSet</entry>
              <entry>object</entry>
              <entry>No</entry>
              <entry/>
              <entry>Show a color indicator next to the values (currently reusing legend sets from GIS)</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>We continue by adding one pre-defined and one dynamic pivot table to our HTML document. You can browse the list of available pivot tables using the Web API here: <ulink url="http://apps.dhis2.org/demo/api/reportTables"/>.</para>
      <screen>function setLinks() {  
  DHIS.getTable({ url: base, el: &quot;table1&quot;, id: &quot;R0DVGvXDUNP&quot; });

  DHIS.getTable({
 url: base,
 el: &quot;table2&quot;,
 columns: [
   {dimension: &quot;de&quot;, items: [{id: &quot;YtbsuPPo010&quot;}, {id: &quot;l6byfWFUGaP&quot;}]}
 ],
 rows: [
   {dimension: &quot;pe&quot;, items: [{id: &quot;LAST_12_MONTHS&quot;}]}
 ],
 filters: [
   {dimension: &quot;ou&quot;, items: [{id: &quot;USER_ORGUNIT&quot;}]}
 ],
 // All following options are optional
 showTotals: false,
 showSubTotals: false,
 hideEmptyRows: true,
 showHierarchy: true,
 displayDensity: &quot;comfortable&quot;,
 fontSize: &quot;large&quot;,
 digitGroupSeparator: &quot;comma&quot;,
 legendSet: {id: &quot;BtxOoQuLyg1&quot;}
  });
}</screen>
      <para>Finally we include some <emphasis role="italic">div</emphasis> elements in the body section of the HTML document with the identifiers referred to in the plug-in Javascript.</para>
      <screen>&lt;div id=&quot;table1&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;table2&quot;&gt;&lt;/div&gt;</screen>
      <para>To see a complete working example please visit <ulink url="http://apps.dhis2.org/portal/table.html"/>.</para>
    </section>
    <section>
      <title>Embedding charts with the Visualizer chart plug-in</title>
      <para>In this example we will see how we can embed good-looking Ext JS charts (<ulink url="http://www.sencha.com/products/extjs"/>) with data served from a DHIS back-end into a Web page. To accomplish this we will use the DHIS Visualizer plug-in. The plug-in is written in Javascript and depends on the Ext JS library only. A complete working example can be found at <ulink url="http://apps.dhis2.org/portal/chart.html"/>. Open the page in a web browser and view the source to see how it is set up.</para>
      <para>We start by having a look at what the complete html file could look like. This setup puts two
        charts in our web page. The first one is referring to an existing chart. The second is
        configured inline.
        <screen>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://dhis2-cdn.org/v215/ext/resources/css/ext-plugin-gray.css&quot; /&gt;
  &lt;script src=&quot;http://dhis2-cdn.org/v215/ext/ext-all.js&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;http://dhis2-cdn.org/v215/plugin/chart.js&quot;&gt;&lt;/script&gt;

  &lt;script&gt;
    var base = &quot;https://apps.dhis2.org/demo&quot;;

    // Login - if OK, call the setLinks function
    
    Ext.onReady( function() {
      Ext.Ajax.request({
        url: base + &quot;dhis-web-commons-security/login.action&quot;,
        method: &quot;POST&quot;,
        params: { j_username: &quot;portal&quot;, j_password: &quot;Portal123&quot; },
        success: setLinks
      });
    });

    function setLinks() {

      // Referring to an existing chart through the id parameter, render to &quot;chart1&quot; div
      
      DHIS.getChart({ url: base, el: &quot;chart1&quot;, id: &quot;R0DVGvXDUNP&quot; });

      // Full chart configuration, render to &quot;chart2&quot; div
      
      DHIS.getChart({
        url: base,
        el: &quot;chart2&quot;,
        type: &quot;stackedBar&quot;,
        columns: [ // Chart series
          {dimension: &quot;de&quot;, items: [{id: &quot;YtbsuPPo010&quot;}, {id: &quot;l6byfWFUGaP&quot;}]}
        ],
        rows: [ // Chart categories
          {dimension: &quot;pe&quot;, items: [{id: &quot;LAST_12_MONTHS&quot;}]}
        ],
        filters: [
          {dimension: &quot;ou&quot;, items: [{id: &quot;USER_ORGUNIT&quot;}]}
        ],
        // All following options are optional
        showData: false,
        targetLineValue: 70,
        baseLineValue: 20,
        showTrendLine: true,
        hideLegend: true,
        title: &quot;My chart title&quot;,
        domainAxisTitle: &quot;Periods&quot;,
        rangeAxisTitle: &quot;Percent&quot;
      });
    }
  &lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;div id=&quot;chart1&quot;&gt;&lt;/div&gt;
  &lt;div id=&quot;chart2&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</screen>
      </para>
      <para>Three files are included in the header section of the HTML document. The first
        two files are the Ext JS javascript library (we use the DHIS 2 content delivery network in
        this case) and its stylesheet. The third file is the Visualizer plug-in. Make sure the path
        is pointing to your DHIS server installation.</para>
      <screen>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://dhis2-cdn.org/v215/ext/resources/css/ext-plugin-gray.css&quot; /&gt;
&lt;script src=&quot;http://dhis2-cdn.org/v215/ext/ext-all.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;http://dhis2-cdn.org/v215/plugin/chart.js&quot;&gt;&lt;/script&gt;</screen>
      <para>To authenticate with the DHIS server we use the same approach as in the previous section. In the header of the HTML document we include the following Javascript inside a script element. The <emphasis role="italic">setLinks</emphasis> method will be implemented later. Make sure the <emphasis role="italic">base</emphasis> variable is pointing to your DHIS installation.</para>
      <screen>var base = &quot;https://apps.dhis2.org/demo/&quot;;

Ext.onReady( function() {
  Ext.Ajax.request({
    url: base + &quot;dhis-web-commons-security/login.action&quot;,
    method: &quot;POST&quot;,
    params: { j_username: &quot;portal&quot;, j_password: &quot;Portal123&quot; },
    success: setLinks
  });
});</screen>
      <para>Now let us have a look at the various options for the Visualizer plug-in. Two properies are required: <emphasis role="italic">el</emphasis> and <emphasis role="italic">url</emphasis> (please refer to the table below). Now, if you want to refer to pre-defined charts already made inside DHIS it is sufficient to provide the additional <emphasis role="italic">id</emphasis> parameter. If you instead want to configure a chart dynamically you shoud omit the id parameter and provide data dimensions inside a <emphasis role="italic">columns</emphasis> array (chart series), a <emphasis role="italic">rows</emphasis> array (chart categories) and optionally a <emphasis role="italic">filters</emphasis> array instead.</para>
      <para>A data dimension is defined as an object with a text property called <emphasis role="italic">dimension</emphasis>. This property accepts the following values: <emphasis role="italic">in</emphasis> (indicator), <emphasis role="italic">de</emphasis> (data element), <emphasis role="italic">ds</emphasis> (data set), <emphasis role="italic">dc</emphasis> (data element operand), <emphasis role="italic">pe</emphasis> (period), <emphasis role="italic">ou</emphasis> (organisation unit) or the id of any organisation unit group set or data element group set (can be found in the web api). The data dimension also has an array property called <emphasis role="italic">items</emphasis> which accepts objects with an <emphasis role="italic">id</emphasis> property.</para>
      <para>To sum up, if you want to have e.g. &quot;ANC 1 Coverage&quot;, &quot;ANC 2 Coverage&quot; and &quot;ANC 3 Coverage&quot; as series in your chart you can make the following <emphasis role="italic">columns</emphasis> config:</para>
      <screen>columns: [{
  dimension: &quot;in&quot;, // could be &quot;in&quot;, &quot;de&quot;, &quot;ds&quot;, &quot;dc&quot;, &quot;pe&quot;, &quot;ou&quot; or any dimension id
  items: [
    {id: &quot;Uvn6LCg7dVU&quot;}, // the id of ANC 1 Coverage
    {id: &quot;OdiHJayrsKo&quot;}, // the id of ANC 2 Coverage
    {id: &quot;sB79w2hiLp8&quot;}  // the id of ANC 3 Coverage
  ]
}]</screen>
      <table>
        <title>Visualizer chart plug-in configuration</title>
        <tgroup cols="5">
          <thead>
            <row>
              <entry> Param </entry>
              <entry> Type </entry>
              <entry> Required </entry>
              <entry> Options (default first) </entry>
              <entry> Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>el</entry>
              <entry>string</entry>
              <entry>Yes</entry>
              <entry/>
              <entry>Identifier of the HTML element to render the chart in your web page</entry>
            </row>
            <row>
              <entry>url</entry>
              <entry>string</entry>
              <entry>Yes</entry>
              <entry/>
              <entry>Base URL of the DHIS server</entry>
            </row>
            <row>
              <entry>id</entry>
              <entry>string</entry>
              <entry>No</entry>
              <entry/>
              <entry>Identifier of a pre-defined chart (favorite) in DHIS</entry>
            </row>
            <row>
              <entry>type</entry>
              <entry>string</entry>
              <entry>No</entry>
              <entry>column | stackedcolumn | bar | stackedbar | line | area | pie</entry>
              <entry>Chart type</entry>
            </row>
            <row>
              <entry>columns</entry>
              <entry>array</entry>
              <entry>Yes (if no id provided)</entry>
              <entry/>
              <entry>Data dimensions to include in chart as series</entry>
            </row>
            <row>
              <entry>rows</entry>
              <entry>array</entry>
              <entry>Yes (if no id provided)</entry>
              <entry/>
              <entry>Data dimensions to include in chart as category</entry>
            </row>
            <row>
              <entry>filter</entry>
              <entry>array</entry>
              <entry>No</entry>
              <entry/>
              <entry>Data dimensions to include in chart as filters</entry>
            </row>
            <row>
              <entry>showData</entry>
              <entry>boolean</entry>
              <entry>No</entry>
              <entry>false | true</entry>
              <entry>Whether to display data on the chart</entry>
            </row>
            <row>
              <entry>showTrendLine</entry>
              <entry>boolean</entry>
              <entry>No</entry>
              <entry>false | true</entry>
              <entry>Whether to display trend line(s) on the chart</entry>
            </row>
            <row>
              <entry>hideLegend</entry>
              <entry>boolean</entry>
              <entry>No</entry>
              <entry>false | true</entry>
              <entry>Whether to hide the chart legend</entry>
            </row>
            <row>
              <entry>hideTitle</entry>
              <entry>boolean</entry>
              <entry>No</entry>
              <entry>false | true</entry>
              <entry>Whether to hide the chart title</entry>
            </row>
            <row>
              <entry>targetLineValue</entry>
              <entry>double</entry>
              <entry>No</entry>
              <entry/>
              <entry>Value of target line to display on the chart</entry>
            </row>
            <row>
              <entry>targetLineLabel</entry>
              <entry>string</entry>
              <entry>No</entry>
              <entry/>
              <entry>Label for target line</entry>
            </row>
            <row>
              <entry>baseLineValue</entry>
              <entry>double</entry>
              <entry>No</entry>
              <entry/>
              <entry>Value of baseline to display on the chart</entry>
            </row>
            <row>
              <entry>baseLineLabel</entry>
              <entry>string</entry>
              <entry>No</entry>
              <entry/>
              <entry>Label for baseline</entry>
            </row>
            <row>
              <entry>domainAxisTitle</entry>
              <entry>string</entry>
              <entry>No</entry>
              <entry/>
              <entry>Title for the domain axis</entry>
            </row>
            <row>
              <entry>rangeAxisTitle</entry>
              <entry>string</entry>
              <entry>No</entry>
              <entry/>
              <entry>Title for the range axis</entry>
            </row>
            <row>
              <entry>width</entry>
              <entry>integer</entry>
              <entry>No</entry>
              <entry/>
              <entry>Width of chart</entry>
            </row>
            <row>
              <entry>height</entry>
              <entry>integer</entry>
              <entry>No</entry>
              <entry/>
              <entry>Height of chart</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>We continue by including two pre-defined charts and to dynamic charts to our HTML document. You can browse the list of available charts using the Web API here: <ulink url="http://apps.dhis2.org/demo/api/charts"/>.</para>
      <screen>function setLinks() {
  DHIS.getChart({ url: base, el: &quot;chart1&quot;, id: &quot;R0DVGvXDUNP&quot; });

  DHIS.getChart({
 url: base,
 el: &quot;chart2&quot;,
 type: &quot;stackedBar&quot;,
 columns: [ // Chart series
   {dimension: &quot;de&quot;, items: [{id: &quot;YtbsuPPo010&quot;}, {id: &quot;l6byfWFUGaP&quot;}]}
 ],
 rows: [ // Chart categories
   {dimension: &quot;pe&quot;, items: [{id: &quot;LAST_12_MONTHS&quot;}]}
 ],
 filters: [
   {dimension: &quot;ou&quot;, items: [{id: &quot;USER_ORGUNIT&quot;}]}
 ],
 // All following options are optional
 showData: false,
 targetLineValue: 70,
 baseLineValue: 20,
 showTrendLine: true,
 hideLegend: true,
 title: &quot;My chart title&quot;,
 domainAxisTitle: &quot;Periods&quot;,
 rangeAxisTitle: &quot;Percent&quot;
  });
}</screen>
      <para>Finally we include some <emphasis role="italic">div</emphasis> elements in the body section of the HTML document with the identifiers referred to in the plug-in Javascript.</para>
      <screen>&lt;div id=&quot;chart1&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;chart2&quot;&gt;&lt;/div&gt;
</screen>
      <para>To see a complete working example please visit <ulink url="http://apps.dhis2.org/portal/chart.html"/>.</para>
    </section>
    <section>
      <title>Embedding maps with the GIS map plug-in</title>
      <para>In this example we will see how we can embed maps with data served from a DHIS back-end into a Web page. To accomplish this we will use the GIS map plug-in. The plug-in is written in Javascript and depends on the Ext JS library only. A complete working example can be found at <ulink url="http://apps.dhis2.org/portal/map.html"/>. Open the page in a web browser and view the source to see how it is set up.</para>
      <para>We start by having a look at what the complete html file could look like. This setup puts two
        maps in our web page. The first one is referring to an existing map. The second is
        configured inline.
        <screen>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://dhis2-cdn.org/v215/ext/resources/css/ext-plugin-gray.css&quot; /&gt;
  &lt;script src=&quot;http://dhis2-cdn.org/v215/ext/ext-all.js&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;https://maps.google.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;http://dhis2-cdn.org/v215/openlayers/OpenLayers.js&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;http://dhis2-cdn.org/v215/plugin/map.js&quot;&gt;&lt;/script&gt;

  &lt;script&gt;
    var base = &quot;https://apps.dhis2.org/demo&quot;;

    // Login - if OK, call the setLinks function
    
    Ext.onReady( function() {
      Ext.Ajax.request({
        url: base + &quot;dhis-web-commons-security/login.action&quot;,
        method: &quot;POST&quot;,
        params: { j_username: &quot;portal&quot;, j_password: &quot;Portal123&quot; },
        success: setLinks
      });
    });

    function setLinks() {
      DHIS.getMap({ url: base, el: &quot;map1&quot;, id: &quot;ytkZY3ChM6J&quot; });

      DHIS.getMap({
        url: base,
        el: &quot;map2&quot;,
        mapViews: [{
          columns: [{dimension: &quot;in&quot;, items: [{id: &quot;Uvn6LCg7dVU&quot;}]}], // data
          rows: [{dimension: &quot;ou&quot;, items: [{id: &quot;LEVEL-3&quot;}, {id: &quot;ImspTQPwCqd&quot;}]}], // organisation units,
          filters: [{dimension: &quot;pe&quot;, items: [{id: &quot;LAST_3_MONTHS&quot;}]}], // period
          // All following options are optional
          classes: 7,
          colorLow: &quot;02079c&quot;,
          colorHigh: &quot;e5ecff&quot;,
          opacity: 0.9,
          legendSet: {id: &quot;fqs276KXCXi&quot;}
        }]
      });
    }
  &lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;div id=&quot;map1&quot;&gt;&lt;/div&gt;
  &lt;div id=&quot;map2&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</screen></para>
      <para>Four files and Google Maps are included in the header section of the HTML
        document. The first two files are the Ext JS javascript library (we use the DHIS 2 content
        delivery network in this case) and its stylesheet. The third file is the OpenLayers
        javascript mapping framework (<ulink url="http://openlayers.org"/>) and finally we include
        the GIS map plug-in. Make sure the path is pointing to your DHIS server installation.</para>
      <screen>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://dhis2-cdn.org/v215/ext/resources/css/ext-plugin-gray.css&quot; /&gt;
&lt;script src=&quot;http://dhis2-cdn.org/v215/ext/ext-all.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://maps.google.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;http://dhis2-cdn.org/v215/openlayers/OpenLayers.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;http://dhis2-cdn.org/v215/plugin/map.js&quot;&gt;&lt;/script&gt;</screen>
      <para>To authenticate with the DHIS server we use the same approach as in the previous section. In the header of the HTML document we include the following Javascript inside a script element. The <emphasis role="italic">setLinks</emphasis> method will be implemented later. Make sure the <emphasis role="italic">base</emphasis> variable is pointing to your DHIS installation.</para>
      <screen>Ext.onReady( function() {
  Ext.Ajax.request({
    url: base + &quot;dhis-web-commons-security/login.action&quot;,
    method: &quot;POST&quot;,
    params: { j_username: &quot;portal&quot;, j_password: &quot;Portal123&quot; },
    success: setLinks
  });
});</screen>
      <para>Now let us have a look at the various options for the GIS plug-in. Two properies are required: <emphasis role="italic">el</emphasis> and <emphasis role="italic">url</emphasis> (please refer to the table below). Now, if you want to refer to pre-defined maps already made in the DHIS 2 GIS it is sufficient to provide the additional <emphasis role="italic">id</emphasis> parameter. If you instead want to configure a map dynamically you shoud omit the id parameter and provide <emphasis role="italic">mapViews</emphasis> (layers) instead. They should be configured with data dimensions inside a <emphasis role="italic">columns</emphasis> array, a <emphasis role="italic">rows</emphasis> array and optionally a <emphasis role="italic">filters</emphasis> array instead.</para>
      <para>A data dimension is defined as an object with a text property called <emphasis role="italic">dimension</emphasis>. This property accepts the following values: <emphasis role="italic">in</emphasis> (indicator), <emphasis role="italic">de</emphasis> (data element), <emphasis role="italic">ds</emphasis> (data set), <emphasis role="italic">dc</emphasis> (data element operand), <emphasis role="italic">pe</emphasis> (period), <emphasis role="italic">ou</emphasis> (organisation unit) or the id of any organisation unit group set or data element group set (can be found in the web api). The data dimension also has an array property called <emphasis role="italic">items</emphasis> which accepts objects with an <emphasis role="italic">id</emphasis> property.</para>
      <para>To sum up, if you want to have a layer with e.g. &quot;ANC 1 Coverage&quot; in your map you can make the following <emphasis role="italic">columns</emphasis> config:</para>
      <screen>columns: [{
  dimension: &quot;in&quot;, // could be &quot;in&quot;, &quot;de&quot;, &quot;ds&quot;, &quot;dc&quot;, &quot;pe&quot;, &quot;ou&quot; or any dimension id
  items: [{id: &quot;Uvn6LCg7dVU&quot;}], // the id of ANC 1 Coverage
}]</screen>
      <table>
        <title>GIS map plug-in configuration</title>
        <tgroup cols="5">
          <thead>
            <row>
              <entry> Param </entry>
              <entry> Type </entry>
              <entry> Required </entry>
              <entry> Options (default first) </entry>
              <entry> Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>el</entry>
              <entry>string</entry>
              <entry>Yes</entry>
              <entry/>
              <entry>Identifier of the HTML element to render the map in your web page</entry>
            </row>
            <row>
              <entry>url</entry>
              <entry>string</entry>
              <entry>Yes</entry>
              <entry/>
              <entry>Base URL of the DHIS server</entry>
            </row>
            <row>
              <entry>id</entry>
              <entry>string</entry>
              <entry>No</entry>
              <entry/>
              <entry>Identifier of a pre-defined map (favorite) in DHIS</entry>
            </row>
            <row>
              <entry>baseLayer</entry>
              <entry>string/boolean</entry>
              <entry>No</entry>
              <entry>&apos;gs&apos;, &apos;googlestreets&apos; | &apos;gh&apos;, &apos;googlehybrid&apos; | &apos;osm&apos;, &apos;openstreetmap&apos; | false, null, &apos;none&apos;, &apos;off&apos;</entry>
              <entry>Show background map</entry>
            </row>
            <row>
              <entry>hideLegend</entry>
              <entry>boolean</entry>
              <entry>No</entry>
              <entry>false | true</entry>
              <entry>Hide legend panel</entry>
            </row>
            <row>
              <entry>mapViews</entry>
              <entry>array</entry>
              <entry>Yes (if no id provided)</entry>
              <entry/>
              <entry>Array of layers</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>If no id is provided you must add map view objects with the following config options:</para>
      <table>
        <title>Map plug-in configuration</title>
        <tgroup cols="5">
          <tbody>
            <row>
              <entry>layer</entry>
              <entry>string</entry>
              <entry>No</entry>
              <entry>&quot;thematic1&quot; | &quot;thematic2&quot; | &quot;thematic3&quot; | &quot;thematic4&quot; | &quot;boundary&quot; | &quot;facility&quot; | </entry>
              <entry>The layer to which the map view content should be added</entry>
            </row>
            <row>
              <entry>columns</entry>
              <entry>array</entry>
              <entry>Yes</entry>
              <entry/>
              <entry>Indicator, data element, data operand or data set (only one will be used)</entry>
            </row>
            <row>
              <entry>rows</entry>
              <entry>array</entry>
              <entry>Yes</entry>
              <entry/>
              <entry>Organisation units (multiple allowed)</entry>
            </row>
            <row>
              <entry>filter</entry>
              <entry>array</entry>
              <entry>Yes</entry>
              <entry/>
              <entry>Period (only one will be used)</entry>
            </row>
            <row>
              <entry>classes</entry>
              <entry>integer</entry>
              <entry>No</entry>
              <entry>5 | 1-7</entry>
              <entry>The number of automatic legend classes</entry>
            </row>
            <row>
              <entry>method</entry>
              <entry>integer</entry>
              <entry>No</entry>
              <entry>2 | 3</entry>
              <entry>Legend calculation method where 2 = equal intervals and 3 = equal counts</entry>
            </row>
            <row>
              <entry>colorLow</entry>
              <entry>string</entry>
              <entry>No</entry>
              <entry>&quot;ff0000&quot; (red) | Any hex color</entry>
              <entry>The color representing the first automatic legend class</entry>
            </row>
            <row>
              <entry>colorHigh</entry>
              <entry>string</entry>
              <entry>No</entry>
              <entry>&quot;00ff00&quot; (green) | Any hex color</entry>
              <entry>The color representing the last automatic legend class</entry>
            </row>
            <row>
              <entry>radiusLow</entry>
              <entry>integer</entry>
              <entry>No</entry>
              <entry>5 | Any integer</entry>
              <entry>Only applies for facilities (points) - radius of the point with lowest value</entry>
            </row>
            <row>
              <entry>radiusHigh</entry>
              <entry>integer</entry>
              <entry>No</entry>
              <entry>15 | Any integer</entry>
              <entry>Only applies for facilities (points) - radius of the point with highest value</entry>
            </row>
            <row>
              <entry>opacity</entry>
              <entry>double</entry>
              <entry>No</entry>
              <entry>0.8 | 0 - 1</entry>
              <entry>Opacity/transparency of the layer content</entry>
            </row>
            <row>
              <entry>legendSet</entry>
              <entry>object</entry>
              <entry>No</entry>
              <entry/>
              <entry>Pre-defined legend set. Will override the automatic legend set.</entry>
            </row>
            <row>
              <entry>labels</entry>
              <entry>boolean/object</entry>
              <entry>No</entry>
              <entry>false | true | object properties: fontSize (integer), color (hex string), strong (boolean), italic (boolean)</entry>
              <entry>Show labels on the map</entry>
            </row>
            <row>
              <entry>width</entry>
              <entry>integer</entry>
              <entry>No</entry>
              <entry/>
              <entry>Width of map</entry>
            </row>
            <row>
              <entry>height</entry>
              <entry>integer</entry>
              <entry>No</entry>
              <entry/>
              <entry>Height of map</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>We continue by adding one pre-defined and one dynamically configured map to our HTML document. You can browse the list of available maps using the Web API here: <ulink url="http://apps.dhis2.org/demo/api/maps"/>.</para>
      <screen>function setLinks() {
  DHIS.getMap({ url: base, el: &quot;map1&quot;, id: &quot;ytkZY3ChM6J&quot; });

  DHIS.getMap({
 url: base,
 el: &quot;map2&quot;,
 mapViews: [
   columns: [ // Chart series
  columns: [{dimension: &quot;in&quot;, items: [{id: &quot;Uvn6LCg7dVU&quot;}]}], // data
   ],
   rows: [ // Chart categories
  rows: [{dimension: &quot;ou&quot;, items: [{id: &quot;LEVEL-3&quot;}, {id: &quot;ImspTQPwCqd&quot;}]}], // organisation units
   ],
   filters: [
  filters: [{dimension: &quot;pe&quot;, items: [{id: &quot;LAST_3_MONTHS&quot;}]}], // period
   ],
   // All following options are optional
   classes: 7,
   colorLow: &quot;02079c&quot;,
   colorHigh: &quot;e5ecff&quot;,
   opacity: 0.9,
   legendSet: {id: &quot;fqs276KXCXi&quot;}
 ]
  });
}</screen>
      <para>Finally we include some <emphasis role="italic">div</emphasis> elements in the body section of the HTML document with the identifiers referred to in the plug-in Javascript.</para>
      <screen>&lt;div id=&quot;map1&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;map2&quot;&gt;&lt;/div&gt;
</screen>
      <para>To see a complete working example please visit <ulink url="http://apps.dhis2.org/portal/map.html"/>.</para>
    </section>
    <section>
      <title>Creating a chart carousel with the carousel plug-in</title>
      <para>The chart plug-in also makes it possible to create a chart carousel which for instance can be used to create an attractive front page on a Web portal. To use the carousel we need to import a few  files in the head section of our HTML page:</para>
      <screen>
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://dhis2-cdn.org/v213/ext/resources/css/ext-plugin-gray.css&quot; /&gt;
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://apps.dhis2.org/demo/dhis-web-commons/javascripts/ext-ux/carousel/css/carousel.css&quot; /&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;https://extjs-public.googlecode.com/svn/tags/extjs-4.0.7/release/ext-all.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;https://apps.dhis2.org/demo/dhis-web-commons/javascripts/ext-ux/carousel/Carousel.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;https://apps.dhis2.org/demo/dhis-web-commons/javascripts/plugin/plugin.js&quot;&gt;&lt;/script&gt;</screen>
      <para>The first file is the CSS stylesheet for the chart plug-in. The second file is the CSS stylesheet for the carousel widget. The third file is the Ext JavaScript framework which this plug-in depends on. The fourth file is the carousel plug-in JavaScript file. The fifth file is the chart plug-in JavaScript file. The paths in this example points at the DHIS 2 demo site, make sure you update them to point to your own DHIS 2 installation.</para>
      <para>Please refer to the section about the chart plug-in on how to do authentication.</para>
      <para>To create a chart carousel we will first render the charts we want to include in the carousel using the method described in the chart plug-in section. Then we create the chart carousel itself. The charts will be rendered into <emphasis role="italic">div</emphasis> elements which all have a CSS class called <emphasis role="italic">chart</emphasis>. In the carousel configuration we can then define a <emphasis role="italic">selector</emphasis> expression which refers to those div elements like this:</para>
      <screen>DHIS.getChart({ uid: &apos;R0DVGvXDUNP&apos;, el: &apos;chartA1&apos;, url: base });
DHIS.getChart({ uid: &apos;X0CPnV6uLjR&apos;, el: &apos;chartA2&apos;, url: base });
DHIS.getChart({ uid: &apos;j1gNXBgwKVm&apos;, el: &apos;chartA3&apos;, url: base });
DHIS.getChart({ uid: &apos;X7PqaXfevnL&apos;, el: &apos;chartA4&apos;, url: base });

new Ext.ux.carousel.Carousel( &apos;chartCarousel&apos;, {
  autoPlay: true,
  itemSelector: &apos;div.chart&apos;,
  interval: 5,
  showPlayButton: true
});</screen>
      <para>The first argument in the configuration is  the id of the div element in which you want to render the carousel. The <emphasis role="italic">autoPlay</emphasis> configuration option refers to whether we want the carousel to start when the user loads the Web page. The <emphasis role="italic">interval</emphasis> option defines how many seconds each chart should be displayed. The <emphasis role="italic">showPlayButton</emphasis> defines whether we want to render a button for the user to start and stop the carousel. Finally we need to insert the div elements in the body of the HTML document:</para>
      <screen>&lt;div id=&quot;chartCarousel&quot;&gt;

&lt;div id=&quot;chartA1&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;chartA2&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;chartA3&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;chartA4&quot;&gt;&lt;/div&gt;</screen>
      <para>To see a complete working example please visit <ulink url="http://apps.dhis2.org/portal/carousel.html"/>.</para>
    </section>
  </section>
  <section>
    <title>Working with SQL views</title>
    <para>SQL views are useful for presenting certain data views externally, which may be more
      easily constructed with SQL than by combining the multiple objects of the Web API. As an
      example, lets assume we have been asked to provide a view of all organization units with their
      names, parent names, organization unit level and name, and the coordinates listed in the
      database. The view might look something like this: </para>
    <screen>SELECT ou.name as orgunit, par.name as parent, ou.coordinates, ous.level, oul.name from organisationunit ou
INNER JOIN _orgunitstructure ous ON ou.organisationunitid = ous.organisationunitid
INNER JOIN organisationunit par ON ou.parentid = par.organisationunitid
INNER JOIN orgunitlevel oul ON ous.level = oul.level
WHERE ou.coordinates is not null
ORDER BY oul.level, par.name, ou.name</screen>
    <para>We will use <command>curl</command> to first execute the view on the DHIS 2 server. This
      is essentially a materialization process, and ensures that we have the most recent data
      available through the SQL view when it is retrieved from the server. You can first look up the
      SQL view from the api/sqlViews resource, then POST using the following command:</para>
    <screen>curl &quot;https://apps.dhis2.org/demo/api/sqlViews/dI68mLkP1wN/execute&quot; -X POST -u admin:district -v</screen>
    <para>The next step in the process is the retrieval of the data.The basic structure of the URL is as follows</para>
    <screen>http://{server}/api/sqlViews/{id}/data(.csv)</screen>
    <para>The <parameter>{server}</parameter> parameter should be replaced with your own server. The
      next part of the URL <parameter>/api/sqlViews/</parameter> should be appended with the
      specific unique identifier (not the internal ID of the view). Append either
        <parameter>data</parameter> for XML data or <parameter>data.csv</parameter> for comma
      delimited values. As an example, the following command would retrieve XML data for the SQL
      view defined
      above.<screen>curl &quot;https://apps.dhis2.org/demo/api/sqlViews/dI68mLkP1wN/data.csv&quot; -u admin:district -v</screen></para>
    <para>You can do simple filtering on the columns in the result set by appending <emphasis role="italic">criteria</emphasis> query parameters to the URL, using the column names and
      filter values separated by columns as parameter values, on the following format:</para>
    <screen>/data?criteria=col1:value1&amp;criteria=col2:value2</screen>
    <para>As an example, to filter the SQL view result set above to only return organisation units
      at level 4 you can use the following URL:</para>
    <screen>https://apps.dhis2.org/demo/api/sqlViews/dI68mLkP1wN/data.csv?criteria=level:4</screen>
  </section>
  <section>
    <title>Dashboard</title>
    <para>The dashboard is designed to give you an overview of multiple analytical items like maps,
      charts, pivot tables and reports which together can provide a comprehensive overview of your
      data. Dashboards are available in the Web API through the <emphasis role="italic">dashboards</emphasis> resource. A dashboard contains a list of dashboard <emphasis role="italic">items</emphasis>. An item can represent a single resource, like a chart, map
      or report table, or represent a list of links to analytical resources, like reports,
      resources, tabular reports and users. A dashboard item can contain up to eight links.
      Typically, a dashboard client could choose to visualize the single-object items directly in a
      user interface, while rendering the multi-object items as clickable links. </para>
    <section>
      <title>Browsing dashboards</title>
      <para>To get a list of your dashboards with basic information including identifier, name and
        link in JSON format you can make a <emphasis role="italic">GET</emphasis> request to the
        following URL:</para>
      <screen>/api/dashboards.json</screen>
      <para>The dashboards resource will provide a list of dashboards. Remember that the dashboard
        object is shared so the list will be affected by the currently authenticated user. You can
        retrieve more information about a specific dashboard by following its link, similar to
        this:</para>
      <screen>api/dashboards/vQFhmLJU5sK.json</screen>
      <para>A dashboard contains information like name and creation date and an array of dashboard
        items. The response in JSON format will look something like this (access and user attributes
        omitted for
        brevity):<screen>{
  &quot;name&quot;: &quot;Antenatal Care&quot;,
  &quot;created&quot;: &quot;2013-09-08T20:55:58.060+0000&quot;,
  &quot;items&quot;: [{
    &quot;created&quot;: &quot;2013-09-09T18:28:37.813+0000&quot;,
    &quot;chart&quot;: {
      &quot;name&quot;: &quot;ANC: Visits by facility type&quot;,
      &quot;created&quot;: &quot;2013-05-30T09:58:42.023+0000&quot;,
      &quot;href&quot;: &quot;https://apps.dhis2.org/demo/api/charts/iRCGbznvyG8&quot;,
      &quot;id&quot;: &quot;iRCGbznvyG8&quot;
    },
    &quot;map&quot;: null,
    &quot;reportTable&quot;: null,
    &quot;type&quot;: &quot;chart&quot;,
    &quot;contentCount&quot;: 1,
    &quot;id&quot;: &quot;FeQp4qJ63M8&quot;
  },
  {
    &quot;created&quot;: &quot;2013-09-08T21:00:07.266+0000&quot;,
    &quot;user&quot;: null,
    &quot;chart&quot;: null,
    &quot;map&quot;: null,
    &quot;reportTable&quot;: null,
    &quot;reports&quot;: [{
      &quot;name&quot;: &quot;ANC: 1st Visit Cumulative Chart&quot;,
      &quot;created&quot;: &quot;2014-11-13T13:49:45.007+0000&quot;,
      &quot;href&quot;: &quot;https://apps.dhis2.org/demo/api/reports/Kvg1AhYHM8Q&quot;,
      &quot;id&quot;: &quot;Kvg1AhYHM8Q&quot;
    }, {
      &quot;name&quot;: &quot;ANC: Coverages This Year&quot;,
      &quot;created&quot;: &quot;2014-11-13T13:52:01.630+0000&quot;,
      &quot;href&quot;: &quot;https://apps.dhis2.org/demo/api/reports/qYVNH1wkZR0&quot;,
      &quot;id&quot;: &quot;qYVNH1wkZR0&quot;
    }],
    &quot;type&quot;: &quot;reports&quot;,
    &quot;contentCount&quot;: 2,
    &quot;id&quot;: &quot;AWUUWkPzops&quot;
  }]
}</screen></para>
    </section>
    <section>
      <title>Searching dashboards</title>
      <para>When setting a dashboard it is convenient from a consumer point of view to be able to
        search for various analytical resources using the <emphasis role="italic">/dashboards/q</emphasis> resource. This resource lets you search for matches on the name
        property of the following objects: charts, maps, report tables, users, reports and
        resources. You can do a search by making a <emphasis role="italic">GET</emphasis> request on
        the following resource URL pattern, where my-query should be replaced by the preferred
        search query:</para>
      <screen>api/dashboards/q/my-query.json</screen>
      <para>JSON and XML response formats are currently supported. The response in JSON format will
        contain references to matching resources and counts of how many matches were found in total
        and for each type of resource. It will look similar to this:</para>
      <screen>{
    &quot;charts&quot;: [{
        &quot;name&quot;: &quot;ANC: 1-3 dropout rate Yearly&quot;,
        &quot;id&quot;: &quot;LW0O27b7TdD&quot;
    }, {
        &quot;name&quot;: &quot;ANC: 1 and 3 coverage Yearly&quot;,
        &quot;id&quot;: &quot;UlfTKWZWV4u&quot;
    }, {
        &quot;name&quot;: &quot;ANC: 1st and 3rd trends Monthly&quot;,
        &quot;id&quot;: &quot;gnROK20DfAA&quot;
    }],
    &quot;maps&quot;: [{
        &quot;name&quot;: &quot;ANC: 1st visit at facility (fixed) 2013&quot;,
        &quot;id&quot;: &quot;YOEGBvxjAY0&quot;
    }, {
        &quot;name&quot;: &quot;ANC: 3rd visit coverage 2014 by district&quot;,
        &quot;id&quot;: &quot;ytkZY3ChM6J&quot;
    }],
    &quot;reportTables&quot;: [{
        &quot;name&quot;: &quot;ANC: ANC 1 Visits Cumulative Numbers&quot;,
        &quot;id&quot;: &quot;tWg9OiyV7mu&quot;
    }],
    &quot;reports&quot;: [{
        &quot;name&quot;: &quot;ANC: 1st Visit Cumulative Chart&quot;,
        &quot;id&quot;: &quot;Kvg1AhYHM8Q&quot;
    }, {
        &quot;name&quot;: &quot;ANC: Coverages This Year&quot;,
        &quot;id&quot;: &quot;qYVNH1wkZR0&quot;
    }],
    &quot;searchCount&quot;: 8,
    &quot;chartCount&quot;: 3,
    &quot;mapCount&quot;: 2,
    &quot;reportTableCount&quot;: 1,
    &quot;reportCount&quot;: 2,
    &quot;userCount&quot;: 0,
    &quot;patientTabularReportCount&quot;: 0,
    &quot;resourceCount&quot;: 0
}</screen>
    </section>
    <section>
      <title>Creating, updating and removing dashboards</title>
      <para>Creating, updating and deleting dashboards follow standard REST semantics. In order to
        create a new dashboard you can make a <emphasis role="italic">POST</emphasis> request to the
          <emphasis role="italic">/api/dashboards</emphasis> resource. From a consumer perspective
        it might be convenient to first create a dashboard and later add items to it. JSON and XML
        formats are supported for the request payload. To create a dashboard with the name &quot;My
        dashboard&quot; you can use a payload in JSON like this:</para>
      <screen>{
  &quot;name&quot;: &quot;My dashboard&quot;
}</screen>
      <para>To update, e.g. rename, a dashboard, you can make a <emphasis role="italic">PUT</emphasis> request with a similar request payload the same api/dasboards
        resource.</para>
      <para>To remove a dashboard, you can make a <emphasis role="italic">DELETE</emphasis> request
        to the specific dashboard resource similar to this:</para>
      <screen>api/dashboards/vQFhmLJU5sK</screen>
    </section>
    <section>
      <title>Adding, moving and removing dashboard items and content</title>
      <para>In order to add dashboard items a consumer can use the <emphasis role="italic">/api/dashboards/&lt;dashboard-id&gt;/items/content</emphasis> resource, where
        &lt;dashboard-id&gt; should be replaced by the relevant dashboard identifier. The request must
        use the <emphasis role="italic">POST</emphasis> method. The URL syntax and parameters are
        described in detail in the following table.</para>
      <table frame="all">
        <title>Items content parameters</title>
        <tgroup cols="3">
          <colspec colnum="1" colname="c1" colwidth="1*"/>
          <colspec colnum="2" colname="c2" colwidth="2.32*"/>
          <colspec colnum="3" colname="c3" colwidth="1.86*"/>
          <thead>
            <row>
              <entry>Query parameter</entry>
              <entry>Description</entry>
              <entry>Options</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>type</entry>
              <entry>Type of the resource to be represented by the dashboard item</entry>
              <entry>chart | map | reportTable | users | reports | reportTables | resources | patientTabularReports</entry>
            </row>
            <row>
              <entry>id</entry>
              <entry>Identifier of the resource to be represented by the dashboard item</entry>
              <entry>Resource identifier</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>A <emphasis role="italic">POST</emphasis> request URL for adding a chart to a specific
        dashboard could look like this, where the last id query parameter value is the chart
        resource identifier:</para>
      <screen>/api/dashboards/vQFhmLJU5sK/items/content?type=chart&amp;id=LW0O27b7TdD</screen>
      <para>When adding resource of type map, chart and report table, the API will create and add a
        new item to the dashboard. When adding a resource of type users, reports, report tables and
        resources, the API will try to add the resource to an existing dashboard item of the same
        type. If no item of same type or no item of same type with less than eight resources
        associated with it exists, the API will create a new dashboard item and the resource to
        it.</para>
      <para>In order to move a dashboard item to a new position within the list of items in a
        dashboard, a consumer can make a <emphasis role="italic">POST</emphasis> request to the
        following resource URL, where &lt;dashboard-id&gt; should be replaced by the identifier of the
        dashboard, &lt;item-id&gt; should be replaced by the identifier of the dashboard item and
        &lt;index&gt; should be replaced by the new position of the item in the dashboard, where the
        index is
        zero-based:<screen>/api/dashboards/&lt;dashboard-id&gt;/items/&lt;item-id&gt;/position/&lt;index&gt;</screen></para>
      <para>To remove a dashboard item completely from a specific dashboard a consumer can make a
          <emphasis role="italic">DELETE</emphasis> request to the below resource URL, where
        &lt;dashboard-id&gt; should be replaced by the identifier of the dashboard and &lt;item-id&gt;
        should be replaced by the identifier of the dashboard item. The dashboard item identifiers
        can be retrieved through a GET request to the dashboard resource URL.</para>
      <screen>/api/dashboards/&lt;dashboard-id&gt;/items/&lt;item-id&gt;</screen>
      <para>To remove a specific content resource within a dashboard item a consumer can make a
          <emphasis role="italic">DELETE</emphasis> request to the below resource URL, where
        &lt;content-resource-id&gt; should be replaced by the identifier of a resource associated with
        the dasboard item; e.g. the identifier of a report or a user. For instance, this can be used
        to remove a single report from a dashboard item of type reports, as opposed to removing the
        dashboard item completely:</para>
      <screen>/api/dashboards/&lt;dashboard-id&gt;/items/&lt;item-id&gt;/content/&lt;content-resource-id&gt;</screen>
    </section>
  </section>
  <section>
    <title>Analytics</title>
    <para>To access analytical, aggregated data in DHIS 2 you can work with the <emphasis role="italic">analytics</emphasis> resource. The analytics resource is powerful as it lets
      you query and retrieve data aggregated along all available data dimensions. For instance, you
      can ask the analytics resource to provide the aggregated data values for a set of data
      elements, periods and organisation units. Also, you can retrieve the aggregated data for a
      combination of any number of dimensions based on data elements and organisation unit group
      sets.</para>
    <para>DHIS 2 features a multi-dimensional data model with several fixed and dynamic data
      dimensions. The fixed dimensions are the data element, period (time) and organisation unit
      dimension. You can dynamically add dimensions through categories, data element group sets and
      organisation unit group sets. The table below displays the available data dimensions in DHIS
      2. Each data dimension has a corresponding <emphasis role="italic">dimension identifier</emphasis>, and each dimension can have a set of <emphasis role="italic">dimension items</emphasis>:</para>
    <table frame="all">
      <title>Dimensions and dimension items</title>
      <tgroup cols="3">
        <colspec colnum="1" colname="c1" colwidth="3.17*"/>
        <colspec colnum="2" colname="c2" colwidth="1*"/>
        <colspec colnum="3" colname="newCol3" colwidth="4.03*"/>
        <thead>
          <row>
            <entry>Dimension</entry>
            <entry>Dimension id</entry>
            <entry>Dimension items</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>Data elements, indicators and data set reporting rates</entry>
            <entry>dx</entry>
            <entry>Data elements, indicators and data set identifiers</entry>
          </row>
          <row>
            <entry>Periods (time)</entry>
            <entry>pe</entry>
            <entry>ISO periods and relative periods, see &quot;date and period format&quot;</entry>
          </row>
          <row>
            <entry>Organisation unit hierarchy</entry>
            <entry>ou</entry>
            <entry>Organisation unit identifiers, and keywords USER_ORGUNIT, USER_ORGUNIT_CHILDREN, USER_ORGUNIT_GRANDCHILDREN, LEVEL-&lt;level&gt; and OU_GROUP-&lt;group-id&gt;</entry>
          </row>
          <row>
            <entry>Category option combinations</entry>
            <entry>co</entry>
            <entry>Not possible to define dimension items - all relevant items are returned</entry>
          </row>
          <row>
            <entry>Categories</entry>
            <entry>&lt;category id&gt;</entry>
            <entry>Category option identifiers (omit to get all items)</entry>
          </row>
          <row>
            <entry>Data element group sets</entry>
            <entry>&lt;group set id&gt;</entry>
            <entry>Data element group identifiers (omit to get all items)</entry>
          </row>
          <row>
            <entry>Organisation unit group sets</entry>
            <entry>&lt;group set id&gt;</entry>
            <entry>Organisation unit group identifiers (omit to get all items)</entry>
          </row>
          <row>
            <entry>Category option group sets</entry>
            <entry>&lt;group set id&gt;</entry>
            <entry>Category option group identifiers (omit to get all items)</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>It is not necessary to be aware of which objects are used for the various dynamic
      dimensions when designing analytics queries. You can get a complete list of dynamic dimensions
      by visiting this URL in the Web API:</para>
    <screen>api/dimensions</screen>
    <para>The base URL to the analytics resource is <emphasis role="italic">api/analytics</emphasis>. To request specific dimensions and dimension items you can use a
      query string on the following format, where <emphasis role="italic">dim-id</emphasis> and
        <emphasis role="italic">dim-item</emphasis> should be substituted with real values:</para>
    <screen>api/analytics?dimension=dim-id:dim-item;dim-item&amp;dimension=dim-id:dim-item;dim-item</screen>
    <para>As illustrated above, the dimension identifier is followed by a colon while the dimension
      items are separated by semi-colons. As an example, a query for two data elements, two periods
      and two organisation units can be done with the following URL:</para>
    <screen>api/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
&amp;dimension=pe:2014Q1;2014Q2
&amp;dimension=ou:O6uvpzGd5pu;lc3eMKXaEfw</screen>
    <para>To query for data broken down by category option combinations instead of data element
      totals you can include the category dimension in the query string, for instance like
      this:</para>
    <screen>api/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
&amp;dimension=co&amp;dimension=pe:201401
&amp;dimension=ou:O6uvpzGd5pu;lc3eMKXaEfw</screen>
    <para>To query for organisation unit group sets and data elements you can use the following URL
      - notice how the group set identifier is used as dimension identifier and the groups as
      dimension items:</para>
    <screen>api/analytics?dimension=Bpx0589u8y0:oRVt7g429ZO;MAs88nJc9nL
&amp;dimension=pe:2014&amp;dimension=ou:ImspTQPwCqd</screen>
    <para>To query for data elements and categories you can use this URL - use the category
      identifier as dimension identifier and the category options as dimension items:</para>
    <screen>api/analytics?dimension=dx:s46m5MS0hxu;fClA2Erf6IO
&amp;dimension=pe:2014
&amp;dimension=YNZyaJHiHYq:btOyqprQ9e8;GEqzEKCHoGA
&amp;filter=ou:ImspTQPwCqd</screen>
    <para>To query using relative periods and organisation units associated with the current user
      you can use a URL like this:</para>
    <screen>api/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
&amp;dimension=pe:LAST_12_MONTHS&amp;dimension=ou:USER_ORGUNIT</screen>
    <para>When selecting organisation units for a dimension you can select an entire level
      optionally constrained by any number of boundary organisation units with the LEVEL-&lt;level&gt;
      syntax. Boundary refers to a top node in a sub-hierarchy, meaning that all organisation units
      at the given level below the given boundary organisation unit in the hierarchy will be
      included in the response, and is provided as regular organisation unit dimension items:</para>
    <screen>api/analytics?dimension=dx:fbfJHSPpUQD&amp;dimension=pe:2014
&amp;dimension=ou:LEVEL-3</screen>
    <screen>api/analytics?dimension=dx:fbfJHSPpUQD&amp;dimension=pe:2014
&amp;dimension=ou:LEVEL-3;LEVEL-4;O6uvpzGd5pu;lc3eMKXaEf</screen>
    <para>When selecting organisation units you can also select all organisation units in an
      organisation unit group to be included as dimension items using the OU_GROUP-&lt;id&gt; syntax.
      The organisation units in the groups can optionally be constrained by any number of boundary
      organisation units. Both the level and the group items can be repeated any number of
      times:</para>
    <screen>api/analytics?dimension=dx:fbfJHSPpUQD&amp;dimension=pe:2014
&amp;dimension=ou:OU_GROUP-w0gFTTmsUcF;O6uvpzGd5pu</screen>
    <screen>api/analytics?dimension=dx:fbfJHSPpUQD&amp;dimension=pe:2014
&amp;dimension=ou:OU_GROUP-w0gFTTmsUcF;OU_GROUP-EYbopBOJWsW;
O6uvpzGd5pu;lc3eMKXaEf</screen>
    <para>A few things to be aware of when using the analytics resource are listed below.</para>
    <itemizedlist>
      <listitem>
        <para>Data elements, indicator and data sets are part of a common data dimension, identified
          as &quot;dx&quot;. This means that you can use any of data elements, indicators and data set
          identifiers together with the &quot;dx&quot; dimension identifier in a query.</para>
      </listitem>
      <listitem>
        <para>For the data element group set and organisation unit group set dimensions, all
          dimension items will be used in the query if no dimension items are given for the
          dimension.</para>
      </listitem>
      <listitem>
        <para>For the period dimension, the dimension items are ISO period identifiers and/or
          relative periods. Please refer to the section above called &quot;Date and period format&quot; for
          the period format and available relative periods.</para>
      </listitem>
      <listitem>
        <para>For the organisation unit dimension you can specify the items to be the organisation
          unit or sub-units of the organisation unit associated with the user currently
          authenticated for the request using they keys USER_ORGUNIT or USER_ORGUNIT_CHILDREN as
          items, respectively. You can also specify organisation unit identifiers directly, or a
          combination of both.</para>
      </listitem>
      <listitem>
        <para>For the organisation unit dimension you can specify the organisation hierarchy level
          and the boundary unit to use for the request on the format
          LEVEL-&lt;level&gt;-&lt;boundary-id&gt;; as an example LEVEL-3-ImspTQPwCqd implies all
          organisation units below the given boundary unit at level 3 in the hierarchy.</para>
      </listitem>
      <listitem>
        <para>For the organisation unit dimension the dimension items are the organisation units and
          their sub-hierarchy - data will be aggregated for all organisation units below the given
          organisation unit in the hierarchy.</para>
      </listitem>
      <listitem>
        <para>You cannot specify dimension items for the category option combination dimension.
          Instead the response will contain the items which are linked to the data values.</para>
      </listitem>
    </itemizedlist>
    <section>
      <title>Request query parameters</title>
      <para>The analytics resource lets you specify a range of query parameters:<table frame="all">
          <title>Query parameters</title>
          <tgroup cols="4">
            <colspec colnum="1" colname="c1" colwidth="1.75*"/>
            <colspec colnum="2" colname="newCol2" colwidth="1*"/>
            <colspec colnum="3" colname="c2" colwidth="4.5*"/>
            <colspec colnum="4" colname="c3" colwidth="2.7*"/>
            <thead>
              <row>
                <entry>Query parameter</entry>
                <entry>Required</entry>
                <entry>Description</entry>
                <entry>Options</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>dimension</entry>
                <entry>Yes</entry>
                <entry>Dimensions to be retrieved, repeated for each</entry>
                <entry>Any dimension</entry>
              </row>
              <row>
                <entry>filter</entry>
                <entry>No</entry>
                <entry>Filters to apply to the query, repeated for each</entry>
                <entry>Any dimension</entry>
              </row>
              <row>
                <entry>aggregationType</entry>
                <entry>No</entry>
                <entry>Aggregation type to use in the aggregation process</entry>
                <entry>SUM | AVERAGE_INT | AVERAGE_INT_DISAGGREGATION | AVERAGE_BOOL | COUNT | STDDEV | VARIANCE</entry>
              </row>
              <row>
                <entry>measureCriteria</entry>
                <entry>No</entry>
                <entry>Filters for the data/measures</entry>
                <entry>EQ | GT | GE | LT | LE</entry>
              </row>
              <row>
                <entry>skipMeta</entry>
                <entry>No</entry>
                <entry>Exclude the meta data part of response (improves performance)</entry>
                <entry>false | true</entry>
              </row>
              <row>
                <entry>skipRounding</entry>
                <entry>No</entry>
                <entry>Skip rounding of data values, i.e. provide full precision</entry>
                <entry>false | true</entry>
              </row>
              <row>
                <entry>hierarchyMeta</entry>
                <entry>No</entry>
                <entry>Include names of organisation unit ancestors and hierarchy paths of organisation units in the meta-data</entry>
                <entry>false | true</entry>
              </row>
              <row>
                <entry>ignoreLimit</entry>
                <entry>No</entry>
                <entry>Ignore limit on max 50 000 records in response - use with care</entry>
                <entry>false | true</entry>
              </row>
              <row>
                <entry>tableLayout</entry>
                <entry>No</entry>
                <entry>Use plain data source or table layout for response</entry>
                <entry>false | true</entry>
              </row>
              <row>
                <entry>hideEmptyRows</entry>
                <entry>No</entry>
                <entry>Hides empty rows in response, applicable when table layout is true</entry>
                <entry>false | true</entry>
              </row>
              <row>
                <entry>showHierarchy</entry>
                <entry>No</entry>
                <entry>Display full org unit hierarchy path together with org unit name</entry>
                <entry>false | true</entry>
              </row>
              <row>
                <entry>displayProperty</entry>
                <entry>No</entry>
                <entry>Property to display for meta-data</entry>
                <entry>NAME | SHORTNAME</entry>
              </row>
              <row>
                <entry>columns</entry>
                <entry>No</entry>
                <entry>Dimensions to use as columns for table layout</entry>
                <entry>Any dimension (must be query dimension)</entry>
              </row>
              <row>
                <entry>rows</entry>
                <entry>No</entry>
                <entry>Dimensions to use as rows for table layout</entry>
                <entry>Any dimension (must be query dimension)</entry>
              </row>
            </tbody>
          </tgroup>
        </table>The <emphasis role="italic">dimension</emphasis> query parameter defines which
        dimensions should be included in the analytics query. Any number of dimensions can be
        specified. The dimension parameter should be repeated for each dimension to include in the
        query response. The query response can potentially contain aggregated values for all
        combinations of the specified dimension items.</para>
      <para>The <emphasis role="italic">filter</emphasis> parameter defines which dimensions should be
        used as filters for the data retrieved in the analytics query. Any number of filters can be
        specified. The filter parameter should be repeated for each filter to use in the query. A
        filter differs from a dimension in that the filter dimensions will not be part of the query
        response content, and that the aggregated values in the response will be collapsed on the
        filter dimensions. In other words, the data in the response will be aggregated on the filter
        dimensions, but the filters will not be included as dimensions in the actual response. As an
        example, to query for certain data elements filtered by the periods and organisation units
        you can use the following URL:</para>
      <screen>api/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU&amp;filter=pe:2014Q1;2014Q2&amp;filter=ou:O6uvpzGd5pu;lc3eMKXaEfw</screen>
      <para>The <emphasis role="italic">aggregationType</emphasis> query parameter lets you define
        which aggregation operator should be used for the query. By default the aggregation operator
        defined for data elements included in the query will be used. If your query does not contain
        any data elements, but does include data element groups, the aggregation operator of the
        first data element in the first group will be used. The order of groups and data elements is
        undefined. This query parameter allows you to override the default and specify a specific
        aggregation operator. As an example you can set the aggregation operator to &quot;count&quot; with the
        following URL:</para>
      <screen>api/analytics?dimension=dx:fbfJHSPpUQD&amp;dimension=pe:2014Q1&amp;dimension=ou:O6uvpzGd5pu&amp;aggregationType=COUNT</screen>
      <para>The <emphasis role="italic">measureCriteria</emphasis> query parameter lets you filter out
      ranges of data records to return. You can instruct the system to return only records where the
      aggregated data value is equal, greater than, greater or equal, less than or less or equal to
      certain values. You can specify any number of criteria on the following format, where
        <emphasis role="italic">critieria</emphasis> and <emphasis role="italic">value</emphasis>
      should be substituted with real values:</para>
      <screen>api/analytics?measureCriteria=criteria:value;criteria:value</screen>
      <para>As an example, the following query will return only records where the data value is
        greater or equal to 6500 and less than 33000:</para>
      <screen>api/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
&amp;dimension=pe:2014&amp;dimension=ou:O6uvpzGd5pu;lc3eMKXaEfw
&amp;measureCriteria=GE:6500;LT:33000</screen>
      <para>In order to have the analytics resource generate the data in the shape of a ready-made
        table, you can provide the <emphasis role="italic">tableLayout</emphasis> parameter with
        true as value. Instead of generating a plain, normalized data source, the analytics resource
        will now generate the data in table layout. You can use the <emphasis role="italic">columns</emphasis> and <emphasis role="italic">rows</emphasis> parameters with dimension
        identifiers separated by semi-colons as values to indicate which ones to use as table
        columns and rows. The column and rows dimensions must be present as a data dimension in the
        query (not a filter). Such a request can look like this:</para>
      <screen>api/analytics.html?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
&amp;dimension=pe:2014Q1;2014Q2&amp;dimension=ou:O6uvpzGd5pu
&amp;tableLayout=true&amp;columns=dx;ou&amp;rows=pe</screen>
    </section>
    <section>
      <title>Response formats</title>
      <para>The analytics response containing aggregate data can be returned in various
        representation formats. As usual, you can indicate interest in a specific format by
        appending a file extension to the URL, through the <emphasis role="italic">Accept</emphasis>
        HTTP header or through the <emphasis role="italic">format</emphasis> query parameter. The
        default format is JSON. The available formats and content-types are listed below.</para>
      <itemizedlist>
        <listitem>
          <para>json (application/json)</para>
        </listitem>
        <listitem>
          <para>jsonp (application/javascript)</para>
        </listitem>
        <listitem>
          <para>xml (application/xml)</para>
        </listitem>
        <listitem>
          <para>csv (application/csv)</para>
        </listitem>
        <listitem>
          <para>html (text/html)</para>
        </listitem>
        <listitem>
          <para>html+css</para>
        </listitem>
        <listitem>
          <para>xls (application/vnd.ms-excel)</para>
        </listitem>
      </itemizedlist>
      <para>As an example, to request an analytics response in XML format you can use the following
        URL:</para>
      <screen>api/analytics.xml?dimension=dx:fbfJHSPpUQD
&amp;dimension=pe:2014&amp;dimension=ou:O6uvpzGd5pu;lc3eMKXaEfw</screen>
      <para>The analytics responses must be retrieved using the HTTP <emphasis role="italic">GET</emphasis> method. This allows for direct linking to analytics responses from Web
        pages as well as other HTTP-enabled clients. To do functional testing we can use the cURL
        library. By executing this command against the demo database you will get an analytics
        response in JSON format:</para>
      <screen>curl &quot;apps.dhis2.org/demo/api/analytics.json?dimension=dx:eTDtyyaSA7f;FbKK4ofIv5R&amp;dimension=pe:2014Q1;2014Q2&amp;filter=ou:ImspTQPwCqd&quot; -u admin:district</screen>
      <para>The JSON response will look like this:</para>
      <screen>{
    &quot;headers&quot;: [
        {
            &quot;name&quot;: &quot;dx&quot;,
            &quot;column&quot;: &quot;Data&quot;,
            &quot;meta&quot;: true,
            &quot;type&quot;: &quot;java.lang.String&quot;
        },
        {
            &quot;name&quot;: &quot;pe&quot;,
            &quot;column&quot;: &quot;Period&quot;,
            &quot;meta&quot;: true,
            &quot;type&quot;: &quot;java.lang.String&quot;
        },
        {
            &quot;name&quot;: &quot;value&quot;,
            &quot;column&quot;: &quot;Value&quot;,
            &quot;meta&quot;: false,
            &quot;type&quot;: &quot;java.lang.Double&quot;
        }
    ],
    &quot;height&quot;: 4,
    &quot;metaData&quot;: {
        &quot;pe&quot;: [
            &quot;2014Q1&quot;,
            &quot;2014Q2&quot;
        ],
        &quot;ou&quot;: [
            &quot;ImspTQPwCqd&quot;
        ],
        &quot;names&quot;: {
            &quot;2014Q1&quot;: &quot;Jan to Mar 2014&quot;,
            &quot;2014Q2&quot;: &quot;Apr to Jun 2014&quot;,
            &quot;FbKK4ofIv5R&quot;: &quot;Measles Coverage &lt;1 y&quot;,
            &quot;ImspTQPwCqd&quot;: &quot;Sierra Leone&quot;,
            &quot;eTDtyyaSA7f&quot;: &quot;Fully Immunized Coverage&quot;
        }
    },
    &quot;rows&quot;: [
        [
            &quot;eTDtyyaSA7f&quot;,
            &quot;2014Q2&quot;,
            &quot;81.1&quot;
        ],
        [
            &quot;eTDtyyaSA7f&quot;,
            &quot;2014Q1&quot;,
            &quot;74.7&quot;
        ],
        [
            &quot;FbKK4ofIv5R&quot;,
            &quot;2014Q2&quot;,
            &quot;88.9&quot;
        ],
        [
            &quot;FbKK4ofIv5R&quot;,
            &quot;2014Q1&quot;,
            &quot;84.0&quot;
        ]
    ],
    &quot;width&quot;: 3
}
</screen>
      <para>The response represents a table of dimensional data. The <emphasis role="italic">headers</emphasis> array gives an overview of which columns are included in the table and
        what the columns contain. The <emphasis role="italic">column</emphasis> property shows the
        column dimension identifier, or if the column contains measures, the word &quot;Value&quot;. The
          <emphasis role="italic">meta</emphasis> property is <emphasis role="italic">true</emphasis> if the column contains dimension items or <emphasis role="italic">false</emphasis> if the column contains a measure (aggregated data values). The <emphasis role="italic">name</emphasis> property is similar to the column property, except it
        displays &quot;value&quot; in case the column contains a measure. The <emphasis role="italic">type</emphasis> property indicates the Java class type of the column values.</para>
      <para>The <emphasis role="italic">height</emphasis> and <emphasis role="italic">width</emphasis> properties indicate how many data columns and rows are contained in the
        response, respectively.</para>
      <para>The <emphasis role="italic">metaData periods</emphasis> property contains a unique,
        ordered array of the periods included in the response. The <emphasis role="italic">metaData ou</emphasis> property contains an array of the identifiers of organisation units included
        in the response. The <emphasis role="italic">metaData names</emphasis> property contains a
        mapping between the identifiers used in the data response and the names of the objects they
        represent. It can be used by clients to substitute the identifiers within the data response
        with names in order to give a more meaningful view of the data table.</para>
      <para>The <emphasis role="italic">rows</emphasis> array contains the dimensional data table.
        It contains columns with dimension items (object or period identifiers) and a column with
        aggregated data values. The example response above has a data/indicator column, a period
        column and a value column. The first column contains indicator identifiers, the second
        contains ISO period identifiers and the third contains aggregeted data values.</para>
    </section>
    <section>
      <title>Constraints</title>
      <para>There are several constraints on the input you can provide to the analytics
        resource.</para>
      <itemizedlist>
        <listitem>
          <para>At least one dimension must be specified in a query.</para>
        </listitem>
        <listitem>
          <para>Dimensions cannot be specified as dimension and filter simultaneously.</para>
        </listitem>
        <listitem>
          <para>At least one period must be specified as dimension or filter.</para>
        </listitem>
        <listitem>
          <para>Indicators, data sets and categories cannot be specified as filters.</para>
        </listitem>
        <listitem>
          <para>Data element group sets cannot be specified together with data sets.</para>
        </listitem>
        <listitem>
          <para>Categories can only be specified together with data elements, not indicators or data
            sets.</para>
        </listitem>
        <listitem>
          <para>A dimension cannot be specified more than once.</para>
        </listitem>
        <listitem>
          <para>Fixed dimensions (&quot;dx&quot;, &quot;pe&quot;, &quot;ou&quot;) must have at least one option if included in a
            query.</para>
        </listitem>
        <listitem>
          <para>A table cannot contain more than 50 000 cells by default, this can be configured
            under system settings.</para>
        </listitem>
      </itemizedlist>
      <para>When a query request violates any of these constraints the server will return a response
        with status code 409 and content-type &quot;text/plain&quot; together with a textual description of
        the problem.</para>
    </section>
  </section>
  <section>
    <title>Event analytics</title>
    <para>The event analytics API lets you query <emphasis role="italic">events</emphasis> captured
      in DHIS 2. This resource lets you retrieve events based on a program and optionally a program
      stage, and lets you retrieve and filter events on any event dimensions. Event dimensions
      include data elements, attributes, organisation units and periods. The query analytics
      resource will simply return events matching a set of criteria and does not perform any
      aggregation. The event dimensions are listed in the table below.</para>
    <table frame="all">
      <title>Event dimensions</title>
      <tgroup cols="3">
        <colspec colnum="1" colname="c1" colwidth="2.46*"/>
        <colspec colnum="2" colname="c2" colwidth="1*"/>
        <colspec colnum="3" colname="c3" colwidth="5.37*"/>
        <thead>
          <row>
            <entry>Dimension</entry>
            <entry>Dimension id</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>Data elements</entry>
            <entry>&lt;id&gt;</entry>
            <entry>Data element identifiers</entry>
          </row>
          <row>
            <entry>Attributes</entry>
            <entry>&lt;id&gt;</entry>
            <entry>Attribute identifiers</entry>
          </row>
          <row>
            <entry>Periods</entry>
            <entry>pe</entry>
            <entry>ISO periods and relative periods, see &quot;date and period format&quot;</entry>
          </row>
          <row>
            <entry>Organisation units</entry>
            <entry>ou</entry>
            <entry>Organisation unit identifiers</entry>
          </row>
          <row>
            <entry>Organisation unit group sets</entry>
            <entry>&lt;id&gt;</entry>
            <entry>Organisation unit group set identifiers</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <section>
      <title>Request query parameters</title>
      <para>The analytics event API let you specify a range of query parameters.</para>
      <table frame="all">
        <title>Query parameters for both event query and aggregate analytics</title>
        <tgroup cols="4">
          <colspec colnum="1" colname="c1" colwidth="1.8*"/>
          <colspec colnum="2" colname="c2" colwidth="1*"/>
          <colspec colnum="3" colname="c3" colwidth="4.3*"/>
          <colspec colnum="4" colname="c4" colwidth="1.7*"/>
          <thead>
            <row>
              <entry>Query parameter</entry>
              <entry>Required</entry>
              <entry>Description</entry>
              <entry>Options</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>program</entry>
              <entry>Yes</entry>
              <entry>Program identifier.</entry>
              <entry>Any program identifier</entry>
            </row>
            <row>
              <entry>stage</entry>
              <entry>No</entry>
              <entry>Program stage identifier.</entry>
              <entry>Any program stage identifier</entry>
            </row>
            <row>
              <entry>startDate</entry>
              <entry>Yes</entry>
              <entry>Start date for events.</entry>
              <entry>Date in yyyy-MM-dd format</entry>
            </row>
            <row>
              <entry>endDate</entry>
              <entry>Yes</entry>
              <entry>End date for events.</entry>
              <entry>Date in yyyy-MM-dd format</entry>
            </row>
            <row>
              <entry>dimension</entry>
              <entry>Yes</entry>
              <entry>Dimension identifier including data elements, attributes, periods, organisation units and organisation unit group sets. Parameter can be repeated any number of times. Item filters can be applied to a dimension on the format &lt;item-id&gt;:&lt;operator&gt;:&lt;filter&gt;. Filter values are case-insensitive.</entry>
              <entry>Operators can be EQ | GT | GE | LT | LE | NE | LIKE | IN</entry>
            </row>
            <row>
              <entry>filter</entry>
              <entry>No</entry>
              <entry>Dimension identifier including data elements, attributes, periods, organisation units and organisation unit group sets. Parameter can be repeated any number of times. Item filters can be applied to a dimension on the format &lt;item-id&gt;:&lt;operator&gt;:&lt;filter&gt;. Filter values are case-insensitive.</entry>
              <entry/>
            </row>
            <row>
              <entry>hierarchyMeta</entry>
              <entry>No</entry>
              <entry>Include names of organisation unit ancestors and hierarchy paths of organisation units in the meta-data</entry>
              <entry>false | true</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table frame="all">
        <title>Query parameters for event query analytics only</title>
        <tgroup cols="4">
          <colspec colnum="1" colname="c1" colwidth="1.8*"/>
          <colspec colnum="2" colname="c2" colwidth="1*"/>
          <colspec colnum="3" colname="c3" colwidth="4.3*"/>
          <colspec colnum="4" colname="c4" colwidth="1.7*"/>
          <thead>
            <row>
              <entry>Query parameter</entry>
              <entry>Required</entry>
              <entry>Description</entry>
              <entry>Options</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>ouMode</entry>
              <entry>No</entry>
              <entry>The mode of selecting organisation units. Default is DESCENDANTS, meaning all sub units in the hierarchy. CHILDREN refers to immediate children in the hierarchy; SELECTED refers to the selected organisation units only.</entry>
              <entry>DESCENDANTS, CHILDREN, SELECTED</entry>
            </row>
            <row>
              <entry>asc</entry>
              <entry>No</entry>
              <entry>Dimensions to be sorted ascending, can reference event date, org unit name and code and any item identifiers.</entry>
              <entry>EVENTDATE | OUNAME | OUCODE | item identifier</entry>
            </row>
            <row>
              <entry>desc</entry>
              <entry>No</entry>
              <entry>Dimensions to be sorted descending, can reference event date, org unit name and code and any item identifiers.</entry>
              <entry>EVENTDATE | OUNAME | OUCODE | item identifier</entry>
            </row>
            <row>
              <entry>coordinatesOnly</entry>
              <entry>No</entry>
              <entry>Whether to only return events which have coordinates</entry>
              <entry>false | true</entry>
            </row>
            <row>
              <entry>page</entry>
              <entry>No</entry>
              <entry>The page number. Default page is 1.</entry>
              <entry>Numeric positive value</entry>
            </row>
            <row>
              <entry>pageSize</entry>
              <entry>No</entry>
              <entry>The page size. Default size is 50 items per page.</entry>
              <entry>Numeric zero or positive value</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table frame="all">
        <title>Query parameters for aggregate event analytics only</title>
        <tgroup cols="4">
          <colspec colnum="1" colname="c1" colwidth="1.8*"/>
          <colspec colnum="2" colname="c2" colwidth="1*"/>
          <colspec colnum="3" colname="c3" colwidth="4.3*"/>
          <colspec colnum="4" colname="c4" colwidth="1.7*"/>
          <thead>
            <row>
              <entry>Query parameter</entry>
              <entry>Required</entry>
              <entry>Description</entry>
              <entry>Options</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>displayProperty</entry>
              <entry>No</entry>
              <entry>Property to display for meta-data.</entry>
              <entry>NAME | SHORTNAME</entry>
            </row>
            <row>
              <entry>sortOrder</entry>
              <entry>No</entry>
              <entry>Sort the records on the value column in ascending or descending order.</entry>
              <entry>ASC | DESC</entry>
            </row>
            <row>
              <entry>limit</entry>
              <entry>No</entry>
              <entry>The maximum number of records to return. Cannot be larger than 10 000.</entry>
              <entry>Numeric positive value</entry>
            </row>
            <row>
              <entry>uniqueInstances</entry>
              <entry>No</entry>
              <entry>Returns number of distinct tracked entity instances in the events, as opposed to number of events. Applies to programs with registration only.</entry>
              <entry>false | true</entry>
            </row>
            <row>
              <entry>skipMeta</entry>
              <entry>No</entry>
              <entry>Exclude the meta data part of response (improves performance)</entry>
              <entry>false | true</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section>
      <title>Event query analytics</title>
      <para>The <emphasis role="italic">events/query</emphasis> resource lets you query for captured
        events. This resource does not perform any aggregation, rather it lets you query and filter
        for information about events. You can specify any number of dimensions and any number of
        filters in a query. Dimension item identifiers can refer to any of data elements, person
        attributes, person identifiers, fixed and relative periods and organisation units.
        Dimensions can optionally have a query operator and a filter. Event queries should be on the
        format described below.</para>
      <screen>api/analytics/events/query/&lt;program-id&gt;?startDate=yyyy-MM-dd
&amp;endDate=yyyy-MM-dd&amp;dimension=ou:&lt;ou-id&gt;;&lt;ou-id&gt;
&amp;dimension=&lt;item-id&gt;&amp;dimension=&lt;item-id&gt;:&lt;operator&gt;:&lt;filter&gt;</screen>
      <para>For example, to retrieve events from the &quot;Inpatient morbidity and mortality&quot;
        program between January and October 2014, where the &quot;Gender&quot; and &quot;Age&quot;
        data elements are included and the &quot;Age&quot; dimension is filtered on &quot;18&quot;,
        you can use the following query:</para>
      <screen>api/analytics/events/query/eBAyeGv0exc?startDate=2014-01-01
&amp;endDate=2014-10-31&amp;dimension=ou:O6uvpzGd5pu;fdc6uOvgoji
&amp;dimension=oZg33kd9taw&amp;dimension=qrur9Dvnyt5:EQ:18</screen>
      <para>To retrieve events for the &quot;Birth&quot; program stage of the &quot;Child
        programme&quot; program between March and December 2014, where the &quot;Weight&quot; data
        element, filtered for values larger than 2000:</para>
      <screen>api/analytics/events/query/IpHINAT79UW?stage=A03MvHHogjR
&amp;startDate=2014-03-01&amp;endDate=2014-12-31
&amp;dimension=ou:O6uvpzGd5pu&amp;dimension=UXz7xuGCEhU:GT:2000</screen>
      <para>Sorting can be applied to the query for the event date of the event and any dimensions.
        To sort descending on the event date and ascending on the &quot;Age&quot; data element dimension you
        can use:</para>
      <screen>api/analytics/events/query/eBAyeGv0exc?startDate=2014-01-01
&amp;endDate=2014-10-31&amp;dimension=ou:O6uvpzGd5pu
&amp;dimension=qrur9Dvnyt5&amp;desc=EVENTDATE&amp;asc=qrur9Dvnyt5</screen>
      <para>Paging can be applied to the query by specifying the page number and the page size
        parameters. If page number is specified but page size is not, a page size of 50 will be
        used. If page size is specified but page number is not, a page number of 1 will be used. To
        get the third page of the response with a page size of 20 you can use a query like
        this:</para>
      <screen>api/analytics/events/query/eBAyeGv0exc?startDate=2014-01-01
&amp;endDate=2014-10-31&amp;dimension=ou:O6uvpzGd5pu
&amp;dimension=qrur9Dvnyt5&amp;page=3&amp;pageSize=20</screen>
      <section>
        <title>Filtering</title>
        <para>Filters can be applied to data elements, person attributes and person identifiers. The
        filtering is done through the query parameter value on the following format:</para>
        <screen>&amp;dimension=&lt;item-id&gt;:&lt;operator&gt;:&lt;filter-value&gt;</screen>
        <para>As an example, you can filter the &quot;Weight&quot; data element for values greater than 2000 and
        lower than 4000 like this:</para>
        <screen>&amp;dimension=UXz7xuGCEhU:GT:2000&amp;dimension=UXz7xuGCEhU:LT:4000</screen>
        <para>You can filter the &quot;Age&quot; data element for multiple, specific ages using the IN operator
          like this:<screen>&amp;dimension=qrur9Dvnyt5:IN:18;19;20</screen></para>
        <para>You can specify multiple filters for a given item by repeating the operator and filter
          components:</para>
        <screen>&amp;dimension=qrur9Dvnyt5:GT:5;LT;15</screen>
        <para>The available operators are listed below.</para>
        <table frame="all">
          <title>Filter operators</title>
          <tgroup cols="2">
            <colspec colnum="1" colname="c1" colwidth="87.75pt"/>
            <colspec colnum="2" colname="c2" colwidth="368.25pt"/>
            <thead>
              <row>
                <entry>Operator</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>EQ</entry>
                <entry>Equal to</entry>
              </row>
              <row>
                <entry>GT</entry>
                <entry>Greater than</entry>
              </row>
              <row>
                <entry>GE</entry>
                <entry>Greater than or equal to</entry>
              </row>
              <row>
                <entry>LT</entry>
                <entry>Less than</entry>
              </row>
              <row>
                <entry>LE</entry>
                <entry>Less than or equal to</entry>
              </row>
              <row>
                <entry>NE</entry>
                <entry>Not equal to</entry>
              </row>
              <row>
                <entry>LIKE</entry>
                <entry>Like (free text match)</entry>
              </row>
              <row>
                <entry>IN</entry>
                <entry>Equal to one of multiple values separated by &quot;;&quot;</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
      <section>
        <title>Response formats</title>
        <para>The default response representation format is JSON. The requests must be using the HTTP
          <emphasis role="italic">GET</emphasis> method. The following response formats are
        supported.</para>
        <itemizedlist>
          <listitem>
            <para>json (application/json)</para>
          </listitem>
          <listitem>
            <para>jsonp (application/javascript)</para>
          </listitem>
          <listitem>
            <para>xls (application/vnd.ms-excel)</para>
          </listitem>
        </itemizedlist>
        <para>As an example, to get a response in Excel format you can use a file extension in the
        request URL like this:</para>
        <screen>api/analytics/events/query/eBAyeGv0exc.xls?
startDate=2014-01-01&amp;endDate=2014-10-31
&amp;dimension=ou:O6uvpzGd5pu&amp;dimension=oZg33kd9taw
&amp;dimension=qrur9Dvnyt5</screen>
        <para>You can set the hierarchyMeta query parameter to true in order to include names of all
          ancestor organisation units in the meta-section of the response:</para>
        <screen>api/analytics/events/query/eBAyeGv0exc?startDate=2014-01-01
&amp;endDate=2014-10-31&amp;dimension=ou:YuQRtpLP10I
&amp;dimension=qrur9Dvnyt5:EQ:50&amp;hierarchyMeta=true</screen>
        <para>The default response JSON format will look similar to this:</para>
        <screen>{
    &quot;headers&quot;: [
    {
        &quot;name&quot;: &quot;psi&quot;,
        &quot;column&quot;: &quot;Event&quot;,
        &quot;type&quot;: &quot;java.lang.String&quot;,
        &quot;hidden&quot;: false,
        &quot;meta&quot;: false
    },
    {
        &quot;name&quot;: &quot;ps&quot;,
        &quot;column&quot;: &quot;Program stage&quot;,
        &quot;type&quot;: &quot;java.lang.String&quot;,
        &quot;hidden&quot;: false,
        &quot;meta&quot;: false
    },
    {
        &quot;name&quot;: &quot;eventdate&quot;,
        &quot;column&quot;: &quot;Event date&quot;,
        &quot;type&quot;: &quot;java.lang.String&quot;,
        &quot;hidden&quot;: false,
        &quot;meta&quot;: false
    },
    {
        &quot;name&quot;: &quot;coordinates&quot;,
        &quot;column&quot;: &quot;Coordinates&quot;,
        &quot;type&quot;: &quot;java.lang.String&quot;,
        &quot;hidden&quot;: false,
        &quot;meta&quot;: false
    },
    {
        &quot;name&quot;: &quot;ouname&quot;,
        &quot;column&quot;: &quot;Organisation unit name&quot;,
        &quot;type&quot;: &quot;java.lang.String&quot;,
        &quot;hidden&quot;: false,
        &quot;meta&quot;: false
    },
    {
        &quot;name&quot;: &quot;oucode&quot;,
        &quot;column&quot;: &quot;Organisation unit code&quot;,
        &quot;type&quot;: &quot;java.lang.String&quot;,
        &quot;hidden&quot;: false,
        &quot;meta&quot;: false
    },
    {
        &quot;name&quot;: &quot;ou&quot;,
        &quot;column&quot;: &quot;Organisation unit&quot;,
        &quot;type&quot;: &quot;java.lang.String&quot;,
        &quot;hidden&quot;: false,
        &quot;meta&quot;: false
    },
    {
        &quot;name&quot;: &quot;oZg33kd9taw&quot;,
        &quot;column&quot;: &quot;Gender&quot;,
        &quot;type&quot;: &quot;java.lang.String&quot;,
        &quot;hidden&quot;: false,
        &quot;meta&quot;: false
    },
    {
        &quot;name&quot;: &quot;qrur9Dvnyt5&quot;,
        &quot;column&quot;: &quot;Age&quot;,
        &quot;type&quot;: &quot;java.lang.String&quot;,
        &quot;hidden&quot;: false,
        &quot;meta&quot;: false
    } ],
    &quot;metaData&quot;: {
        &quot;names&quot;: {
            &quot;qrur9Dvnyt5&quot;: &quot;Age&quot;,
            &quot;eBAyeGv0exc&quot;: &quot;Inpatient morbidity and mortality&quot;,
            &quot;ImspTQPwCqd&quot;:&#160;&quot;Sierra Leone&quot;,
            &quot;O6uvpzGd5pu&quot;:&#160;&quot;Bo&quot;,
            &quot;YuQRtpLP10I&quot;: &quot;Badjia&quot;,
            &quot;oZg33kd9taw&quot;: &quot;Gender&quot;
        },
        &quot;ouHierarchy&quot;: {
            &quot;YuQRtpLP10I&quot;: &quot;/ImspTQPwCqd/O6uvpzGd5pu&quot;
        },
    },
    &quot;width&quot;: 8,
    &quot;height&quot;: 25,
    &quot;rows&quot;: [
        [&quot;yx9IDINf82o&quot;, &quot;Zj7UnCAulEk&quot;, &quot;2014-08-05&quot;, &quot;[5.12, 1.23]&quot;, &quot;Ngelehun CHC&quot;, &quot;OU_559&quot;, &quot;YuQRtpLP10I&quot;, &quot;Female&quot;, &quot;50&quot;],
        [&quot;IPNa7AsCyFt&quot;, &quot;Zj7UnCAulEk&quot;, &quot;2014-06-12&quot;, &quot;[5.22, 1.43]&quot;, &quot;Ngelehun CHC&quot;, &quot;OU_559&quot;, &quot;YuQRtpLP10I&quot;, &quot;Female&quot;, &quot;50&quot;],
        [&quot;ZY9JL9dkhD2&quot;, &quot;Zj7UnCAulEk&quot;, &quot;2014-06-15&quot;, &quot;[5.42, 1.33]&quot;, &quot;Ngelehun CHC&quot;, &quot;OU_559&quot;, &quot;YuQRtpLP10I&quot;, &quot;Female&quot;, &quot;50&quot;],
        [&quot;MYvh4WAUdWt&quot;, &quot;Zj7UnCAulEk&quot;, &quot;2014-06-16&quot;, &quot;[5.32, 1.53]&quot;, &quot;Ngelehun CHC&quot;, &quot;OU_559&quot;, &quot;YuQRtpLP10I&quot;, &quot;Female&quot;, &quot;50&quot;]
    ]
}</screen>
        <para>The <emphasis role="italic">headers</emphasis> section of the response describes the
          content of the query result. The event unique identifier, the program stage identifier,
          the event date, the organisation unit name, the organisation unit code and the
          organisation unit identifier appear as the first six dimensions in the response and will
          always be present. Next comes the data elements, person attributes and person identifiers
          which were specified as dimensions in the request, in this case the &quot;Gender&quot; and &quot;Age&quot;
          data element dimensions. The header section contains the identifier of the dimension item
          in the &quot;name&quot; property and a readable dimension description in the &quot;column&quot;
          property.</para>
        <para>The <emphasis role="italic">metaData</emphasis> section, <emphasis role="italic">ou</emphasis> object contains the identifiers of all organisation units present in the
          response mapped to a string representing the hierarchy. This hierarchy string lists the
          identifiers of the ancestors (parents) of the organistion unit starting from the root. The
            <emphasis role="italic">names</emphasis> object contains the identifiers of all items in
          the response mapped to their names.</para>
        <para>The <emphasis role="italic">rows</emphasis> section contains the events produced by the
          query. Each row represents exactly one event.</para>
      </section>
    </section>
    <section>
      <title>Event aggregate analytics</title>
      <para>In order to get <emphasis role="italic">aggregated numbers</emphasis> of events captured
        in DHIS 2 you can work with the <emphasis role="italic">analytics/events/aggregate</emphasis> resource. This resource lets you retrieve aggregate
        data based on a program and optionally a program stage, and lets you filter on any event
        dimension. In other words, it does not return the event information itself, rather the
        aggregate numbers of events matching the request query. Event dimensions include data
        elements, person attributes, person identifiers, periods and organisation units.</para>
      <para>Aggregate event queries should be on the format described below.</para>
      <screen>api/analytics/events/aggregate/&lt;program-id&gt;?startDate=yyyy-MM-dd&amp;endDate=yyyy-MM-dd&amp;dimension=ou:&lt;ou-id&gt;;&lt;ou-id&gt;&amp;dimension=&lt;item-id&gt;&amp;dimension=&lt;item-id&gt;:&lt;operator&gt;:&lt;filter&gt;</screen>
      <para>For example, to retrieve aggregate numbers for events from the &quot;Inpatient morbidity
        and mortality&quot; program between January and October 2014, where the &quot;Gender&quot;
        and &quot;Age&quot; data elements are included, the &quot;Age&quot; dimension item is
        filtered on &quot;18&quot; and the &quot;Gender&quot; item is filtered on
        &quot;Female&quot;, you can use the following query:</para>
      <screen>api/analytics/events/aggregate/eBAyeGv0exc
?startDate=2014-01-01&amp;endDate=2014-10-31
&amp;dimension=ou:O6uvpzGd5pu&amp;dimension=oZg33kd9taw:EQ:Female
&amp;dimension=qrur9Dvnyt5:GT:50</screen>
      <para>To retrieve data for fixed and relative periods instead of start and end date, in this
        case May 2014 and last 12 months, and the organisation unit associated with the current
        user, you can use the following query:</para>
      <screen>api/analytics/events/aggregate/eBAyeGv0exc
?dimension=pe:201405;LAST_12_MONTHS
&amp;dimension=ou:USER_ORGUNIT;fdc6uOvgo7ji
&amp;dimension=oZg33kd9taw</screen>
      <para>In order to specify &quot;Female&quot; as a filter for &quot;Gender&quot; for the data response, meaning
        &quot;Gender&quot; will not be part of the response but will filter the aggregate numbers in it, you
        can use the following syntax:</para>
      <screen>api/analytics/events/aggregate/eBAyeGv0exc
?dimension=pe:2014;&amp;dimension=ou:O6uvpzGd5pu
&amp;filter=oZg33kd9taw:EQ:Female</screen>
      <para>To specify the &quot;Bo&quot; organisation unit and the period &quot;2014&quot; as
        filters, and the &quot;Mode of discharge&quot; and Gender&quot; as dimensions, where
        &quot;Gender&quot; is filtered on the &quot;Male&quot; item, you can use a query like
        this:</para>
      <screen>api/analytics/events/aggregate/eBAyeGv0exc?filter=pe:2014&amp;filter=ou:O6uvpzGd5pu&amp;dimension=fWIAEtYVEGk
&amp;dimension=oZg33kd9taw:EQ:Male</screen>
      <para>To create a &quot;Top 3 report&quot; for &quot;Mode of discharge&quot; you can use the limit and sortOrder
        query parameters similar to this:</para>
      <screen>api/analytics/events/aggregate/eBAyeGv0exc
?filter=pe:2014&amp;filter=ou:O6uvpzGd5pu
&amp;dimension=fWIAEtYVEGk&amp;limit=3&amp;sortOrder=DESC</screen>
      <section>
        <title>Response formats</title>
        <para>The default response representation format is JSON. The requests must be using the HTTP
            <emphasis role="italic">GET</emphasis> method. The response will look similar to
          this:</para>
        <screen>{
    &quot;headers&quot;: [
        {
            &quot;name&quot;: &quot;oZg33kd9taw&quot;,
            &quot;column&quot;: &quot;Gender&quot;,
            &quot;type&quot;: &quot;java.lang.String&quot;,
            &quot;meta&quot;: false
        },
        {
            &quot;name&quot;: &quot;qrur9Dvnyt5&quot;,
            &quot;column&quot;: &quot;Age&quot;,
            &quot;type&quot;: &quot;java.lang.String&quot;,
            &quot;meta&quot;: false
        },
        {
            &quot;name&quot;: &quot;pe&quot;,
            &quot;column&quot;: &quot;Period&quot;,
            &quot;type&quot;: &quot;java.lang.String&quot;,
            &quot;meta&quot;: false
        },
        {
            &quot;name&quot;: &quot;ou&quot;,
            &quot;column&quot;: &quot;Organisation unit&quot;,
            &quot;type&quot;: &quot;java.lang.String&quot;,
            &quot;meta&quot;: false
        },
        {
            &quot;name&quot;: &quot;value&quot;,
            &quot;column&quot;: &quot;Value&quot;,
            &quot;type&quot;: &quot;java.lang.String&quot;,
            &quot;meta&quot;: false
        }
    ],
    &quot;metaData&quot;: {
        &quot;names&quot;: {
            &quot;eBAyeGv0exc&quot;: &quot;Inpatient morbidity and mortality&quot;
        }
    },
    &quot;width&quot;: 5,
    &quot;height&quot;: 39,
    &quot;rows&quot;: [
        [
            &quot;Female&quot;,
            &quot;95&quot;,
            &quot;201405&quot;,
            &quot;O6uvpzGd5pu&quot;,
            &quot;2&quot;
        ],
        [
            &quot;Female&quot;,
            &quot;63&quot;,
            &quot;201405&quot;,
            &quot;O6uvpzGd5pu&quot;,
            &quot;2&quot;
        ],
        [
            &quot;Female&quot;,
            &quot;67&quot;,
            &quot;201405&quot;,
            &quot;O6uvpzGd5pu&quot;,
            &quot;1&quot;
        ],
        [
            &quot;Female&quot;,
            &quot;71&quot;,
            &quot;201405&quot;,
            &quot;O6uvpzGd5pu&quot;,
            &quot;1&quot;
        ],
        [
            &quot;Female&quot;,
            &quot;75&quot;,
            &quot;201405&quot;,
            &quot;O6uvpzGd5pu&quot;,
            &quot;14&quot;
        ],
        [
            &quot;Female&quot;,
            &quot;73&quot;,
            &quot;201405&quot;,
            &quot;O6uvpzGd5pu&quot;,
            &quot;5&quot;
        ],
    ]
}</screen>
        <para>Note that the max limit for rows to return in a single response is 10 000. If the
          query produces more than the max limit, a <emphasis role="italic">409 Conflict</emphasis>
          status code will be returned.</para>
      </section>
    </section>
  </section>
  <section>
    <title>Geo features</title>
    <para>The <emphasis role="italic">geoFeatures</emphasis> resource lets you retrieve geospatial
      information from DHIS 2. Geo features are stored together with organisation units, and the
      syntax for retrieving features is identical to the syntax used for the organisation unit
      dimension for the analytics resource. It is recommended to read up on the analytics api
      resource before continuing reading this section. You must use the GET request type, and only
      JSON response format is supported.</para>
    <para>As an example, to retrieve geo features for all organisation units at level 3 in the
      organisation unit hierarchy you can use a GET request with the following URL:</para>
    <screen>api/geoFeatures.json?ou=ou:LEVEL-3</screen>
    <para>To retrieve geo features for organisation units at level within the boundary of an
      organisation unit (e.g. at level 2) you can use this URL:</para>
    <screen>api/geoFeatures.json?ou=ou:LEVEL-4;O6uvpzGd5pu</screen>
    <para>The semantics of the response properties are described in the following table.</para>
    <table frame="all">
      <title>Geo features response</title>
      <tgroup cols="2">
        <colspec colnum="1" colname="c1" colwidth="1*"/>
        <colspec colnum="2" colname="c2" colwidth="5.67*"/>
        <thead>
          <row>
            <entry>Property</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>id</entry>
            <entry>Organisation unit / geo feature identifier</entry>
          </row>
          <row>
            <entry>na</entry>
            <entry>Organisation unit / geo feature name</entry>
          </row>
          <row>
            <entry>hcd</entry>
            <entry>Has coordinates down, indicating whether one or more children organisation units exist with coordinates (below in the hierarchy)</entry>
          </row>
          <row>
            <entry>hcu</entry>
            <entry>Has coordinates up, indicating whether the parent organisation unit has coordinates (above in the hierarchy)</entry>
          </row>
          <row>
            <entry>le</entry>
            <entry>Level of this organisation unit / geo feature.</entry>
          </row>
          <row>
            <entry>pg</entry>
            <entry>Parent graph, the graph of parent organisation unit identifiers up to the root in the hierarchy</entry>
          </row>
          <row>
            <entry>pi</entry>
            <entry>Parent identifier, the identifier of the parent of this organisation unit</entry>
          </row>
          <row>
            <entry>pn</entry>
            <entry>Parent name, the name of the parent of this organisation unit</entry>
          </row>
          <row>
            <entry>ty</entry>
            <entry>Geo feature type, 1 = point and 2 = polygon or multi-polygon</entry>
          </row>
          <row>
            <entry>co</entry>
            <entry>Coordinates of this geo feature</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <section>
      <title>GeoJSON</title>
      <para>Support for GeoJSON output was added in 2.17, to export GeoJSON, you can simple add
          <emphasis role="italic">.geosjon</emphasis> as an extension to the endpoint <emphasis
          role="italic">/api/organisationUnits</emphasis>, or you can use the <emphasis
          role="italic">Accept</emphasis> header <emphasis role="italic"
          >application/json+geojson</emphasis>.</para>
      <para>Two parameters are supported <emphasis role="bold">level</emphasis> (defaults to 1) and
          <emphasis role="bold">parent</emphasis> (defaults to root organisation units), both can be
        added multiple times, some examples follow.</para>
      <para>Get all features at level 2 and 4:
        <screen>api/organisationUnits.geojson?level=2&amp;level=4</screen></para>
      <para>Get all features at level 3 with a boundary organisation
        unit:<screen>api/organisationUnits.geojson?parent=fdc6uOvgoji&amp;level=3</screen></para>
    </section>
  </section>
  <section>
    <title>Generating resource, analytics and data mart tables</title>
    <para>DHIS 2 features a set of generated database tables which are used as basis for various
      system functionality. These tables can be executed immediately or scheduled to be executed at
      regular intervals through the user interface. They can also be generated through the Web API
      as explained in this section. This task is typically one for a system administrator and not
      consuming clients. </para>
    <para>The resource tables are used internally by the DHIS 2 application for various analysis
      functions. These tables are also valuable for users writing advanced SQL reports. They can be
      generated with a POST or PUT request to the following URL:</para>
    <screen>api/resourceTables</screen>
    <para>The analytics tables are optimized for data aggregation and used currently in DHIS 2 for
      the pivot table module. The analytics tables can be generated with a POST or PUT request
      to:</para>
    <screen>api/resourceTables/analytics</screen>
    <table frame="all">
      <title>Analytics tables optional query parameters</title>
      <tgroup cols="3">
        <colspec colnum="1" colname="c1" colwidth="2.38*"/>
        <colspec colnum="2" colname="c2" colwidth="1*"/>
        <colspec colnum="3" colname="c3" colwidth="3.76*"/>
        <thead>
          <row>
            <entry>Query parameter</entry>
            <entry>Options</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>skipResourceTables</entry>
            <entry>false | true</entry>
            <entry>Skip generation of resource tables</entry>
          </row>
          <row>
            <entry>skipAggregate</entry>
            <entry>false | true</entry>
            <entry>Skip generation of aggregate data and completeness data</entry>
          </row>
          <row>
            <entry>skipEvents</entry>
            <entry>false | true</entry>
            <entry>Skip generation of event data</entry>
          </row>
          <row>
            <entry>lastYears</entry>
            <entry>integer</entry>
            <entry>Number of last years of data to include</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>The data mart is tables containing pre-calculated aggregated data which are used by DHIS 2
      analysis modules and can be used directly by SQL reports. The data mart tables can be
      generated with a POST or PUT request to:</para>
    <screen>api/resourceTables/dataMart</screen>
    <para>These requests will return immediately and initiate a server-side process.</para>
  </section>
  <section>
    <title>Maintenance</title>
    <para>To perform maintenance you can interact with the <emphasis role="italic">maintenance</emphasis> resource. You should use <emphasis role="italic">POST</emphasis> or
        <emphasis role="italic">PUT</emphasis> as method for requests. The following requests are
      available. </para>
    <para>Period pruning will remove periods which are not linked to any data values:</para>
    <screen>api/maintenance/periodPruning</screen>
    <para>Zero data value removal will delete zero data values linked to data elements where zero
      data is defined as not significant:</para>
    <screen>api/maintenance/zeroDataValueRemoval</screen>
    <para>Category option combo update will remove obsolete and generate missing category option
      combos for all category combinations:</para>
    <screen>api/maintenance/categoryOptionComboUpdate</screen>
    <para>Cache clearing will clear the application Hibernate cache and the analytics partition
      caches:</para>
    <screen>api/maintenance/cache</screen>
  </section>
  <section>
    <title>System resource</title>
    <para>The system resource provides you with convenient information and functions. The system
      resource can be found at <emphasis role="italic">/api/system</emphasis>. </para>
    <section>
      <title>Generate identifiers</title>
      <para>To generate valid, random DHIS 2 identifiers you can do a GET request to this
        resource:</para>
      <screen>http://&lt;server-url&gt;/api/system/id?n=3</screen>
      <para>The <emphasis role="italic">n</emphasis> query parameter is optional and indicates how
        many identifiers you want to be returned with the response. The default is to return one
        identifier. The response will contain a JSON object with a array named codes, similar to
        this:</para>
      <screen>{
  &quot;codes&quot;: [
    &quot;Y0moqFplrX4&quot;,
    &quot;WI0VHXuWQuV&quot;,
    &quot;BRJNBBpu4ki&quot;
  ]
}</screen>
      <para>The DHIS 2 UID format has these requirements:</para>
      <itemizedlist>
        <listitem>
          <para>11 characters long.</para>
        </listitem>
        <listitem>
          <para>Alphanumeric characters only, ie. alphabetic or numeric characters
            (A-Za-z0-9).</para>
        </listitem>
        <listitem>
          <para>Start with an alphabetic character (A-Za-z).</para>
        </listitem>
      </itemizedlist>
    </section>
    <section>
      <title>View system information</title>
      <para>To get information about the current system you can do a GET request to this URL:</para>
      <screen>http://yourdomain.com/api/system/info</screen>
      <para>JSON and JSONP response formats are supported. The system info response currently includes
        the below properties. Note that if the user who is requesting this resourec does not have
        full authority in the system then only the first seven properties will be included, as this
        information is security sensitive.</para>
      <screen>{
    contextPath: &quot;http://yourdomain.com&quot;,
    userAgent: &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.62 Safari/537.36&quot;,
    version: &quot;2.13-SNAPSHOT&quot;,
    revision: &quot;11852&quot;,
    buildTime: &quot;2013-09-01T21:36:21.000+0000&quot;,
    serverDate: &quot;2013-09-02T12:35:54.311+0000&quot;,
    environmentVariable: &quot;DHIS2_HOME&quot;,
    javaVersion: &quot;1.7.0_06&quot;,
    javaVendor: &quot;Oracle Corporation&quot;,
    javaIoTmpDir: &quot;/tmp&quot;,
    javaOpts: &quot;-Xms600m -Xmx1500m -XX:PermSize=400m -XX:MaxPermSize=500m&quot;,
    osName: &quot;Linux&quot;,
    osArchitecture: &quot;amd64&quot;,
    osVersion: &quot;3.2.0-52-generic&quot;,
    externalDirectory: &quot;/home/dhis/config/dhis2&quot;,
    databaseInfo: {
        type: &quot;PostgreSQL&quot;,
        name: &quot;dhis2&quot;,
        user: &quot;dhis&quot;
    },
    memoryInfo: &quot;Mem Total in JVM: 848 Free in JVM: 581 Max Limit: 1333&quot;,
    cpuCores: 8
    }</screen>
      <para>To get information about the system context (<emphasis role="italic">contextPath</emphasis> and <emphasis role="italic">userAgent</emphasis>) only you can do
        a GET request to the below URL. JSON and JSONP response formats are supported:
        <screen>http://yourdomain.com/api/system/context</screen></para>
    </section>
    <section>
      <title>Check if username and password combination is correct</title>
      <para>To check if some user credentials (a username and password combination) is correct you
        can make a <emphasis role="italic">GET</emphasis> request to the following resource using
          <emphasis role="italic">basic authentication</emphasis>:</para>
      <screen>http://&lt;server-url&gt;/api/system/ping</screen>
      <para>You can detect the outcome of the authentication by inspecting the <emphasis role="italic">HTTP status code</emphasis> of the response header. The meaning of the
        possible status codes are listed below. Note that this applies to Web API requests in
        general.</para>
      <table frame="all">
        <title>HTTP Status codes</title>
        <tgroup cols="3">
          <colspec colnum="1" colname="c1" colwidth="1.1*"/>
          <colspec colnum="2" colname="c2" colwidth="1*"/>
          <colspec colnum="3" colname="newCol3" colwidth="6.09*"/>
          <thead>
            <row>
              <entry>HTTP Status code</entry>
              <entry>Description</entry>
              <entry>Outcome</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>200</entry>
              <entry>OK</entry>
              <entry>Authentication was successful</entry>
            </row>
            <row>
              <entry>302</entry>
              <entry>Found</entry>
              <entry>No credentials was supplied with the request - no authentication took place</entry>
            </row>
            <row>
              <entry>401</entry>
              <entry>Unauthorized</entry>
              <entry>The username and password combination was incorrect - authentication failed</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </section>
  <section>
    <title>Current user information and associations</title>
    <para>In order to get information about the currently authenticated user and its associations to other resources you can work with the <emphasis role="italic">me</emphasis> resource (you can also refer to it by its old name <emphasis role="italic">currentUser</emphasis>). The current user related
      resources gives your information which is useful when building clients for instance for data entry and user management. The following describes these
      resources and their purpose.</para>
    <para>Provides basic information about the user that you are
      currently logged in as, including username, user credentials, assigned organisation
      units:</para>
    <screen>/api/me</screen>
    <para>Gives information about currently unread messages and interpretations:</para>
    <screen>/api/me/dashboard</screen>
    <para>Lists all messages and interpretations in the inbox (including replies):</para>
    <screen>/api/me/inbox</screen>
    <para>Gives the full profile information for current user. This endpoint support both <emphasis role="italic">GET</emphasis> to retrieve profile and <emphasis role="italic">POST</emphasis>
      to update profile (the exact same format is used):</para>
    <screen>/api/me/user-account</screen>
    <para>Returns the set of authorities granted to the current user:</para>
    <screen>/api/me/authorization</screen>
    <para>Returns true or false, indicating whether the current user has been granted the given
      &lt;auth&gt; authorization:</para>
    <screen>/api/me/authorization/&lt;auth&gt;</screen>
    <para>Lists all organisation units directly assigned to the user:</para>
    <screen>/api/me/organisationUnits</screen>
    <para>Gives all the datasets assigned to the users organisation units, and their direct
      children. This endpoint contains all required information to build a form based on one of our
      datasets. If you want all descendants of your assigned organisation units, you can use the
      query parameter <emphasis role="italic">includeDescendants=true</emphasis> :</para>
    <screen>/api/me/dataSets</screen>
    <para>Gives all the programs assigned to the users organisation units, and their direct
      children. This endpoint contains all required information to build a form based on one of our
      datasets. If you want all descendants of your assigned organisation units, you can use the
      query parameter <emphasis role="italic">includeDescendants=true</emphasis> :</para>
    <screen>/api/me/programs</screen>
    <para>Gives the data approval levels which are relenvant to the current user:</para>
    <screen>/api/me/dataApprovalLevels</screen>
  </section>
  <section>
    <title>System settings</title>
    <para>You can manipulate system settings by interacting with the <emphasis role="italic">systemSettings</emphasis> resource. A system setting is a simple key-value pair, where both
      the key and the value are plain text strings. To save or update a system setting you can make
      a <emphasis role="italic">POST</emphasis> request to the following URL:</para>
    <screen>/api/systemSettings/my-key?value=my-val</screen>
    <para>Alternatively, you can submit the setting value as the request body, where content type is
      set to &quot;text/plain&quot;. As an example, you can use curl like this:</para>
    <screen>curl &quot;apps.dhis2.org/demo/api/systemSettings/my-key&quot; -d &quot;My long value&quot; -H &quot;Content-Type: text/plain&quot; -u admin:district -v</screen>
    <para>To set system settings in bulk you can send a JSON object with a property -value pair for
      each system setting key-value pair using a POST request:</para>
    <screen>{
  &quot;keyApplicationNotification&quot;: &quot;Welcome&quot;,
  &quot;keyApplicationIntro&quot;: &quot;DHIS 2&quot;,
  &quot;keyApplicationFooter&quot;: &quot;Read more at dhis2.org&quot;
}  </screen>
    <para>You should replace my-key with your real key and my-val with your real value. To retrieve
      the value for a given key in plain text you can make a <emphasis role="italic">GET</emphasis>
      request to the following URL:</para>
    <screen>/api/systemSettings/my-key</screen>
    <para>Alternatively, you can specify the key as a query parameter:</para>
    <screen>/api/systemSettings?key=my-key</screen>
    <para>You can retrieve specific system settings as JSON by repeating the key query
      parameter:</para>
    <screen>curl &quot;apps.dhis2.org/demo/api/systemSettings?key=keyApplicationNotification&amp;key=keyApplicationIntro&quot; -H &quot;Content-Type: application/json&quot; -u admin:district -v</screen>
    <para>You can retrieve all system settings with a GET request:</para>
    <screen>/api/systemSettings</screen>
    <para>To delete a system setting, you can make a <emphasis role="italic">DELETE</emphasis>
      request to the URL similar to the one used above for retrieval.</para>
  </section>
  <section>
    <title>User settings</title>
    <para>You can manipulate user settings by interacting with the <emphasis role="italic">userSettings</emphasis> resource. A user setting is a simple key-value pair, where both the
      key and the value are plain text strings. The user setting will be linked to the user who is
      authenticated for the Web API request. To save or update a setting for the currently
      authenticated user you can make a <emphasis role="italic">POST</emphasis> request to the
      following URL:</para>
    <screen>/api/userSettings/my-key?value=my-val</screen>
    <para>You can specify the user for which to save the setting explicitly with this syntax:</para>
    <screen>/api/userSettings/my-key?user=user-id&amp;value=my-val</screen>
    <para>Alternatively, you can submit the setting value as the request body, where content type is
      set to &quot;text/plain&quot;. As an example, you can use curl like this:</para>
    <screen>curl &quot;apps.dhis2.org/demo/api/userSettings/my-key&quot; -d &quot;My long value&quot; -H &quot;Content-Type: text/plain&quot; -u admin:district -v</screen>
    <para>You should replace my-key with your real key and my-val with your real value. To retrieve
      the value for a given key in plain text you can make a <emphasis role="italic">GET</emphasis>
      request to the following URL:</para>
    <screen>/api/userSettings/my-key</screen>
    <para>To delete a user setting, you can make a <emphasis role="italic">DELETE</emphasis> request
      to the URL similar to the one used above for retrieval.</para>
  </section>
  <section>
    <title>Configuration</title>
    <para>To access configuration you can interact with the <emphasis role="italic">configuration</emphasis> resource. You can get XML and JSON responses through the <emphasis role="italic">Accept</emphasis> header or by using the .json or .xml extensions. You can
        <emphasis role="italic">GET</emphasis> the configuration from:</para>
    <screen>/api/configuration</screen>
    <para>You can send <emphasis role="italic">GET</emphasis> requests to the following
      sub-resources:</para>
    <screen>/api/configuration/systemId</screen>
    <screen>/api/configuration/feedbackRecipients</screen>
    <screen>/api/configuration/offlineOrganisationUnitLevel</screen>
    <screen>/api/configuration/infrastructuralDataElements</screen>
    <screen>/api/configuration/infrastructuralPeriodType</screen>
    <screen>/api/configuration/selfRegistrationRole</screen>
    <screen>/api/configuration/selfRegistrationOrgUnit</screen>
  </section>
  <section>
    <title>Translations</title>
    <para>In order to retrieve key-value pairs for translated strings you can use the <emphasis role="italic">i18n</emphasis> resource. The endpoint is located at <emphasis role="italic">api/i18n</emphasis> and the request format is a simple array of the key-value pairs:</para>
    <screen>[
  &quot;access_denied&quot;,
  &quot;uploading_data_notification&quot;
]</screen>
    <para>The request must be of type <emphasis role="italic">POST</emphasis> and use <emphasis role="italic">application/json</emphasis> as content-type. An example using curl, assuming
      the request data is saved as a file keys.json:</para>
    <screen>curl -d @keys.json &quot;apps.dhis2.org/demo/api/i18n&quot; -X POST -H &quot;Content-Type: application/json&quot; -u admin:district -v</screen>
    <para>The result will look like this:</para>
    <screen>{
  &quot;access_denied&quot;:&quot;Access denied&quot;,
  &quot;uploading_data_notification&quot;:&quot;Uploading locally stored data to the server&quot;
}</screen>
  </section>
  <section>
    <title>SVG conversion</title>
    <para>The Web API provides a resource which can be used to convert SVG content into more widely
      used formats such as PNG and PDF. Ideally this conversion should happen on the client side,
      but not all client side technologies are capable of performing this task. Currently PNG and
      PDF output formats are supported. The SVG content itself should passed with a <emphasis role="italic">svg</emphasis> query parameter, and an optional query parameter <emphasis role="italic">filename</emphasis> can be used to specify the filename of the response
      attachment file. Note that the file extension should be omitted. For PNG you can send a
        <emphasis role="italic">POST</emphasis> request to the following URL with Content-type
        <emphasis role="italic">application/x-www-form-urlencoded</emphasis>, identical to a regular
      HTML form submission.</para>
    <screen>api/svg.png</screen>
    <para>For PDF you can send a <emphasis role="italic">POST</emphasis> request to the following
      URL with Content-type <emphasis role="italic">application/x-www-form-urlencoded</emphasis>.</para>
    <screen>api/svg.pdf</screen>
    <table frame="all">
      <title>Query parameters</title>
      <tgroup cols="3">
        <colspec colnum="1" colname="c1" colwidth="1.92*"/>
        <colspec colnum="2" colname="c2" colwidth="1*"/>
        <colspec colnum="3" colname="c3" colwidth="5.96*"/>
        <thead>
          <row>
            <entry>Query parameter</entry>
            <entry>Required</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>svg</entry>
            <entry>Yes</entry>
            <entry>The SVG content</entry>
          </row>
          <row>
            <entry>filename</entry>
            <entry>No</entry>
            <entry>The file name for the returned attachment without file extension</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  <section>
    <title>Tracked entity management</title>
    <para>Tracked entity have full CRUD (create, read, update, delete) support in the Web-API. A tracked entity only have two required
      property, <emphasis role="italic">name</emphasis> and <emphasis role="italic">description</emphasis>.</para>
    <para>
      <screen>{
  &quot;name&quot;: &quot;Name of tracked entity&quot;,
  &quot;description&quot;: &quot;Description of tracked entity&quot;
}</screen>
    </para>
    <para>This payload can be sent to the <emphasis role="italic">trackedEntities</emphasis> resource, both <emphasis role="bold">POST</emphasis> and <emphasis role="bold">PUT</emphasis> are supported. For deleting a tracked entity you must use the <emphasis role="bold">DELETE</emphasis> method at the <emphasis role="italic">/api/trackedEntities/UID</emphasis> resource.</para>
  </section>
  <section>
    <title>Tracked entity instance management</title>
    <para>Tracked entity instances have full CRUD (create, read, update, delete) support in the Web-API. Together with the API for enrollment most operations
      needed for working with tracked entity instances and programs are supported.</para>
    <section>
      <title>Creating a new tracked entity instance</title>
      <para>For creating a new person in the system, you will be working with the <emphasis role="italic">trackedEntityInstances</emphasis> resource. A template payload can be seen
        below:<screen>{
    &quot;trackedEntity&quot;: &quot;tracked-entity-id&quot;,
    &quot;orgUnit&quot;: &quot;org-unit-id&quot;,
    &quot;attributes&quot;: [ {
        &quot;attribute&quot;: &quot;attribute-id&quot;,
        &quot;value&quot;: &quot;attribute-value&quot;
    } ]
}</screen></para>
      <para>For getting the IDs for <emphasis role="italic">relationship</emphasis>, <emphasis role="italic">attributes</emphasis> you can have a look at the respective resources
          <emphasis role="italic">relationshipTypes</emphasis>,, <emphasis role="italic">trackedEntityAttributes</emphasis>. To create a tracked entity instance you must use the
        HTTP <emphasis role="bold">POST</emphasis> method. You can post the payload the the
        following URL:</para>
      <screen>/api/trackedEntityInstances</screen>
      <para> For example, let us create a new instance of a person tracked entity and specify its
        first name and last name
        attributes:<screen>{
  &quot;trackedEntity&quot;: &quot;cyl5vuJ5ETQ&quot;,
  &quot;orgUnit&quot;: &quot;DiszpKrYNg8&quot;,
  &quot;attributes&quot;: [
    {
      &quot;attribute&quot;: &quot;dv3nChNSIxy&quot;,
      &quot;value&quot;: &quot;Joe&quot;
    },
    {
      &quot;attribute&quot;: &quot;hwlRTFIFSUq&quot;,
      &quot;value&quot;: &quot;Smith&quot;
    }
  ]
}</screen></para>
      <para>To push this to the server you can use the cURL command like
        this:<screen>curl -d @tei.json &quot;apps.dhis2.org/demo/api/trackedEntityInstances&quot; -X POST -H &quot;Content-Type: application/json&quot; -u admin:district -v</screen></para>
    </section>
    <section>
      <title>Updating a tracked entity instance</title>
      <para>For updating a tracked entity instance, the payload is the equal to the previous section. The difference is that you must use
        the HTTP <emphasis role="bold">PUT</emphasis> method for the request when sending the payload. You will also need to append the
        person identifier to the <emphasis role="italic">trackedEntityInstances</emphasis> resource in the URL like this, where
        &lt;tracked-entity-instance-identifier&gt; should be replaced by the identifier of the tracked entity instance:</para>
      <screen>/api/trackedEntityInstances/&lt;tracked-entity-instance-id&gt;</screen>
    </section>
    <section>
      <title>Deleting a tracked entity instance</title>
      <para>To delete a tracked entity instance you can make a request to the URL identifiying the tracked entity instance with the HTTP
          <emphasis role="bold">DELETE</emphasis> method. The URL is equal to the one above used for update.</para>
    </section>
    <section>
      <title>Enrolling a tracked entity instance into a program</title>
      <para>For enrolling persons into a program, you will need to first get the identifier of the person from the <emphasis role="italic">trackedEntityInstances</emphasis> resource. Then, you will need to get the program identifier from the <emphasis role="italic">programs</emphasis> resource. A template payload can be seen
        below:<screen>{
    &quot;trackedEntityInstance&quot;: &quot;ZRyCnJ1qUXS&quot;,
    &quot;program&quot;: &quot;S8uo8AlvYMz&quot;,
    &quot;dateOfEnrollment&quot;: &quot;2013-09-17&quot;,
    &quot;dateOfIncident&quot;: &quot;2013-09-17&quot;
}</screen></para>
      <para>This payload should be used in a <emphasis role="bold">POST</emphasis> request to the
        enrollments resource identified by the following URL:</para>
      <screen>/api/enrollments</screen>
      <para>For cancelling or completing an enrollment, you can make a <emphasis role="bold">PUT</emphasis> request to the <emphasis role="italic">enrollments</emphasis> resource, including the identifier and the action you want to perform. For cancelling an
        enrollment for a tracked entity instance:<screen>/api/enrollments/&lt;enrollment-id&gt;/cancelled</screen></para>
      <para>For completing a enrollment for a tracked entity instance you can make a <emphasis role="bold">PUT</emphasis> request to the
        following URL:<screen>/api/enrollments/&lt;enrollment-id&gt;/completed</screen></para>
      <para>For deleting a enrollment, you can make a <emphasis role="bold">DELETE</emphasis> request to the following
        URL:<screen>/api/enrollments/&lt;enrollment-id&gt;</screen></para>
    </section>
  </section>
  <section>
    <title>Tracked entity instance query</title>
    <para>To query for tracked entity instances you can interact with the <emphasis role="italic">/api/trackedEntityInstances</emphasis> resource. There are two types of queries: One where
      a <emphasis role="italic">query</emphasis> query parameter and optionally <emphasis role="italic">attribute</emphasis> parameters are defined, and one where <emphasis role="italic">attribute</emphasis> and <emphasis role="italic">filter</emphasis> parameters
      are defined.</para>
    <section>
      <title>Request syntax</title>
      <table frame="all">
        <title>Tracked entity instances query parameters</title>
        <tgroup cols="2">
          <colspec colnum="1" colname="c1" colwidth="1.38*"/>
          <colspec colnum="2" colname="c3" colwidth="7.25*"/>
          <thead>
            <row>
              <entry>Query parameter</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>query</entry>
              <entry>Query string. Attribute query parameter can be used to define which attributes to include in the response. If no attributes but a program is defined, the attributes from the program will be used. If no program is defined, all attributes will be used. There are two formats. The first is a plan query string. The second is on the format &lt;operator&gt;:&lt;query&gt;. Operators can be EQ | LIKE. EQ implies exact matches on words, LIKE implies partial matches on words. The query will be split on space, where each word will form a logical AND query.</entry>
            </row>
            <row>
              <entry>attribute</entry>
              <entry>Attributes to be included in the response. Can also be used a filter for the query. Param can be repeated any number of times. Filters can be applied to a dimension on the format &lt;attribute-id&gt;:&lt;operator&gt;:&lt;filter&gt;[:&lt;operator&gt;:&lt;filter&gt;]. Filter values are case-insensitive and can be repeated together with operator any number of times. Operators can be EQ | GT | GE | LT | LE | NE | LIKE | IN. Filters can be omitted in order to simply include the attribute in the response without any constraints.</entry>
            </row>
            <row>
              <entry>filter</entry>
              <entry>Attributes to use as a filter for the query. Param can be repeated any number of times. Filters can be applied to a dimension on the format &lt;attribute-id&gt;:&lt;operator&gt;:&lt;filter&gt;[:&lt;operator&gt;:&lt;filter&gt;]. Filter values are case-insensitive and can be repeated together with operator any number of times. Operators can be EQ | GT | GE | LT | LE | NE | LIKE | IN.</entry>
            </row>
            <row>
              <entry>ou</entry>
              <entry>Organisation unit idenfiers, separated by &quot;;&quot;.</entry>
            </row>
            <row>
              <entry>ouMode</entry>
              <entry>The mode of selecting organisation units, can be SELECTED | CHILDREN | DESCENDANTS | ACCESSIBLE | ALL. Default is SELECTED, which refers to the selected organisation units only. See table below for explanations.</entry>
            </row>
            <row>
              <entry>program</entry>
              <entry>Program identifier. Restricts instances to being enrolled in the given program.</entry>
            </row>
            <row>
              <entry>programStatus</entry>
              <entry>Status of the instance for the given program. Can be ACTIVE | COMPLETED | CANCELLED.</entry>
            </row>
            <row>
              <entry>followUp</entry>
              <entry>Follow up status of the instance for the given program. Can be true | false or omitted.</entry>
            </row>
            <row>
              <entry>programStartDate</entry>
              <entry>Start date of enrollment in the given program for the tracked entity instance.</entry>
            </row>
            <row>
              <entry>programEndDate</entry>
              <entry>End date of enrollment in the given program for the tracked entity instance.</entry>
            </row>
            <row>
              <entry>trackedEntity</entry>
              <entry>Tracked entity identifer. Restricts instances to the given tracked instance type.</entry>
            </row>
            <row>
              <entry>eventStatus</entry>
              <entry>Status of any event associated with the given program and the tracked entity instance. Can be COMPLETED | VISITED | FUTURE_VISIT | LATE_VISIT | SKIPPED.</entry>
            </row>
            <row>
              <entry>eventStartDate</entry>
              <entry>Start date of event associated with the given program and event status.</entry>
            </row>
            <row>
              <entry>eventEndDate</entry>
              <entry>End date of event associated with the given program and event status.</entry>
            </row>
            <row>
              <entry>skipMeta</entry>
              <entry>Indicates whether meta data for the response should be included.</entry>
            </row>
            <row>
              <entry>page</entry>
              <entry>The page number. Default page is 1.</entry>
            </row>
            <row>
              <entry>pageSize</entry>
              <entry>The page size. Default size is 50 rows per page.</entry>
            </row>
            <row>
              <entry>skipPaging</entry>
              <entry>Indicates whether paging should be ignored and all rows should be returned.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>The available organisation unit selection modes are explained in the following
        table.</para>
      <table frame="all">
        <title>Organisation unit selection modes</title>
        <tgroup cols="2">
          <colspec colnum="1" colname="c1" colwidth="1*"/>
          <colspec colnum="2" colname="c2" colwidth="3.88*"/>
          <thead>
            <row>
              <entry>Mode</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>SELECTED</entry>
              <entry>Organisation units defined in the request.</entry>
            </row>
            <row>
              <entry>CHILDREN</entry>
              <entry>Immediate children, i.e. only the first level below, of the organisation units defined in the request.</entry>
            </row>
            <row>
              <entry>DESCENDANTS</entry>
              <entry>All children, i.e. at only levels below, e.g. including children of children, of the organisation units defined in the request.</entry>
            </row>
            <row>
              <entry>ACCESSIBLE</entry>
              <entry>All descendants of the data view organisation units associated with the current user. Will fall back to data capture organisation units associated with the current user if the former is not defined.</entry>
            </row>
            <row>
              <entry>ALL</entry>
              <entry>All organisation units in the system. Requires authority.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>Note that you can specify attributes with filters for constraining the instances to
      return, or attributes without filters in order to include the attribute in the response
      without any constraints. Attributes will be included in the response, while filters will only
      be used as criteria. </para>
      <para>Certain rules apply to which attributes are defined when no attributes are specified in
        the request:</para>
      <itemizedlist>
        <listitem>
          <para>If not specifying a program, the attributes defined to be displayed in lists with no
            program will be included in the response.</para>
        </listitem>
        <listitem>
          <para>If specifying a program, the attributes linked to the program will be included in
            the response.</para>
        </listitem>
      </itemizedlist>
      <para>You can specify queries with words separated by space - in that situation the system will
        query for each word independently and return records where each word is contained in any
        attribute. A query item can be specified once as an attribute and once as a filter if
        needed. The query is case insensitive. The following rules apply to the query
        parameters.</para>
      <itemizedlist>
        <listitem>
          <para>At least one organisation unit must be specified using the <emphasis role="italic">ou</emphasis> parameter (one or many).</para>
        </listitem>
        <listitem>
          <para>Only one of the <emphasis role="italic">program</emphasis> and <emphasis role="italic">trackedEntity</emphasis> parameters can be specified (zero or
            one).</para>
        </listitem>
        <listitem>
          <para>If <emphasis role="italic">programStatus</emphasis> is specified then <emphasis role="italic">program</emphasis> must also be specified.</para>
        </listitem>
        <listitem>
          <para>If <emphasis role="italic">followUp</emphasis> is specified then <emphasis role="italic">program</emphasis> must also be specified.</para>
        </listitem>
        <listitem>
          <para>If <emphasis role="italic">programStartDate</emphasis> or <emphasis role="italic">programEndDate</emphasis> is specified then <emphasis role="italic">program</emphasis> must also be specified.</para>
        </listitem>
        <listitem>
          <para>If <emphasis role="italic">eventStatus</emphasis> is specified then <emphasis role="italic">eventStartDate</emphasis> and <emphasis role="italic">eventEndDate</emphasis> must also be specified.</para>
        </listitem>
        <listitem>
          <para>A query cannot be specified together with filters.</para>
        </listitem>
        <listitem>
          <para>Attribute items can only be specified once.</para>
        </listitem>
        <listitem>
          <para>Filter items can only be specified once.</para>
        </listitem>
      </itemizedlist>
      <para>A query for all instances associated with a specific organisation unit can look like
      this:</para>
      <screen>api/trackedEntityInstances.json?ou=DiszpKrYNg8</screen>
      <para>A query on all attributes for a specific value and organisation unit, using an exact word
        match:</para>
      <screen>api/trackedEntityInstances.json?query=scott&amp;ou=DiszpKrYNg8</screen>
      <para>A query on all attributes for a specific value, using a partial word match:</para>
      <screen>api/trackedEntityInstances.json?query=LIKE:scott&amp;ou=DiszpKrYNg8</screen>
      <para>You can query on multiple words separated by the the URL character for space which is
        %20, will use a logical AND query for each word:</para>
      <screen>api/trackedEntityInstances.json?query=isabel%20may&amp;ou=DiszpKrYNg8</screen>
      <para>A query where the attributes to include in the response are specified:</para>
      <screen>api/trackedEntityInstances.json?query=isabel&amp;attribute=dv3nChNSIxy&amp;attribute=AMpUYgxuCaE&amp;ou=DiszpKrYNg8</screen>
      <para>To query for instances using one attribute with a filter and one attribute without a
        filter, with one organisation unit using the descendants organisation unit query
        mode:</para>
      <screen>api/trackedEntityInstances.json?attribute=zHXD5Ve1Efw:EQ:A&amp;attribute=AMpUYgxuCaE&amp;ou=DiszpKrYNg8;yMCshbaVExv</screen>
      <para>A query for instances where one attribute is included in the response and one attribute us
        used as a filter:</para>
      <screen>api/trackedEntityInstances.json?attribute=zHXD5Ve1Efw:EQ:A&amp;filter=AMpUYgxuCaE:LIKE:Road&amp;ou=DiszpKrYNg8</screen>
      <para>A query where multiple operand and filters are specified for a filter item:</para>
      <screen>api/trackedEntityInstances.json?ou=DiszpKrYNg8&amp;program=ur1Edk5Oe2n&amp;filter=lw1SqmMlnfh:GT:150:LT:190</screen>
      <para>To query on an attribute using multiple values in an IN filter:</para>
      <screen>api/trackedEntityInstances.json?ou=DiszpKrYNg8&amp;attribute=dv3nChNSIxy:IN:Scott;Jimmy;Santiago</screen>
      <para>To constrain the response to instances which are part of a specific program you can
        include a program query parameter:</para>
      <screen>api/trackedEntityInstances.json?filter=zHXD5Ve1Efw:EQ:A&amp;ou=O6uvpzGd5pu&amp;ouMode=DESCENDANTS&amp;program=ur1Edk5Oe2n</screen>
      <para>To specify program enrollment dates as part of the query:</para>
      <screen>api/trackedEntityInstances.json?filter=zHXD5Ve1Efw:EQ:A
&amp;ou=O6uvpzGd5pu&amp;program=ur1Edk5Oe2n
&amp;programStartDate=2013-01-01&amp;programEndDate=2013-09-01</screen>
      <para>To constrain the response to instances of a specific tracked entity you can include a
        tracked entity query parameter:</para>
      <screen>api/trackedEntityInstances.json?attribute=zHXD5Ve1Efw:EQ:A
&amp;ou=O6uvpzGd5pu&amp;ouMode=DESCENDANTS
&amp;trackedEntity=cyl5vuJ5ETQ</screen>
      <para>By default the instances are returned in pages of size 50, to change this you can use the
        page and pageSize query parameters:</para>
      <screen>api/trackedEntityInstances.json?attribute=zHXD5Ve1Efw:EQ:A
&amp;ou=O6uvpzGd5pu&amp;ouMode=DESCENDANTS&amp;page=2&amp;pageSize=3</screen>
      <para>To query for instances which have events of a given status within a given time
        span:</para>
      <screen>api/trackedEntityInstances.json?ou=O6uvpzGd5pu
&amp;program=ur1Edk5Oe2n&amp;eventStatus=LATE_VISIT
&amp;eventStartDate=2014-01-01&amp;eventEndDate=2014-09-01</screen>
      <para>You can use a range of operators for the filtering:</para>
      <table frame="all">
        <title>Filter operators</title>
        <tgroup cols="2">
          <colspec colnum="1" colname="c1" colwidth="87.75pt"/>
          <colspec colnum="2" colname="c2" colwidth="368.25pt"/>
          <thead>
            <row>
              <entry>Operator</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>EQ</entry>
              <entry>Equal to</entry>
            </row>
            <row>
              <entry>GT</entry>
              <entry>Greater than</entry>
            </row>
            <row>
              <entry>GE</entry>
              <entry>Greater than or equal to</entry>
            </row>
            <row>
              <entry>LT</entry>
              <entry>Less than</entry>
            </row>
            <row>
              <entry>LE</entry>
              <entry>Less than or equal to</entry>
            </row>
            <row>
              <entry>NE</entry>
              <entry>Not equal to</entry>
            </row>
            <row>
              <entry>LIKE</entry>
              <entry>Like (free text match)</entry>
            </row>
            <row>
              <entry>IN</entry>
              <entry>Equal to one of multiple values separated by &quot;;&quot;</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section>
      <title>Response format</title>
      <para>This resource supports JSON, JSONP, XLS and CSV resource representations.</para>
      <itemizedlist>
        <listitem>
          <para>json (application/json)</para>
        </listitem>
        <listitem>
          <para>jsonp (application/javascript)</para>
        </listitem>
        <listitem>
          <para>xml (application/xml)</para>
        </listitem>
        <listitem>
          <para>csv (application/csv)</para>
        </listitem>
        <listitem>
          <para>xls (application/vnd.ms-excel)</para>
        </listitem>
      </itemizedlist>
      <para>The response in JSON comes is in a tabular format and can look like the following. The
          <emphasis role="italic">headers</emphasis> section describes the content of each column.
        The instance, created, last updated, org unit and tracked entity columns are always present.
        The following columns correspond to attributes specified in the query. The <emphasis role="italic">rows</emphasis> section contains one row per instance.</para>
      <screen>{
    &quot;headers&quot;: [{
        &quot;name&quot;: &quot;instance&quot;,
        &quot;column&quot;: &quot;Instance&quot;,
        &quot;type&quot;: &quot;java.lang.String&quot;
    }, {
        &quot;name&quot;: &quot;created&quot;,
        &quot;column&quot;: &quot;Created&quot;,
        &quot;type&quot;: &quot;java.lang.String&quot;
    }, {
        &quot;name&quot;: &quot;lastupdated&quot;,
        &quot;column&quot;: &quot;Last updated&quot;,
        &quot;type&quot;: &quot;java.lang.String&quot;
    }, {
        &quot;name&quot;: &quot;ou&quot;,
        &quot;column&quot;: &quot;Org unit&quot;,
        &quot;type&quot;: &quot;java.lang.String&quot;
    }, {
        &quot;name&quot;: &quot;te&quot;,
        &quot;column&quot;: &quot;Tracked entity&quot;,
        &quot;type&quot;: &quot;java.lang.String&quot;
    }, {
        &quot;name&quot;: &quot;zHXD5Ve1Efw&quot;,
        &quot;column&quot;: &quot;Date of birth type&quot;,
        &quot;type&quot;: &quot;java.lang.String&quot;
    }, {
        &quot;name&quot;: &quot;AMpUYgxuCaE&quot;,
        &quot;column&quot;: &quot;Address&quot;,
        &quot;type&quot;: &quot;java.lang.String&quot;
    }],
    &quot;metaData&quot;: {
        &quot;names&quot;: {
            &quot;cyl5vuJ5ETQ&quot;: &quot;Person&quot;
        }
    },
    &quot;width&quot;: 7,
    &quot;height&quot;: 7,
    &quot;rows&quot;: [
        [&quot;yNCtJ6vhRJu&quot;, &quot;2013-09-08 21:40:28.0&quot;, &quot;2014-01-09 19:39:32.19&quot;, &quot;DiszpKrYNg8&quot;, &quot;cyl5vuJ5ETQ&quot;, &quot;A&quot;, &quot;21 Kenyatta Road&quot;],
        [&quot;fSofnQR6lAU&quot;, &quot;2013-09-08 21:40:28.0&quot;, &quot;2014-01-09 19:40:19.62&quot;, &quot;DiszpKrYNg8&quot;, &quot;cyl5vuJ5ETQ&quot;, &quot;A&quot;, &quot;56 Upper Road&quot;],
        [&quot;X5wZwS5lgm2&quot;, &quot;2013-09-08 21:40:28.0&quot;, &quot;2014-01-09 19:40:31.11&quot;, &quot;DiszpKrYNg8&quot;, &quot;cyl5vuJ5ETQ&quot;, &quot;A&quot;, &quot;56 Main Road&quot;],
        [&quot;pCbogmlIXga&quot;, &quot;2013-09-08 21:40:28.0&quot;, &quot;2014-01-09 19:40:45.02&quot;, &quot;DiszpKrYNg8&quot;, &quot;cyl5vuJ5ETQ&quot;, &quot;A&quot;, &quot;12 Lower Main Road&quot;],
        [&quot;WnUXrY4XBMM&quot;, &quot;2013-09-08 21:40:28.0&quot;, &quot;2014-01-09 19:41:06.97&quot;, &quot;DiszpKrYNg8&quot;, &quot;cyl5vuJ5ETQ&quot;, &quot;A&quot;, &quot;13 Main Road&quot;],
        [&quot;xLNXbDs9uDF&quot;, &quot;2013-09-08 21:40:28.0&quot;, &quot;2014-01-09 19:42:25.66&quot;, &quot;DiszpKrYNg8&quot;, &quot;cyl5vuJ5ETQ&quot;, &quot;A&quot;, &quot;14 Mombasa Road&quot;],
        [&quot;foc5zag6gbE&quot;, &quot;2013-09-08 21:40:28.0&quot;, &quot;2014-01-09 19:42:36.93&quot;, &quot;DiszpKrYNg8&quot;, &quot;cyl5vuJ5ETQ&quot;, &quot;A&quot;, &quot;15 Upper Hill&quot;]
    ]
}</screen>
    </section>
  </section>
  <section>
    <title>User account invitations</title>
    <para>The Web API supports inviting people to create user accounts through the <emphasis role="italic">invite</emphasis> resource. To create an invitation you shoudl POST a user in
      XML or JSON format to the invite resource. A specific username can be forced by defining the
      username in the posted entity. By omitting the username, the person will be able to specify it
      herself. The system will send out an invitation through email. This requires that email
      settings have been properly configured. The invite resource is useful in order to securely
      allow people to create accounts without anyone else knowing the password or by transferring
      the password in plain text. The user entity can be posted like this:</para>
    <screen>curl -d @user.json &quot;localhost/api/users/invite&quot; -H &quot;Content-Type:application/json&quot; -u admin:district -v</screen>
    <para>To send out invites for multiple users at the same time, you must use a slight different
      format.</para>
    <para>For
      JSON:<screen>{
  "users": [
    { user payload as normal },
    { user payload as normal }
  ]
}</screen></para>
    <para>For XML:</para>
    <screen>&lt;users xmlns="http://dhis2.org/schema/dxf/2.0">
  &lt;user> ... user payload as normal &lt;/user>
  &lt;user> ... user payload as normal &lt;/user>
&lt;/users></screen>
    <para>And then use the endpoint <emphasis role="italic">/api/users/invites</emphasis>
      instead.</para>
  </section>
  <section>
    <title>Sharing</title>
    <para>The sharing solution allows you to share most objects in the system with specific user
      groups and to define whether objects should be public and private. To get and set sharing for
      objects you can interact with the <emphasis role="italic">sharing</emphasis> resource. To
      request the sharing status for an object use a GET request to:</para>
    <screen>api/sharing?type=dataElement&amp;id=fbfJHSPpUQD</screen>
    <para>You can define the sharing status for an object using the same URL with a POST request,
      where the payload in JSON format looks like this:</para>
    <screen>{
    &quot;meta&quot;: {
        &quot;allowPublicAccess&quot;: true,
        &quot;allowExternalAccess&quot;: false
    },
    &quot;object&quot;: {
        &quot;id&quot;: &quot;fbfJHSPpUQD&quot;,
        &quot;name&quot;: &quot;ANC 1st visit&quot;,
        &quot;publicAccess&quot;: &quot;rw------&quot;,
        &quot;externalAccess&quot;: false,
        &quot;user&quot;: {},
        &quot;userGroupAccesses&quot;: [
            {
                &quot;id&quot;: &quot;hj0nnsVsPLU&quot;,
                &quot;access&quot;: &quot;rw------&quot;
            },
            {
                &quot;id&quot;: &quot;qMjBflJMOfB&quot;,
                &quot;access&quot;: &quot;r-------&quot;
            }
        ]
    }
}</screen>
    <para>In this example, the payload defines the object to have read-write public access, no
      external access (without login), read-write access to one user group and read-only access to
      another user group. You can submit this to the sharing resource using curl:</para>
    <screen>curl -d @sharing.json &quot;localhost/api/sharing?type=dataElement&amp;id=fbfJHSPpUQD&quot; -H &quot;Content-Type:application/json&quot; -u admin:district -v</screen>
  </section>
  <section>
    <title>Schema Resource</title>
    <para>A new resource was included in DHIS 2.15 which can be used to introspect all available DXF2 classes, this resource can be found on
        <emphasis role="italic">/api/schemas</emphasis> and for a specific resource, you can have a look at <emphasis role="italic">/api/schemas/TYPE</emphasis>.</para>
    <para>Example 1: Get all available schemas in XML:<screen>GET /api/schemas.xml</screen></para>
    <para>Example 2: Get all available schemas in JSON:<screen>GET /api/schemas.json</screen></para>
    <para>Example 3: Get JSON schema for a specific class:<screen>GET /api/schemas/dataElement.json</screen></para>
  </section>
  <section>
    <title>UI Customization</title>
    <para>To customize the UI of the DHIS 2 application you can insert custom Javascript and CSS
      styles through the <emphasis role="italic">files</emphasis> resource. The Javascript and CSS
      content inserted through this resource will be loaded by the DHIS 2 web application. This can
      be particularly useful in certain situations:</para>
    <itemizedlist>
      <listitem>
        <para>Overriding the CSS styles of the DHIS 2 application, such as the login page or main
          page.</para>
      </listitem>
      <listitem>
        <para>Defining Javascript functions which are common to several custom data entry forms and
          HTML-based reports.</para>
      </listitem>
      <listitem>
        <para>Including CSS styles which are used in custom data entry forms and HTML-based
          reports.</para>
      </listitem>
    </itemizedlist>
    <para>To insert Javascript from a file called <emphasis role="italic">script.js</emphasis> you
      can interact with the <emphasis role="italic">files/script</emphasis> resource with a
      POST-request:</para>
    <screen>curl --data-binary @script.js &quot;localhost/api/files/script&quot; -H &quot;Content-Type:application/javascript&quot; -u admin:district -v</screen>
    <para>Note that we use the --data-binary option to preserve formatting of the file content. You
      can fetch the Javascript content with a GET-request:</para>
    <screen>localhost/api/files/script</screen>
    <para>To insert CSS from a file called <emphasis role="italic">style.css</emphasis> you can
      interact with the <emphasis role="italic">files/style</emphasis> resource with a
      POST-request:</para>
    <screen>curl --data-binary @style.css &quot;localhost/api/files/style&quot; -H &quot;Content-Type:text/css&quot; -u admin:district -v</screen>
    <para>You can fetch the CSS content with a GET-request:</para>
    <screen>localhost/api/files/style</screen>
  </section>
  <section>
    <title>FRED API</title>
    <para>DHIS 2 from version 2.11 implements support for the current draft
      of the FRED API version 1.0. The project defines itself as <quote>open standard for sharing and updating health facility data</quote>. The full specification, including representation format and basic usage, can be found at <ulink url="http://facilityregistry.org/">http://facilityregistry.org/</ulink>.</para>
    <para>Since version 1.0 is not finalized there are parts of the current specification that has not
      been implemented as we found it not to be in a stable enough state. Most notably we do not
      currently support sorting (we do however sort on name by default) and filtering of facilities.</para>
    <para>The entry point for the implementation can be found at http://&lt;server-url&gt;/api-fred
      and the current version is located at http://&lt;server-url&gt;/api-fred/v1.</para>
    <para>This section will give some simple examples of using the API.</para>
    <para>Get all facilities:</para>
    <screen>curl -u username:password -X GET http://&lt;server-url&gt;/api-fred/v1/facilities.json</screen>
    <para>Get a specific facility based on either identifier or UUID:</para>
    <screen>curl -u username:password -X GET http://&lt;server-url&gt;/api-fred/v1/facilities/&lt;id&gt;.json
curl -u username:password -X GET http://&lt;server-url&gt;/api-fred/v1/facilities/&lt;uuid&gt;.json</screen>
    <para>Create a new facility:</para>
    <screen>curl -u username:password -X POST -d @new_facility.json
  -H &quot;Content-Type: application/json&quot; http://&lt;server-url&gt;/api-fred/v1/facilities.json</screen>
    <para>Update a facility:</para>
    <screen>curl -u username:password -X POST -d @updated_facility.json
  -H &quot;Content-Type: application/json&quot; http://&lt;server-url&gt;/api-fred/v1/facilities/&lt;id&gt;.json</screen>
    <screen>
curl -u username:password -X POST -d @updated_facility.json
  -H &quot;Content-Type: application/json&quot; http://&lt;server-url&gt;/api-fred/v1/facilities/&lt;uuid&gt;.json</screen>
  </section>
</chapter>
